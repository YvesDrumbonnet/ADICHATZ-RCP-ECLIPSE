/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 12:30:02 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.common.toolBar;

import javax.inject.Inject;
import org.adichatz.engine.action.AAction;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.action.SeparatorController;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.listener.AControlListener;
import org.adichatz.engine.listener.AdiEvent;
import org.adichatz.engine.listener.IEventType;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.jpa.gencode.common.toolBar.MasterDetailStubTBM;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.widgets.Control;

@AdiResourceURI(URI="adi://org.adichatz.jpa/common.toolBar/MasterDetailTBM")
public class MasterDetailTBM extends MasterDetailStubTBM {
	// the ActionController expandDetailActionACT.
	private ActionController expandDetailActionACT;
	// the ActionController expandHeaderActionACT.
	private ActionController expandHeaderActionACT;
	// the SeparatorController separatorWrapper$$1SPR.
	private SeparatorController separatorWrapper$$1SPR;
	// the ActionController changeOrientationActionACT.
	private ActionController changeOrientationActionACT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new MasterDetailTBM.
	 * 
	 * This constructor could be used by Column parameter. (see org.adichatz.jpa)
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public MasterDetailTBM(AdiContext parentContext, IContainerController parentController) {
		super(parentContext,parentController);
	}

	/**
	 * Creates class MasterDetailTBM extension of org.adichatz.jpa.gencode.common.toolBar.MasterDetailStubTBM.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param parent controller
	 *            The collection parentController
	 * @param id
	 *            The part id
	 * @param parentContext
	 *            The parent context
	 */
	public MasterDetailTBM(ParamMap paramMap, IContainerController parentController, String id, AdiContext parentContext) {
		super(paramMap, parentController, id, parentContext);
		coreController = parentController;
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		super.createContents();
		// Creates control for ActionController expandDetailActionACT
		expandDetailActionACT = new ActionController("expandDetailAction", managedToolBarTB, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action =  new AAction() {
						@Override
						public void runAction() {
							expand(getControl(), getDetailControl());
						}
						@Override
						public void init() {
							super.init();
							setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL_EXPAND_DETAIL"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "expandDetail"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL_EXPAND_DETAIL"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "expandDetail"));
				}
			}
		};
		// Creates control for ActionController expandHeaderActionACT
		expandHeaderActionACT = new ActionController("expandHeaderAction", managedToolBarTB, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action =  new AAction() {
						@Override
						public void runAction() {
							expand(getControl(), getMasterControl());
						}
						@Override
						public void init() {
							super.init();
							setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL_EXPAND_HEADER"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "expandHeader"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL_EXPAND_HEADER"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "expandHeader"));
				}
			}
		};
		// Creates control for SeparatorController separatorWrapper$$1SPR
		separatorWrapper$$1SPR = new SeparatorController("separatorWrapper$$1", managedToolBarTB, this);
		// Creates control for ActionController changeOrientationActionACT
		changeOrientationActionACT = new ActionController("changeOrientationAction", managedToolBarTB, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action =  new AAction() {
						@Override
						public void runAction() {
							changeOrientation(getControl());
						}
						@Override
						public void init() {
							super.init();
							setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_HORIZONTAL"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "horizontalOrientation"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_HORIZONTAL"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "horizontalOrientation"));
				}
			}
		};
		AControlListener managedToolBarLSTN$0 = new AControlListener("AFTER_END_LIFE_CYCLE", IEventType.AFTER_END_LIFE_CYCLE) {
			@Override
			public void handleEvent(AdiEvent event) {
				setImages();
			}
		};
		managedToolBarTB.addListener(managedToolBarLSTN$0);
	}
	
	//* *****************
	//* Additional code *
	//*******************
	protected void expand(AAction action, Control control) {
	    SashForm sashForm = getSashForm();
	    if (!control.equals(sashForm.getMaximizedControl())) {
	        sashForm.setMaximizedControl(control);
	        setImages();
	        if(SWT.HORIZONTAL == sashForm.getOrientation())
	           action.setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_HORIZONTAL"));     			
	        else
	            action.setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL"));     			
	    } else {
	        sashForm.setMaximizedControl(null);
	        setImages();
	    }
	}
	protected void changeOrientation(AAction action) {
	    getSashForm().setMaximizedControl(null);
	    getSashForm().setOrientation(SWT.HORIZONTAL == getSashForm().getOrientation() ? SWT.VERTICAL : SWT.HORIZONTAL); 
		setImages();
	}
	protected void setImages() {
	   if(SWT.HORIZONTAL == getSashForm().getOrientation()) {
			((ActionController) getFromRegister("changeOrientationAction")).getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL"));
			((ActionController) getFromRegister("changeOrientationAction")).getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "horizontalOrientation"));
			((ActionController) getFromRegister("expandHeaderAction")).getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_HORIZONTAL_EXPAND_HEADER"));
			((ActionController) getFromRegister("expandDetailAction")).getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_HORIZONTAL_EXPAND_DETAIL"));
	   } else {
			((ActionController) getFromRegister("changeOrientationAction")).getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_HORIZONTAL"));
			((ActionController) getFromRegister("changeOrientationAction")).getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "verticalOrientation"));
			((ActionController) getFromRegister("expandHeaderAction")).getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL_EXPAND_HEADER"));
			((ActionController) getFromRegister("expandDetailAction")).getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_VERTICAL_EXPAND_DETAIL"));
	   }
	}
}