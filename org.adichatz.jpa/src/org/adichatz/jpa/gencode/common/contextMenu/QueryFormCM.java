/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 12:30:01 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.common.contextMenu;

import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import org.adichatz.common.ejb.util.IEntityConstants;
import org.adichatz.engine.action.AAction;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.ASetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.action.SeparatorController;
import org.adichatz.engine.controller.collection.ATabularController;
import org.adichatz.engine.controller.collection.MenuManagerController;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.e4.part.PartCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.tabular.CopyTableToClipboardAction;
import org.adichatz.engine.tabular.FilterByValueActionController;
import org.adichatz.engine.tabular.HideColumnActionController;
import org.adichatz.engine.tabular.RefreshColumnSizeActionController;
import org.adichatz.engine.tabular.RemoveColumnFilterActionController;
import org.adichatz.engine.tabular.ShowColumnMenuManagerController;
import org.adichatz.jpa.action.AddColumnFilterActionController;
import org.adichatz.jpa.action.AddEntityAction;
import org.adichatz.jpa.action.EditEntityAction;
import org.adichatz.jpa.action.EditNewEntityAction;
import org.adichatz.jpa.extra.ATabularContextMenuCore;
import org.adichatz.jpa.query.IQueryOutlinePage;
import org.adichatz.jpa.query.QueryToolInput;
import org.adichatz.jpa.query.action.CrossReferenceMenuActions;
import org.adichatz.jpa.query.action.LaunchQueryAction;
import org.adichatz.jpa.tabular.DisableAllFiltersActionController;
import org.adichatz.jpa.tabular.EnableAllFiltersActionController;
import org.adichatz.jpa.tabular.RemoveAllFiltersActionController;
import org.eclipse.jface.action.Action;

@AdiResourceURI(URI="adi://org.adichatz.jpa/common.contextMenu/QueryFormCM")
public class QueryFormCM extends ATabularContextMenuCore {
	// the MenuManagerController headerMenuHMM.
	protected MenuManagerController headerMenuHMM;
	// the HideColumnActionController hideColumnActionACT.
	private HideColumnActionController hideColumnActionACT;
	// the ShowColumnMenuManagerController showColumnsMM.
	protected ShowColumnMenuManagerController showColumnsMM;
	// the RefreshColumnSizeActionController refreshColumnSizeACT.
	private RefreshColumnSizeActionController refreshColumnSizeACT;
	// the SeparatorController separatorWrapper$$1SPR.
	private SeparatorController separatorWrapper$$1SPR;
	// the AddColumnFilterActionController addColumnFilterActionACT.
	private AddColumnFilterActionController addColumnFilterActionACT;
	// the RemoveColumnFilterActionController removeColumnFilterActionACT.
	private RemoveColumnFilterActionController removeColumnFilterActionACT;
	// the MenuManagerController contextMenuMM.
	protected MenuManagerController contextMenuMM;
	// the ActionController launchQueryActionACT.
	private ActionController launchQueryActionACT;
	// the SeparatorController separatorWrapper$$2SPR.
	private SeparatorController separatorWrapper$$2SPR;
	// the FilterByValueActionController filterByValueActionACT.
	private FilterByValueActionController filterByValueActionACT;
	// the DisableAllFiltersActionController disableAllFiltersActionACT.
	private DisableAllFiltersActionController disableAllFiltersActionACT;
	// the EnableAllFiltersActionController enableAllFiltersActionACT.
	private EnableAllFiltersActionController enableAllFiltersActionACT;
	// the RemoveAllFiltersActionController removeAllFiltersActionACT.
	private RemoveAllFiltersActionController removeAllFiltersActionACT;
	// the SeparatorController separatorWrapper$$3SPR.
	private SeparatorController separatorWrapper$$3SPR;
	// the ActionController copyTableToClipboardActionACT.
	private ActionController copyTableToClipboardActionACT;
	// the SeparatorController separatorWrapper$$4SPR.
	private SeparatorController separatorWrapper$$4SPR;
	// the MenuManagerController crossReferenceMM.
	protected MenuManagerController crossReferenceMM;
	// the MenuManagerController preferenceMenuMM.
	protected MenuManagerController preferenceMenuMM;
	// the SeparatorController separatorWrapper$$6SPR.
	private SeparatorController separatorWrapper$$6SPR;
	// the ActionController saveNewPreferenceMenuACT.
	private ActionController saveNewPreferenceMenuACT;
	// the SeparatorController separatorWrapper$$7SPR.
	private SeparatorController separatorWrapper$$7SPR;
	// the ActionController editNewEntityActionACT.
	private ActionController editNewEntityActionACT;
	// the ActionController addEntityActionACT.
	private ActionController addEntityActionACT;
	// the ActionController editEntityActionACT.
	private ActionController editEntityActionACT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new QueryFormCM.
	 * 
	 * This constructor could be used by Column parameter. (see org.adichatz.jpa)
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public QueryFormCM(AdiContext parentContext, IContainerController parentController) {
		coreController = parentController;
	}

	/**
	 * Creates the include QueryFormCM.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param parent controller
	 *            The collection parentController
	 * @param id
	 *            The include id
	 * @param parentContext
	 *            The parent context
	 */
	public QueryFormCM(ParamMap paramMap, IContainerController parentController, String id, AdiContext parentContext) {
		super(paramMap, parentController, id, parentContext);
		coreController = parentController;
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for MenuManagerController headerMenuHMM
		headerMenuHMM = new MenuManagerController("headerMenu", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					((ATabularController<?>) getMenuContainer()).setHeaderMenu(getControl().getMenu());
				}
			}
			@Override
			public void startLifeCycle() {
				super.startLifeCycle();
					// Creates control for HideColumnActionController hideColumnActionACT
					hideColumnActionACT = new HideColumnActionController("hideColumnAction", headerMenuHMM, QueryFormCM.this);
					// Creates control for ShowColumnMenuManagerController showColumnsMM
					showColumnsMM = new ShowColumnMenuManagerController("showColumns", headerMenuHMM, QueryFormCM.this);
					// Creates control for RefreshColumnSizeActionController refreshColumnSizeACT
					refreshColumnSizeACT = new RefreshColumnSizeActionController("refreshColumnSize", headerMenuHMM, QueryFormCM.this);
					// Creates control for SeparatorController separatorWrapper$$1SPR
					separatorWrapper$$1SPR = new SeparatorController("separatorWrapper$$1", headerMenuHMM, QueryFormCM.this);
					// Creates control for AddColumnFilterActionController addColumnFilterActionACT
					addColumnFilterActionACT = new AddColumnFilterActionController("addColumnFilterAction", headerMenuHMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return isColumnFilterable();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
					};
					// Creates control for RemoveColumnFilterActionController removeColumnFilterActionACT
					removeColumnFilterActionACT = new RemoveColumnFilterActionController("RemoveColumnFilterAction", headerMenuHMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return hasFilterOnColumn();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
					};
			}
		};
		// Creates control for MenuManagerController contextMenuMM
		contextMenuMM = new MenuManagerController("contextMenu", coreController, this) {
			@Override
			public void startLifeCycle() {
				super.startLifeCycle();
					// Creates control for ActionController launchQueryActionACT
					launchQueryActionACT = new ActionController("launchQueryAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							getParamMap().put("TABULAR_CONTROLLER", ((MenuManagerController) getFromRegister("contextMenu")).getMenuContainer());
							super.initialize();
							BooleanSupplier evaluatorENABLED;
							evaluatorENABLED = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return !org.adichatz.engine.e4.part.OutlinePart.getInstance().getCurrentPage().hasError();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new LaunchQueryAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for SeparatorController separatorWrapper$$2SPR
					separatorWrapper$$2SPR = new SeparatorController("separatorWrapper$$2", contextMenuMM, QueryFormCM.this);
					// Creates control for FilterByValueActionController filterByValueActionACT
					filterByValueActionACT = new FilterByValueActionController("filterByValueAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return isFilterable();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
					};
					// Creates control for DisableAllFiltersActionController disableAllFiltersActionACT
					disableAllFiltersActionACT = new DisableAllFiltersActionController("disableAllFiltersAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return hasEnabledFilter();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
					};
					// Creates control for EnableAllFiltersActionController enableAllFiltersActionACT
					enableAllFiltersActionACT = new EnableAllFiltersActionController("enableAllFiltersAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return hasDisabledFilter();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
					};
					// Creates control for RemoveAllFiltersActionController removeAllFiltersActionACT
					removeAllFiltersActionACT = new RemoveAllFiltersActionController("removeAllFiltersAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return hasFilter();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
					};
					// Creates control for SeparatorController separatorWrapper$$3SPR
					separatorWrapper$$3SPR = new SeparatorController("separatorWrapper$$3", contextMenuMM, QueryFormCM.this);
					// Creates control for ActionController copyTableToClipboardActionACT
					copyTableToClipboardActionACT = new ActionController("copyTableToClipboardAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							getParamMap().put("TABULAR_CONTROLLER", ((MenuManagerController) getFromRegister("contextMenu")).getMenuContainer());
							super.initialize();
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new CopyTableToClipboardAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for SeparatorController separatorWrapper$$4SPR
					separatorWrapper$$4SPR = new SeparatorController("separatorWrapper$$4", contextMenuMM, QueryFormCM.this);
					// Creates control for MenuManagerController crossReferenceMM
					crossReferenceMM = new MenuManagerController("crossReference", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return hasReferenceCode();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
							super.initialize();
						}
						@Override
						public void createControl() {
							if (isValid()) {
								setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_CROSS_REFERENCE"));
								setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.crossReferences"));
							}
							super.createControl();
						}
						@Override
						public void startLifeCycle() {
							super.startLifeCycle();
								new CrossReferenceMenuActions(crossReferenceMM);
						}
					};
					// Creates control for MenuManagerController preferenceMenuMM
					preferenceMenuMM = new MenuManagerController("preferenceMenu", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return !getPreferenceTitle().isEmpty();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
							super.initialize();
						}
						@Override
						public void createControl() {
							if (isValid()) {
								setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_PREFERENCE"));
								setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preferences"));
							}
							super.createControl();
						}
						@Override
						public void startLifeCycle() {
							super.startLifeCycle();
								Action action;
								action = new Action(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preference.save.as"),AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.jpa", "IMG_PREFERENCE_NEW.png")) {
									public void run() {
										getQueryToolInput().savePreferenceAs();
									}
								};
								preferenceMenuMM.getControl().add(action);
								action = new Action(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preference.save.current", getPreferenceTitle()),AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.jpa", "IMG_PREFERENCE_SAVE.png")) {
									public void run() {
										getQueryToolInput().saveCurrentPreference();
									}
								};
								preferenceMenuMM.getControl().add(action);
								// Creates control for SeparatorController separatorWrapper$$6SPR
								separatorWrapper$$6SPR = new SeparatorController("separatorWrapper$$6", preferenceMenuMM, QueryFormCM.this);
								if (getQueryToolInput().isCurrentPreferenceLinked()) {
									action = new Action(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preference.reset"),AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.jpa", "IMG_REMOVE_PREFERENCE.png")) {
										public void run() {
											getQueryToolInput().cancelPreference();
										}
									};
									preferenceMenuMM.getControl().add(action);
								}
								if (!getQueryToolInput().isCurrentPreferenceLinked()) {
									action = new Action(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preference.link.current"),AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.jpa", "IMG_LINK_PREFERENCE.png")) {
										public void run() {
											getQueryToolInput().linkCurrentPreference();
										}
									};
									preferenceMenuMM.getControl().add(action);
								}
						}
					};
					// Creates control for ActionController saveNewPreferenceMenuACT
					saveNewPreferenceMenuACT = new ActionController("saveNewPreferenceMenu", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return getPreferenceTitle().isEmpty();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										getQueryToolInput().savePreferenceAs();
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.jpa", "IMG_PREFERENCE_NEW.png"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preference.save.as"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.jpa", "IMG_PREFERENCE_NEW.png"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.preference.save.as"));
							}
						}
					};
					// Creates control for SeparatorController separatorWrapper$$7SPR
					separatorWrapper$$7SPR = new SeparatorController("separatorWrapper$$7", contextMenuMM, QueryFormCM.this);
					// Creates control for ActionController editNewEntityActionACT
					editNewEntityActionACT = new ActionController("editNewEntityAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							getParamMap().put("TABULAR_CONTROLLER", ((MenuManagerController) getFromRegister("contextMenu")).getMenuContainer());
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return !hasParentEntity();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new EditNewEntityAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for ActionController addEntityActionACT
					addEntityActionACT = new ActionController("addEntityAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							getParamMap().put("TABULAR_CONTROLLER", ((MenuManagerController) getFromRegister("contextMenu")).getMenuContainer());
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return hasParentEntity() &&  genCode.checkPrivilege(IEntityConstants.PERSIST);
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new AddEntityAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for ActionController editEntityActionACT
					editEntityActionACT = new ActionController("editEntityAction", contextMenuMM, QueryFormCM.this) {
						@Override
						public void initialize() {
							getParamMap().put("TABULAR_CONTROLLER", ((MenuManagerController) getFromRegister("contextMenu")).getMenuContainer());
							super.initialize();
							BooleanSupplier evaluatorENABLED;
							evaluatorENABLED = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != ((ASetController) getMenuContainer()).getSelectedObject();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new EditEntityAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
			}
		};
	}
	
	//* *****************
	//* Additional code *
	//*******************
	private QueryToolInput getQueryToolInput() {
	    return ((IQueryOutlinePage) ((PartCore) getContext().getRootCore()).getOutlinePage()).getQueryToolInput();
	}
}