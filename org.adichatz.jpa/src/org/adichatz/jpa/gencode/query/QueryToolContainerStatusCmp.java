/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Fri Feb 21 14:35:33 CET 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import java.util.List;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.CompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.validation.EntityInjection;
import org.adichatz.jpa.query.QueryToolInput;
import org.eclipse.jface.viewers.LabelProvider;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainerStatusCmp extends EntityManagerCore {
	// the LabelController statusBarKey$1LBL.
	private LabelController statusBarKey$1LBL;
	// the RadioGroupController statusBarKeyRG.
	private RadioGroupController statusBarKeyRG;
	// the LabelController tableRendererKey$1LBL.
	private LabelController tableRendererKey$1LBL;
	// the RadioGroupController tableRendererKeyRG.
	private RadioGroupController tableRendererKeyRG;
	/**
	 * Creates QueryToolContainerStatusCmp.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public QueryToolContainerStatusCmp(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new CompositeController("statusCmp", parentController, this) {
				@Override
				public void afterInstantiateController() {
					breakInjection = true;
					super.afterInstantiateController();
				}
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getComposite().setLayout(new MigLayout("wrap 2","[right]15[grow,fill]",null));
					}
				}
				@Override
				public EntityInjection getEntityInjection() {
					if (null == entityInjection)
						entityInjection = new EntityInjection(this, getDataAccess().getDataCache().fetchEntity(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getControllerPreference()));
					return entityInjection;
				}
			};
			createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for LabelController statusBarKey$1LBL
		statusBarKey$1LBL = new LabelController("statusBarKey$1", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.statusBarKey"));
				}
			}
		};
		createStatusBarKey(this);
		// Creates control for LabelController tableRendererKey$1LBL
		tableRendererKey$1LBL = new LabelController("tableRendererKey$1", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "table.tableRendererKey"));
				}
			}
		};
		createTableRendererKey(this);
	}
	public RadioGroupController createStatusBarKey(ControllerCore genCode) {
		// Creates control for RadioGroupController statusBarKeyRG
		statusBarKeyRG = new RadioGroupController("statusBarKey", getParentController(coreController), genCode) {
			@Override
			public void initialize() {
				setLinkedController(statusBarKey$1LBL);
				setProperty("statusBarKey");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((org.adichatz.engine.xjc.TableComponentType) element).getText();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 1",null,null));
					dataReferenceManager = new DataReferenceManager(this);
				}
			}
			@Override
			public List getValues() {
				return org.adichatz.engine.tabular.TabularUtil.getInstance().getStatusBars();
			}
			@Override
			public Object convertModelToTarget(Object value) {
				return  org.adichatz.engine.tabular.TabularUtil.getInstance().getTableComponentMap().get(value);
			}
			@Override
			public Object convertTargetToModel(Object value) {
				return  null == value ? null : ((org.adichatz.engine.xjc.TableComponentType) value).getId();
			}
		};
		return statusBarKeyRG;
	}
	public RadioGroupController createTableRendererKey(ControllerCore genCode) {
		// Creates control for RadioGroupController tableRendererKeyRG
		tableRendererKeyRG = new RadioGroupController("tableRendererKey", getParentController(coreController), genCode) {
			@Override
			public void initialize() {
				setLinkedController(tableRendererKey$1LBL);
				setProperty("tableRendererKey");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((org.adichatz.engine.xjc.TableComponentType) element).getText();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 1",null,null));
					dataReferenceManager = new DataReferenceManager(this);
				}
			}
			@Override
			public List getValues() {
				return org.adichatz.engine.tabular.TabularUtil.getInstance().getTabularRenderers(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getTabularController(), false);
			}
			@Override
			public Object convertModelToTarget(Object value) {
				return  org.adichatz.engine.tabular.TabularUtil.getInstance().getTableRenderer(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getTabularController(), (String) value);
			}
			@Override
			public Object convertTargetToModel(Object value) {
				return  ((org.adichatz.engine.xjc.TableComponentType) value).getId();
			}
		};
		return tableRendererKeyRG;
	}
}