/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Fri Feb 21 14:35:32 CET 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ManagedToolBarController;
import org.adichatz.engine.controller.field.EditableFormTextController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.nebula.PShelfController;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.listener.AControlListener;
import org.adichatz.engine.listener.AdiEvent;
import org.adichatz.engine.listener.IEventType;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.tabular.TabularUtil;
import org.adichatz.jpa.query.QueryToolInput;
import org.adichatz.jpa.query.action.LaunchManagedQueryAction;
import org.adichatz.jpa.query.action.RefreshQueryAction;
import org.eclipse.nebula.widgets.pshelf.PShelfItem;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainer extends AContainerCore {
	// the ManagedToolBarController managedToolBarWrapper$$0TB.
	protected ManagedToolBarController managedToolBarWrapper$$0TB;
	// the ActionController refreshQueryActionACT.
	private ActionController refreshQueryActionACT;
	// the ActionController launchManagedQueryActionACT.
	private ActionController launchManagedQueryActionACT;
	// the PShelfController customizationFolderPS.
	protected PShelfController customizationFolderPS;
	protected ControllerCore queryToolContainerPaginationItem;
	protected ControllerCore queryToolContainerColumnParameterItem;
	protected ControllerCore queryToolContainerOpenClauseItem;
	protected ControllerCore queryToolContainerFilterItem;
	protected ControllerCore queryToolContainerCrossReferences;
	protected ControllerCore queryToolContainerPreferenceItem;
	protected ControllerCore queryToolContainerJpqlItem;
	/**
	 * Instantiates a new QueryToolContainer.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public QueryToolContainer(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part QueryToolContainer.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public QueryToolContainer(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("queryTool", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ManagedToolBarController managedToolBarWrapper$$0TB
		managedToolBarWrapper$$0TB = new ManagedToolBarController("managedToolBarWrapper$$0", coreController, this);
		// Creates control for ActionController refreshQueryActionACT
		refreshQueryActionACT = new ActionController("refreshQueryAction", managedToolBarWrapper$$0TB, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action = new RefreshQueryAction();
					action.setActionController(this);
				}
				super.createControl();
			}
		};
		// Creates control for ActionController launchManagedQueryActionACT
		launchManagedQueryActionACT = new ActionController("launchManagedQueryAction", managedToolBarWrapper$$0TB, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action = new LaunchManagedQueryAction();
					action.setActionController(this);
				}
				super.createControl();
			}
		};
		// Creates control for PShelfController customizationFolderPS
		customizationFolderPS = new PShelfController("customizationFolder", coreController, this) {
			@Override
			public void initialize() {
				AControlListener customizationFolderLSTN$0 = new AControlListener(null, IEventType.BEFORE_END_LIFE_CYCLE) {
					@Override
					public void handleEvent(AdiEvent event) {
						if (null == ((RadioGroupController) getFromRegister("statusBarKey")).getValue())
						    ((RadioGroupController) getFromRegister("statusBarKey")).setValue(TabularUtil.getInstance().getStatusBar(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getControllerPreference().getStatusBarKey()));
					}
				};
				addListener(customizationFolderLSTN$0);
				super.initialize();
			}
			@Override
			public void synchronize() {
				super.synchronize();
				if (isValid()) {
					SelectionAdapter customizationFolderLSTN$1 = new SelectionAdapter() {
						@Override
						public void widgetSelected(SelectionEvent event) {
							if (((PShelfItem) event.item).getText().equals("J P Q L"))
							    ((EditableFormTextController) getFromRegister("jpqlOrder")).getControl().setText(((QueryToolInput) getEntity().getBean()).getQueryFormText());
											
						}
					};
					getControl().addSelectionListener(customizationFolderLSTN$1);
					setSelection(0);
				}
			}
		};
		
		// loads and instantiates the class QueryToolContainerPaginationItem.
		queryToolContainerPaginationItem  = new QueryToolContainerPaginationItem(context, customizationFolderPS);
		
		// loads and instantiates the class QueryToolContainerColumnParameterItem.
		queryToolContainerColumnParameterItem  = new QueryToolContainerColumnParameterItem(context, customizationFolderPS);
		
		// loads and instantiates the class QueryToolContainerOpenClauseItem.
		queryToolContainerOpenClauseItem  = new QueryToolContainerOpenClauseItem(context, customizationFolderPS);
		
		// loads and instantiates the class QueryToolContainerFilterItem.
		queryToolContainerFilterItem  = new QueryToolContainerFilterItem(context, customizationFolderPS);
		
		// loads and instantiates the class QueryToolContainerCrossReferences.
		queryToolContainerCrossReferences  = new QueryToolContainerCrossReferences(context, customizationFolderPS);
		
		// loads and instantiates the class QueryToolContainerPreferenceItem.
		queryToolContainerPreferenceItem  = new QueryToolContainerPreferenceItem(context, customizationFolderPS);
		
		// loads and instantiates the class QueryToolContainerJpqlItem.
		queryToolContainerJpqlItem  = new QueryToolContainerJpqlItem(context, customizationFolderPS);
	}
}