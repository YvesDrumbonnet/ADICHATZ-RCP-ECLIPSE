/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Fri Feb 21 14:35:33 CET 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.field.TableColumnController;
import org.adichatz.engine.core.ATabularCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.extra.ColumnViewerSorter;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.tabular.ATabularContentProvider;
import org.adichatz.engine.viewer.NativeContentProvider;
import org.adichatz.jpa.query.custom.ColumnParameterTableController;
import org.adichatz.jpa.wrapper.QueryParameterWrapper;
import org.eclipse.swt.graphics.Image;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainerParameterTable extends ATabularCore<QueryParameterWrapper> {
	// the TableColumnController validTCTC.
	private TableColumnController validTCTC;
	// the TableColumnController promptTCTC.
	private TableColumnController promptTCTC;
	// the TableColumnController propertyTCTC.
	private TableColumnController propertyTCTC;
	// the TableColumnController operatorTCTC.
	private TableColumnController operatorTCTC;
	// the TableColumnController expressionTCTC.
	private TableColumnController expressionTCTC;
	// the TableColumnController secondExpressionTCTC.
	private TableColumnController secondExpressionTCTC;
	public QueryToolContainerParameterTable(final AdiContext context, IContainerController parentController) {
		super(context);
		tabularController = new ColumnParameterTableController<QueryParameterWrapper>("parameterTable", parentController, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					beanClass = QueryParameterWrapper.class;
				}
				super.createControl();
				if (isValid()) {
					ATabularContentProvider contentProvider$1 = new NativeContentProvider("parameter");
					contentProvider$1.setTabularController(tabularController);
					getControl().setLayoutData("height 200:200:n, w 200:200:n");
				}
			}
		};
		tabularController.setPluginResources(AdichatzApplication.getPluginResources("org.adichatz.jpa"));
		coreController = tabularController;
		
		// Creates control for TableColumnController validTCTC
		validTCTC = new TableColumnController<QueryParameterWrapper>("validTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "parameter", "valid"));
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public Image getColumnImage(QueryParameterWrapper row) {
				return row.getValidImage();
			}
			@Override
			public Object getValue(QueryParameterWrapper row) {
				return null;
			}
			@Override
			public String getColumnText(QueryParameterWrapper row) {
				return "";
			}
		};
		// Creates control for TableColumnController promptTCTC
		promptTCTC = new TableColumnController<QueryParameterWrapper>("promptTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "parameter", "prompt"));
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public String getValue(QueryParameterWrapper row) {
				return row.getPrompt();
			}
			@Override
			public String getColumnText(QueryParameterWrapper row) {
				return row.getPrompt();
			}
		};
		// Creates control for TableColumnController propertyTCTC
		propertyTCTC = new TableColumnController<QueryParameterWrapper>("propertyTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "parameter", "property"));
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public String getValue(QueryParameterWrapper row) {
				return getColumnText(row);
			}
			@Override
			public String getColumnText(QueryParameterWrapper row) {
				return row.getSuffix() + "." + row.getProperty();
			}
		};
		// Creates control for TableColumnController operatorTCTC
		operatorTCTC = new TableColumnController<QueryParameterWrapper>("operatorTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "parameter", "operator"));
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public String getValue(QueryParameterWrapper row) {
				return row.getOperator();
			}
			@Override
			public String getColumnText(QueryParameterWrapper row) {
				return row.getOperator();
			}
		};
		// Creates control for TableColumnController expressionTCTC
		expressionTCTC = new TableColumnController<QueryParameterWrapper>("expressionTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText("expression");
				}
			}
			@Override
			public String getValue(QueryParameterWrapper row) {
				return getColumnText(row);
			}
			@Override
			public String getColumnText(QueryParameterWrapper row) {
				return row.getColumnText();
			}
		};
		// Creates control for TableColumnController secondExpressionTCTC
		secondExpressionTCTC = new TableColumnController<QueryParameterWrapper>("secondExpressionTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText("secondExpression");
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public String getValue(QueryParameterWrapper row) {
				return getColumnText(row);
			}
			@Override
			public String getColumnText(QueryParameterWrapper row) {
				return row.getSecondColumnText();
			}
		};
	}
	
	@Override
	public Object getId(Object element) {
		return null;
	}
}