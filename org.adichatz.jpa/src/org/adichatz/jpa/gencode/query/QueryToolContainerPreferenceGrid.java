/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 18:46:55 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import org.adichatz.engine.action.AAction;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.action.SeparatorController;
import org.adichatz.engine.controller.collection.CompositeBagController;
import org.adichatz.engine.controller.collection.CompositeController;
import org.adichatz.engine.controller.collection.MenuManagerController;
import org.adichatz.engine.controller.nebula.GridColumnController;
import org.adichatz.engine.controller.nebula.GridController;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.ATabularCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.extra.ColumnViewerSorter;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.tabular.ATabularContentProvider;
import org.adichatz.engine.viewer.NativeContentProvider;
import org.adichatz.jpa.query.QueryToolInput;
import org.adichatz.jpa.query.action.CopyFileNameAction;
import org.adichatz.jpa.wrapper.RecentOpenEditorTreeWrapper;
import org.adichatz.jpa.wrapper.RecentPreferenceWrapper;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainerPreferenceGrid extends ATabularCore<RecentPreferenceWrapper> {
	// the MenuManagerController preferenceContextMenuMM.
	protected MenuManagerController preferenceContextMenuMM;
	// the ActionController choosePreferencePreferenceACT.
	private ActionController choosePreferencePreferenceACT;
	// the SeparatorController separatorWrapper$$1SPR.
	private SeparatorController separatorWrapper$$1SPR;
	// the ActionController deletePreferenceACT.
	private ActionController deletePreferenceACT;
	// the SeparatorController separatorWrapper$$2SPR.
	private SeparatorController separatorWrapper$$2SPR;
	// the ActionController copyFileNameACT.
	private ActionController copyFileNameACT;
	// the SeparatorController separatorWrapper$$3SPR.
	private SeparatorController separatorWrapper$$3SPR;
	// the ActionController refreshPreferencesACT.
	private ActionController refreshPreferencesACT;
	// the GridColumnController titleTCGC.
	private GridColumnController titleTCGC;
	// the GridColumnController preferenceURITCGC.
	private GridColumnController preferenceURITCGC;
	@Inject
	protected AdiFormToolkit toolkit;
	public QueryToolContainerPreferenceGrid(final AdiContext context, IContainerController parentController) {
		super(context);
		tabularController = new GridController<RecentPreferenceWrapper>("preferenceGrid", parentController, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					beanClass = RecentPreferenceWrapper.class;
				}
				super.createControl();
				if (isValid()) {
					ATabularContentProvider contentProvider$1 = new NativeContentProvider("recentPreferences");
					contentProvider$1.setTabularController(tabularController);
					getControl().setRowHeaderVisible(true);
					getControl().setLayoutData("h 0:200:n, w 0:20:n");
					setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_BACKGROUND_GRADIENT));
				}
			}
			@Override
			public void synchronize() {
				super.synchronize();
				if (isValid()) {
					ISelectionChangedListener preferenceGridLSTN$0 = new ISelectionChangedListener() {
						@Override
						public void selectionChanged(SelectionChangedEvent event) {
							RecentPreferenceWrapper recentPreference = getSelectedObject();
							if (null != recentPreference) {
							    if (recentPreference.check(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getContentProvider().getQueryURI()))
							        ((GridController) getFromRegister("preferenceGrid")).refresh();
							}
							((CompositeBagController) getFromRegister("preferenceCompositeBag")).showChildController(tabularController, ((CompositeController) getFromRegister("recentPreferenceDetail")));
						}
					};
					getViewer().addSelectionChangedListener(preferenceGridLSTN$0);
					IDoubleClickListener preferenceGridLSTN$1 = new IDoubleClickListener() {
						@Override
						public void doubleClick(DoubleClickEvent event) {
							((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).chooseRecentPreference(((RecentPreferenceWrapper) ((AWidgetController) getFromRegister("recentPreferenceDetail")).getEntity().getBean()));
						}
					};
					getViewer().addDoubleClickListener(preferenceGridLSTN$1);
				}
			}
			@Override
			public void endLifeCycle() {
				delegateAfterEndLifeCycleListener = true;
				super.endLifeCycle();
				if (isValid()) {
					refresh();
				}
			}
		};
		tabularController.setPluginResources(AdichatzApplication.getPluginResources("org.adichatz.jpa"));
		coreController = tabularController;
		
		// Add context menu
		// Creates control for MenuManagerController preferenceContextMenuMM
		preferenceContextMenuMM = new MenuManagerController("preferenceContextMenu", tabularController, this) {
			@Override
			public void startLifeCycle() {
				super.startLifeCycle();
					// Creates control for ActionController choosePreferencePreferenceACT
					choosePreferencePreferenceACT = new ActionController("choosePreferencePreference", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorENABLED;
							evaluatorENABLED = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != tabularController.getSelectedObject() && !((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).isActivePreference(tabularController.getSelectedObject());
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).chooseRecentPreference(((RecentPreferenceWrapper) ((AWidgetController) getFromRegister("recentPreferenceDetail")).getEntity().getBean()));
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_ACCEPT"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.choosePreference"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_ACCEPT"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.choosePreference"));
							}
						}
					};
					// Creates control for SeparatorController separatorWrapper$$1SPR
					separatorWrapper$$1SPR = new SeparatorController("separatorWrapper$$1", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this);
					// Creates control for ActionController deletePreferenceACT
					deletePreferenceACT = new ActionController("deletePreference", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorENABLED;
							evaluatorENABLED = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != tabularController.getSelectedObject() && !((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).isActivePreference(tabularController.getSelectedObject());
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										RecentOpenEditorTreeWrapper.getInstance().removeRecentPreference(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getContentProvider().getQueryURI(), ((RecentPreferenceWrapper) ((AWidgetController) getFromRegister("recentPreferenceDetail")).getEntity().getBean()));
										((GridController) getFromRegister("preferenceGrid")).refresh();
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_DELETE"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.deletePreference"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_DELETE"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.deletePreference"));
							}
						}
					};
					// Creates control for SeparatorController separatorWrapper$$2SPR
					separatorWrapper$$2SPR = new SeparatorController("separatorWrapper$$2", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this);
					// Creates control for ActionController copyFileNameACT
					copyFileNameACT = new ActionController("copyFileName", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorENABLED;
							evaluatorENABLED = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != tabularController.getSelectedObject() && null != tabularController.getSelectedObject().getPreferenceFile();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new CopyFileNameAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for SeparatorController separatorWrapper$$3SPR
					separatorWrapper$$3SPR = new SeparatorController("separatorWrapper$$3", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this);
					// Creates control for ActionController refreshPreferencesACT
					refreshPreferencesACT = new ActionController("refreshPreferences", preferenceContextMenuMM, QueryToolContainerPreferenceGrid.this) {
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										((GridController) getFromRegister("preferenceGrid")).refresh();
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_REFRESH"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.refreshPreferences"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_REFRESH"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.refreshPreferences"));
							}
						}
					};
			}
		};
		
		// Creates control for GridColumnController titleTCGC
		titleTCGC = new GridColumnController<RecentPreferenceWrapper>("titleTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public Image getColumnImage(RecentPreferenceWrapper row) {
				return ((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getImage(row);
			}
			@Override
			public String getValue(RecentPreferenceWrapper row) {
				return getColumnText(row);
			}
			@Override
			public String getColumnText(RecentPreferenceWrapper row) {
				return row.getPreferenceTree().getTitle();
			}
			@Override
			public Font getColumnFont(RecentPreferenceWrapper row) {
				return ((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).isActivePreference(row) ? tabularController.getBoldFont() : super.getColumnFont(row);
			}
		};
		// Creates control for GridColumnController preferenceURITCGC
		preferenceURITCGC = new GridColumnController<RecentPreferenceWrapper>("preferenceURITC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "recentPreference", "preferenceURI"));
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public String getValue(RecentPreferenceWrapper row) {
				return row.getPreferenceURI();
			}
			@Override
			public String getColumnText(RecentPreferenceWrapper row) {
				return row.getPreferenceURI();
			}
			@Override
			public Font getColumnFont(RecentPreferenceWrapper row) {
				return ((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).isActivePreference(row) ? tabularController.getBoldFont() : super.getColumnFont(row);
			}
		};
	}
	
	@Override
	public Object getId(Object element) {
		return null;
	}
}