/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 18:46:54 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import java.util.List;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.EngineConstants;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ArgTabFolderController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.nebula.PGroupController;
import org.adichatz.engine.core.ATabularCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.jpa.extra.JPAUtil;
import org.adichatz.jpa.query.action.DeleteOpenClauseItemController;
import org.adichatz.jpa.query.action.RefreshOpenClauseItemController;
import org.adichatz.jpa.query.action.ValidateOpenClauseItemController;
import org.adichatz.jpa.wrapper.QueryOpenClauseWrapper;
import org.adichatz.jpa.wrapper.QueryPreferenceWrapper;
import org.adichatz.jpa.xjc.QueryOpenClauseType;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import static org.adichatz.jpa.extra.JPAUtil.getFromJpaBundle;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainerOpenClauseFolder extends EntityManagerCore {
	// the PGroupController openParameterGroupPGRP.
	protected PGroupController openParameterGroupPGRP;
	// the TextController clauseTXT.
	private TextController clauseTXT;
	protected ATabularCore queryToolContainerOpenParameterTable;
	protected EntityManagerCore queryToolContainerOpenParameterCMP;
	// the RefreshOpenClauseItemController refreshOpenClauseItemPGTI.
	private RefreshOpenClauseItemController refreshOpenClauseItemPGTI;
	// the DeleteOpenClauseItemController deleteOpenClauseItemPGTI.
	private DeleteOpenClauseItemController deleteOpenClauseItemPGTI;
	// the ValidateOpenClauseItemController validateOpenClauseItemPGTI.
	private ValidateOpenClauseItemController validateOpenClauseItemPGTI;
	/**
	 * Creates QueryToolContainerOpenClauseFolder.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public QueryToolContainerOpenClauseFolder(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new ArgTabFolderController("openClauseFolder", parentController, this) {
				@Override
				public void createControl() {
					if (isValid()) {
						labelProvider = new LabelProvider() {
							public String getText(Object element) {
								if (EngineConstants.PARENT_BEAN_PARAM.equals(((QueryOpenClauseType) element).getTitle()))
								    return getFromJpaBundle("query.parent.child.relationship");
								return ((QueryOpenClauseType) element).getTitle();
							}
							public Image getImage(Object element) {
								QueryOpenClauseWrapper openClause = (QueryOpenClauseWrapper) ((QueryOpenClauseType) element);                   
								return openClause.getImage();
							}
						};
					}
					super.createControl();
					if (isValid()) {
						setLayout(new MigLayout("wrap 1, ins 0","[grow, fill]","[grow, fill]"));
					}
				}
				@Override
				public void synchronize() {
					super.synchronize();
					if (isValid()) {
						SelectionAdapter openClauseFolderLSTN$0 = new SelectionAdapter() {
							@Override
							public void widgetSelected(SelectionEvent event) {
								// Bypass a bug on PGroup or elsewhere!?
								// Use JPAUtil.getChildController because register points to the last CTabItemController and not the selected one
								PGroupController groupController = (PGroupController) JPAUtil.getChildController(getSelectedItemController(),0);
								groupController.getControl().redraw();
							}
						};
						getControl().addSelectionListener(openClauseFolderLSTN$0);
						getControl().setSelection(0);
						getControl().notifyListeners(SWT.Selection, null);
					}
				}
				@Override
				public List getValues() {
					return ((QueryPreferenceWrapper) ((AWidgetController) getFromRegister("openClauseItem")).getEntity().getBean()).getVisibleOpenClause();
				}
			};
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for PGroupController openParameterGroupPGRP
		openParameterGroupPGRP = new PGroupController("openParameterGroup", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","[grow, fill]","[grow, fill][grow, fill][]"));
				}
			}
		};
		createClause(this);
		
		// loads and instantiates the class QueryToolContainerOpenParameterTable.
		queryToolContainerOpenParameterTable  = new QueryToolContainerOpenParameterTable(context, openParameterGroupPGRP);
		
		// loads and instantiates the class QueryToolContainerOpenParameterCMP.
		queryToolContainerOpenParameterCMP  = new QueryToolContainerOpenParameterCMP(context, openParameterGroupPGRP);
		// Creates control for RefreshOpenClauseItemController refreshOpenClauseItemPGTI
		refreshOpenClauseItemPGTI = new RefreshOpenClauseItemController("refreshOpenClauseItem", openParameterGroupPGRP, this);
		// Creates control for DeleteOpenClauseItemController deleteOpenClauseItemPGTI
		deleteOpenClauseItemPGTI = new DeleteOpenClauseItemController("deleteOpenClauseItem", openParameterGroupPGRP, this);
		// Creates control for ValidateOpenClauseItemController validateOpenClauseItemPGTI
		validateOpenClauseItemPGTI = new ValidateOpenClauseItemController("validateOpenClauseItem", openParameterGroupPGRP, this);
	}
	public TextController createClause(ControllerCore genCode) {
		// Creates control for TextController clauseTXT
		clauseTXT = new TextController("clause", getParentController(openParameterGroupPGRP), genCode) {
			@Override
			public void initialize() {
				setProperty("clause");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.WRAP | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
				}
				super.createControl();
				if (isValid()) {
					getControl().setEditable(false);
					getControl().setLayoutData("h n:100:n");
				}
			}
		};
		return clauseTXT;
	}
}