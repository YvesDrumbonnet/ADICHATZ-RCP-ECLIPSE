/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 18:46:55 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.common.EngineTools;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.CompositeController;
import org.adichatz.engine.controller.collection.GroupController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.nebula.PGroupController;
import org.adichatz.engine.core.ATabularCore;
import org.adichatz.engine.core.ATreeCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.jpa.query.QueryToolInput;
import org.adichatz.jpa.wrapper.RecentPreferenceWrapper;
import org.eclipse.swt.SWT;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainerRecentPreferenceDetail extends EntityManagerCore {
	// the GroupController preferenceDetailGRP.
	protected GroupController preferenceDetailGRP;
	// the CompositeController titleCmpCMPS.
	protected CompositeController titleCmpCMPS;
	// the LabelController titleLabelLBL.
	private LabelController titleLabelLBL;
	// the TextController titleTXT.
	private TextController titleTXT;
	// the CompositeController preferencePaginationCmpCMPS.
	protected CompositeController preferencePaginationCmpCMPS;
	// the PGroupController paginationGroupPGRP.
	protected PGroupController paginationGroupPGRP;
	// the LabelController paginationLabelLBL.
	private LabelController paginationLabelLBL;
	// the TextController paginationTXT.
	private TextController paginationTXT;
	// the PGroupController preferenceParameterGroupPGRP.
	protected PGroupController preferenceParameterGroupPGRP;
	protected ATreeCore queryToolContainerParameterTree;
	// the PGroupController preferenceFilterGroupPGRP.
	protected PGroupController preferenceFilterGroupPGRP;
	protected ATabularCore queryToolContainerFilterPrefTable;
	// the PGroupController preferenceOrderByGroupPGRP.
	protected PGroupController preferenceOrderByGroupPGRP;
	// the LabelController orderByClauseLabelLBL.
	private LabelController orderByClauseLabelLBL;
	// the TextController orderByClauseTXT.
	private TextController orderByClauseTXT;
	// the PGroupController preferenceColumnOrderGroupPGRP.
	protected PGroupController preferenceColumnOrderGroupPGRP;
	// the LabelController columnOrderLabelLBL.
	private LabelController columnOrderLabelLBL;
	// the TextController columnOrderTXT.
	private TextController columnOrderTXT;
	// the PGroupController preferenceColumnPreferencesGroupPGRP.
	protected PGroupController preferenceColumnPreferencesGroupPGRP;
	protected ATabularCore queryToolContainerColumnPreferenceTable;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Creates QueryToolContainerRecentPreferenceDetail.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public QueryToolContainerRecentPreferenceDetail(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new CompositeController("recentPreferenceDetail", parentController, this) {
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getComposite().setLayout(new MigLayout("wrap 1","grow,fill","grow,fill"));
					}
				}
			};
			createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for GroupController preferenceDetailGRP
		preferenceDetailGRP = new GroupController("preferenceDetail", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.detail"));
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","grow,fill","[][grow,fill]"));
					setFont(EngineTools.getModifiedFont(getControl().getFont(), SWT.BOLD));
				}
			}
		};
		// Creates control for CompositeController titleCmpCMPS
		titleCmpCMPS = new CompositeController("titleCmp", preferenceDetailGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 2, ins 0","[fill,align right]15[fill,grow]",null));
				}
			}
		};
		// Creates control for LabelController titleLabelLBL
		titleLabelLBL = new LabelController("titleLabel", titleCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "preference.title"));
				}
			}
		};
		createTitle(this);
		// Creates control for CompositeController preferencePaginationCmpCMPS
		preferencePaginationCmpCMPS = new CompositeController("preferencePaginationCmp", preferenceDetailGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","fill,grow","grow,fill"));
				}
			}
		};
		// Creates control for PGroupController paginationGroupPGRP
		paginationGroupPGRP = new PGroupController("paginationGroup", preferencePaginationCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setToggleRenderer(null);
					getControl().setImage(AdichatzApplication.getInstance().getImage("org.adichatz.jpa", "IMG_PAGINATION.png"));
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "query.pagination"));
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2, ins 0","[][fill,grow]","grow,fill"));
				}
			}
		};
		// Creates control for LabelController paginationLabelLBL
		paginationLabelLBL = new LabelController("paginationLabel", paginationGroupPGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "preference.pagination"));
				}
			}
		};
		createPagination(this);
		// Creates control for PGroupController preferenceParameterGroupPGRP
		preferenceParameterGroupPGRP = new PGroupController("preferenceParameterGroup", preferencePaginationCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(AdichatzApplication.getInstance().getImage("org.adichatz.jpa", "IMG_ADDITIONAL_CLAUSES.png"));
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "query.additional.clauses"));
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","grow,fill","grow,fill"));
				}
			}
		};
		
		// loads and instantiates the class QueryToolContainerParameterTree.
		queryToolContainerParameterTree  = new QueryToolContainerParameterTree(context, preferenceParameterGroupPGRP);
		// Creates control for PGroupController preferenceFilterGroupPGRP
		preferenceFilterGroupPGRP = new PGroupController("preferenceFilterGroup", preferencePaginationCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(toolkit.getRegisteredImage("IMG_FILTER"));
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "viewerFilter", "filters"));
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","grow,fill","grow,fill"));
				}
			}
		};
		
		// loads and instantiates the class QueryToolContainerFilterPrefTable.
		queryToolContainerFilterPrefTable  = new QueryToolContainerFilterPrefTable(context, preferenceFilterGroupPGRP);
		// Creates control for PGroupController preferenceOrderByGroupPGRP
		preferenceOrderByGroupPGRP = new PGroupController("preferenceOrderByGroup", preferencePaginationCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(AdichatzApplication.getInstance().getImage("org.adichatz.jpa", "IMG_ORDER_BY.png"));
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "query.orderBy"));
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2, ins 0","[][fill,grow]","grow,fill"));
				}
			}
		};
		// Creates control for LabelController orderByClauseLabelLBL
		orderByClauseLabelLBL = new LabelController("orderByClauseLabel", preferenceOrderByGroupPGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "preference.orderByClause"));
				}
			}
		};
		createOrderByClause(this);
		// Creates control for PGroupController preferenceColumnOrderGroupPGRP
		preferenceColumnOrderGroupPGRP = new PGroupController("preferenceColumnOrderGroup", preferencePaginationCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(AdichatzApplication.getInstance().getImage("org.adichatz.jpa", "IMG_COLUMN_ORDER.png"));
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.columnOrder"));
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2, ins 0","[][fill,grow]","grow,fill"));
				}
			}
		};
		// Creates control for LabelController columnOrderLabelLBL
		columnOrderLabelLBL = new LabelController("columnOrderLabel", preferenceColumnOrderGroupPGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "preference.columns.order"));
				}
			}
		};
		createColumnOrder(this);
		// Creates control for PGroupController preferenceColumnPreferencesGroupPGRP
		preferenceColumnPreferencesGroupPGRP = new PGroupController("preferenceColumnPreferencesGroup", preferencePaginationCmpCMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(AdichatzApplication.getInstance().getImage("org.adichatz.jpa", "IMG_COLUMN_PREFERENCE.png"));
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.jpa", "adichatzJpa", "queryPreference.column.preference"));
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","fill,grow","grow,fill"));
				}
			}
		};
		
		// loads and instantiates the class QueryToolContainerColumnPreferenceTable.
		queryToolContainerColumnPreferenceTable  = new QueryToolContainerColumnPreferenceTable(context, preferenceColumnPreferencesGroupPGRP);
	}
	public TextController createTitle(ControllerCore genCode) {
		// Creates control for TextController titleTXT
		titleTXT = new TextController("title", getParentController(titleCmpCMPS), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setEditable(false);
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
			@Override
			public void synchronize() {
				if (isValid()) {
					setValue(getInitialValue());
				}
				super.synchronize();
			}
			private Object getInitialValue() {
				return ((RecentPreferenceWrapper) parentController.getEntity().getBean()).getPreferenceTree().getTitle();
			}
		};
		return titleTXT;
	}
	public TextController createPagination(ControllerCore genCode) {
		// Creates control for TextController paginationTXT
		paginationTXT = new TextController("pagination", getParentController(paginationGroupPGRP), genCode) {
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.WRAP | SWT.MULTI);
				}
				super.createControl();
				if (isValid()) {
					getControl().setEditable(false);
				}
			}
			@Override
			public void synchronize() {
				if (isValid()) {
					setValue(getInitialValue());
				}
				super.synchronize();
			}
			private Object getInitialValue() {
				return ((RecentPreferenceWrapper) parentController.getEntity().getBean()).getPaginationString(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getTabularController());
			}
		};
		return paginationTXT;
	}
	public TextController createOrderByClause(ControllerCore genCode) {
		// Creates control for TextController orderByClauseTXT
		orderByClauseTXT = new TextController("orderByClause", getParentController(preferenceOrderByGroupPGRP), genCode) {
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.WRAP | SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
				}
				super.createControl();
				if (isValid()) {
					getControl().setEditable(false);
				}
			}
			@Override
			public void synchronize() {
				if (isValid()) {
					setValue(getInitialValue());
				}
				super.synchronize();
			}
			private Object getInitialValue() {
				return ((RecentPreferenceWrapper) parentController.getEntity().getBean()).getOrderByClause();
			}
		};
		return orderByClauseTXT;
	}
	public TextController createColumnOrder(ControllerCore genCode) {
		// Creates control for TextController columnOrderTXT
		columnOrderTXT = new TextController("columnOrder", getParentController(preferenceColumnOrderGroupPGRP), genCode) {
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.WRAP | SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
				}
				super.createControl();
				if (isValid()) {
					getControl().setEditable(false);
				}
			}
			@Override
			public void synchronize() {
				if (isValid()) {
					setValue(getInitialValue());
				}
				super.synchronize();
			}
			private Object getInitialValue() {
				return ((RecentPreferenceWrapper) parentController.getEntity().getBean()).getColumnOrderString(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getTabularController());
			}
		};
		return columnOrderTXT;
	}
}