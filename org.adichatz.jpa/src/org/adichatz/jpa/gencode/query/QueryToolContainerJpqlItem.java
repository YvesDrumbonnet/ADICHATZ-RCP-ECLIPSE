/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 18:46:56 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.jpa.gencode.query;

import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.field.EditableFormTextController;
import org.adichatz.engine.controller.nebula.PShelfController;
import org.adichatz.engine.controller.nebula.PShelfItemController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.listener.AControlListener;
import org.adichatz.engine.listener.AdiEvent;
import org.adichatz.engine.listener.IEventType;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.EntityInjection;
import org.adichatz.jpa.query.QueryToolInput;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.jpa/query/QueryToolContainer")
public class QueryToolContainerJpqlItem extends EntityManagerCore {
	// the EditableFormTextController jpqlOrderEFT.
	private EditableFormTextController jpqlOrderEFT;
	protected EntityManagerCore queryToolContainerOrderByCMP;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Creates QueryToolContainerJpqlItem.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public QueryToolContainerJpqlItem(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new PShelfItemController("jpqlItem", parentController, this) {
				@Override
				public void afterInstantiateController() {
					breakInjection = true;
					super.afterInstantiateController();
				}
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getItem().setImage(AdichatzApplication.getInstance().getImage("org.adichatz.jpa", "IMG_JPQL.png"));
						getItem().setText("J P Q L");
						getComposite().setLayout(new MigLayout("ins 0, wrap 1","grow, fill","[grow, fill][]"));
					}
				}
				@Override
				public EntityInjection getEntityInjection() {
					if (null == entityInjection)
						entityInjection = new EntityInjection(this, getDataAccess().getDataCache().fetchEntity(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getQueryManager()));
					return entityInjection;
				}
			};
			if (!((PShelfController) parentController).isDelayed())
				createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		createJpqlOrder(this);
		
		// loads and instantiates the class QueryToolContainerOrderByCMP.
		queryToolContainerOrderByCMP  = new QueryToolContainerOrderByCMP(context, coreController);
	}
	public EditableFormTextController createJpqlOrder(ControllerCore genCode) {
		// Creates control for EditableFormTextController jpqlOrderEFT
		jpqlOrderEFT = new EditableFormTextController("jpqlOrder", getParentController(coreController), genCode) {
			@Override
			public void initialize() {
				AControlListener jpqlOrderLSTN$0 = new AControlListener("AFTER_CREATE_CONTROL", IEventType.AFTER_CREATE_CONTROL) {
					@Override
					public void handleEvent(AdiEvent event) {
						((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getTabularController().addListener(new AControlListener("#POST_REFRESH_TABULAR#", IEventType.AFTER_REFRESH) {
						    @Override
						    public void handleEvent(AdiEvent event) {
							    ((EditableFormTextController) getFromRegister("jpqlOrder")).getControl().setText(((QueryToolInput) ((AWidgetController) getFromRegister("queryTool")).getEntity().getBean()).getQueryFormText());
						   }
						});
					}
				};
				addListener(jpqlOrderLSTN$0);
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(AdiSWT.EXPANDABLE | SWT.BORDER);
				}
				super.createControl();
				if (isValid()) {
					getControl().getFormText().setWhitespaceNormalized(false);
					formText.addFont("suffix", JFaceResources.getFontRegistry().get(JFaceResources.HEADER_FONT));
					formText.addFont("normal", JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					formText.addColor("jpql", toolkit.getColors().getColor(IFormColors.TB_TOGGLE_HOVER));
					formText.addColor("suffix", toolkit.getColors().getColor(IFormColors.TB_TOGGLE));
					formText.addColor("name", toolkit.getColors().getColor(IFormColors.H_BOTTOM_KEYLINE2));
				}
			}
		};
		return jpqlOrderEFT;
	}
}