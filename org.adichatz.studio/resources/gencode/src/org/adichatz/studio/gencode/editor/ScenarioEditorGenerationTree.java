/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue May 12 15:04:26 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.core.ATreeCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.listener.AControlListener;
import org.adichatz.engine.listener.AdiEvent;
import org.adichatz.engine.listener.IEventType;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.studio.xjc.controller.GenerationTreeController;
import org.adichatz.studio.xjc.data.XjcBindingService;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.swt.SWT;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/ScenarioEditor")
public class ScenarioEditorGenerationTree extends ATreeCore {
	public ScenarioEditorGenerationTree(final AdiContext context, IContainerController parentController) {
		super(context);
		treeController = new GenerationTreeController("generationTree", parentController, this) {
			@Override
			public void initialize() {
				AControlListener generationTreeLSTN$0 = new AControlListener("afterCreateControlLsnr", IEventType.AFTER_CREATE_CONTROL) {
					@Override
					public void handleEvent(AdiEvent event) {
						addEditorMenu();
					}
				};
				addListener(generationTreeLSTN$0);
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI);
					levelToExpand = 1;
				}
				super.createControl();
				if (isValid()) {
					getControl().setHeaderVisible(false);
				}
			}
			@Override
			public void synchronize() {
				super.synchronize();
				if (isValid()) {
					ISelectionChangedListener generationTreeLSTN$1 = new ISelectionChangedListener() {
						@Override
						public void selectionChanged(SelectionChangedEvent event) {
							((XjcBindingService) getBindingService()).enableActions();
						}
					};
					getViewer().addPostSelectionChangedListener(generationTreeLSTN$1);
				}
			}
		};
		coreController = treeController;
		
	}
}