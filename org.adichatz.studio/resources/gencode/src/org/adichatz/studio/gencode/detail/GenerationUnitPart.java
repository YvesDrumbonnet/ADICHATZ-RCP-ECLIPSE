/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Mon Jul 06 18:34:22 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.Arrays;
import java.util.List;
import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.ComboController;
import org.adichatz.engine.controller.field.HyperlinkController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.xjc.GenerationEnum;
import org.adichatz.generator.xjc.GenerationUnitType;
import org.adichatz.generator.xjc.PluginEntityType;
import org.adichatz.studio.xjc.controller.AdiResourceUriTextController;
import org.adichatz.studio.xjc.controller.ClassTextController;
import org.adichatz.studio.xjc.controller.OutlineHyperlinkController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcEntity;
import org.adichatz.studio.xjc.editor.runnable.OpenClassEditorRunnable;
import org.adichatz.studio.xjc.editor.runnable.OpenResourceURIRunnable;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/GenerationUnitPart")
public class GenerationUnitPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the HyperlinkController scenarioClassNameHLHL.
	private HyperlinkController scenarioClassNameHLHL;
	// the ClassTextController scenarioClassNameTXT.
	private ClassTextController scenarioClassNameTXT;
	// the LabelController type$1LBL.
	private LabelController type$1LBL;
	// the ComboController typeCMB.
	private ComboController typeCMB;
	// the OutlineHyperlinkController adiResourceURIHLHL.
	private OutlineHyperlinkController adiResourceURIHLHL;
	// the AdiResourceUriTextController adiResourceURI4NavigatorTXT.
	private AdiResourceUriTextController adiResourceURI4NavigatorTXT;
	// the LabelController adiResourceURI$1LBL.
	private LabelController adiResourceURI$1LBL;
	// the AdiResourceUriTextController adiResourceURITXT.
	private AdiResourceUriTextController adiResourceURITXT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new GenerationUnitPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public GenerationUnitPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part GenerationUnitPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public GenerationUnitPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]",null));
				}
			}
		};
		createScenarioClassNameHL(this);
		createScenarioClassName(this);
		// Creates control for LabelController type$1LBL
		type$1LBL = new LabelController("type$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "type").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createType(this);
		createAdiResourceURIHL(this);
		createAdiResourceURI4Navigator(this);
		// Creates control for LabelController adiResourceURI$1LBL
		adiResourceURI$1LBL = new LabelController("adiResourceURI$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "adiResourceURI").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAdiResourceURI(this);
	}
	public HyperlinkController createScenarioClassNameHL(ControllerCore genCode) {
		// Creates control for HyperlinkController scenarioClassNameHLHL
		scenarioClassNameHLHL = new HyperlinkController("scenarioClassNameHL", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenClassEditorRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "scenarioClassName"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return scenarioClassNameHLHL;
	}
	public ClassTextController createScenarioClassName(ControllerCore genCode) {
		// Creates control for ClassTextController scenarioClassNameTXT
		scenarioClassNameTXT = new ClassTextController("scenarioClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(scenarioClassNameHLHL);
				setProperty("scenarioClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return scenarioClassNameTXT;
	}
	public ComboController createType(ControllerCore genCode) {
		// Creates control for ComboController typeCMB
		typeCMB = new ComboController("type", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(type$1LBL);
				setProperty("type");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.READ_ONLY);
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((GenerationEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					getControl().setLayoutData("grow 0");
					dataReferenceManager = new DataReferenceManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(GenerationEnum.class.getEnumConstants());
							
			}
		};
		return typeCMB;
	}
	public OutlineHyperlinkController createAdiResourceURIHL(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController adiResourceURIHLHL
		adiResourceURIHLHL = new OutlineHyperlinkController("adiResourceURIHL", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return GenerationEnum.NAVIGATOR == ((GenerationUnitType) parentController.getEntity().getBean()).getType();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GenerationUnitType) parentController.getEntity().getBean()).getAdiResourceURI();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "adiResourceURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURIHLHL;
	}
	public AdiResourceUriTextController createAdiResourceURI4Navigator(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController adiResourceURI4NavigatorTXT
		adiResourceURI4NavigatorTXT = new AdiResourceUriTextController("adiResourceURI4Navigator", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(adiResourceURIHLHL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return GenerationEnum.NAVIGATOR == ((GenerationUnitType) parentController.getEntity().getBean()).getType();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("adiResourceURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURI4NavigatorTXT;
	}
	public AdiResourceUriTextController createAdiResourceURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController adiResourceURITXT
		adiResourceURITXT = new AdiResourceUriTextController("adiResourceURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(adiResourceURI$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isPluginEntityGU();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("adiResourceURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURITXT;
	}
	
	//* *****************
	//* Additional code *
	//*******************
	// Concern a generation unit linked to plugin entity"
	private boolean isPluginEntityGU() {
	    XjcEntity entity = ((XjcEntity) coreController.getEntity());
	    return entity.getTreeElement().getParentElement().getEntity().getBean() instanceof PluginEntityType;
	}
}