/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 08:03:26 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import javax.inject.Inject;
import org.adichatz.engine.action.AAction;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.common.EngineTools;
import org.adichatz.engine.controller.AWidgetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.action.SeparatorController;
import org.adichatz.engine.controller.collection.MenuManagerController;
import org.adichatz.engine.controller.nebula.GridColumnController;
import org.adichatz.engine.core.ATabularCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.extra.ColumnViewerSorter;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.tabular.ATabularContentProvider;
import org.adichatz.engine.viewer.NativeContentProvider;
import org.adichatz.generator.xjc.CustomizedScenarioType;
import org.adichatz.generator.xjc.CustomizedScenariosType;
import org.adichatz.studio.xjc.controller.CustomFileTextController;
import org.adichatz.studio.xjc.controller.CustomGridController;
import org.adichatz.studio.xjc.data.XjcBindingService;
import org.adichatz.studio.xjc.editor.ExternalResourcesFormEditor;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/ScenarioEditor")
public class ScenarioEditorCustomsGrid extends ATabularCore<CustomizedScenarioType> {
	// the MenuManagerController contextMenuMM.
	protected MenuManagerController contextMenuMM;
	// the ActionController openFileACT.
	private ActionController openFileACT;
	// the ActionController copyFileNameACT.
	private ActionController copyFileNameACT;
	// the SeparatorController separatorWrapper$$7SPR.
	private SeparatorController separatorWrapper$$7SPR;
	// the ActionController reloadCustomScenarioACT.
	private ActionController reloadCustomScenarioACT;
	// the SeparatorController separatorWrapper$$8SPR.
	private SeparatorController separatorWrapper$$8SPR;
	// the ActionController deleteCustomScenarioACT.
	private ActionController deleteCustomScenarioACT;
	// the GridColumnController mergeDateTCGC.
	private GridColumnController mergeDateTCGC;
	// the GridColumnController scenarioFileTCGC.
	private GridColumnController scenarioFileTCGC;
	@Inject
	protected AdiFormToolkit toolkit;
	public ScenarioEditorCustomsGrid(final AdiContext context, IContainerController parentController) {
		super(context);
		tabularController = new CustomGridController<CustomizedScenarioType>("customsGrid", parentController, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					beanClass = CustomizedScenarioType.class;
				}
				super.createControl();
				if (isValid()) {
					ATabularContentProvider contentProvider$1 = new NativeContentProvider("customizedScenario");
					contentProvider$1.setTabularController(tabularController);
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
				}
			}
			@Override
			public void synchronize() {
				super.synchronize();
				if (isValid()) {
					ISelectionChangedListener customsGridLSTN$0 = new ISelectionChangedListener() {
						@Override
						public void selectionChanged(SelectionChangedEvent event) {
							selectOutlinePage();
						}
					};
					getViewer().addSelectionChangedListener(customsGridLSTN$0);
				}
			}
		};
		tabularController.setPluginResources(AdichatzApplication.getPluginResources("org.adichatz.studio"));
		coreController = tabularController;
		
		// Add context menu
		// Creates control for MenuManagerController contextMenuMM
		contextMenuMM = new MenuManagerController("contextMenu", tabularController, this) {
			@Override
			public void startLifeCycle() {
				super.startLifeCycle();
					// Creates control for ActionController openFileACT
					openFileACT = new ActionController("openFile", contextMenuMM, ScenarioEditorCustomsGrid.this) {
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										ExternalResourcesFormEditor.openExternalFile(tabularController.getSelectedObject().getScenarioFile());
												
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_OPEN_FILE"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.openFile"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_OPEN_FILE"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.openFile"));
							}
						}
					};
					// Creates control for ActionController copyFileNameACT
					copyFileNameACT = new ActionController("copyFileName", contextMenuMM, ScenarioEditorCustomsGrid.this) {
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										EngineTools.copyToBuffer(tabularController.getSelectedObject().getScenarioFile());
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_COPY"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.copyFileName"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_COPY"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.copyFileName"));
							}
						}
					};
					// Creates control for SeparatorController separatorWrapper$$7SPR
					separatorWrapper$$7SPR = new SeparatorController("separatorWrapper$$7", contextMenuMM, ScenarioEditorCustomsGrid.this);
					// Creates control for ActionController reloadCustomScenarioACT
					reloadCustomScenarioACT = new ActionController("reloadCustomScenario", contextMenuMM, ScenarioEditorCustomsGrid.this) {
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										((CustomFileTextController) getFromRegister("scenarioFileName")).setValue(tabularController.getSelectedObject().getScenarioFile());
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_REFRESH"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.reloadCustom"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_REFRESH"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.reloadCustom"));
							}
						}
					};
					// Creates control for SeparatorController separatorWrapper$$8SPR
					separatorWrapper$$8SPR = new SeparatorController("separatorWrapper$$8", contextMenuMM, ScenarioEditorCustomsGrid.this);
					// Creates control for ActionController deleteCustomScenarioACT
					deleteCustomScenarioACT = new ActionController("deleteCustomScenario", contextMenuMM, ScenarioEditorCustomsGrid.this) {
						@Override
						public void createControl() {
							if (isValid()) {
								action =  new AAction() {
									@Override
									public void runAction() {
										((CustomizedScenariosType) ((AWidgetController) getFromRegister("customScenarioComposite")).getEntity().getBean()).getCustomizedScenario().remove(tabularController.getSelectedObject());
										((XjcBindingService) getBindingService()).getEditor().getScenarioResources().marshalScenarioFile();
										((XjcBindingService) getBindingService()).getEditor().doSave();
									}
									@Override
									public void init() {
										super.init();
										setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_DELETE"));
										setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.deleteCustom"));
									}
								};
								action.setActionController(this);
							}
							super.createControl();
							if (isValid()) {
								getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_DELETE"));
								getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.deleteCustom"));
							}
						}
					};
			}
		};
		
		// Creates control for GridColumnController mergeDateTCGC
		mergeDateTCGC = new GridColumnController<CustomizedScenarioType>("mergeDateTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "customizedScenario", "mergeDate"));
				}
			}
			@Override
			public Object getValue(CustomizedScenarioType row) {
				return row.getMergeDate();
			}
			@Override
			public String getColumnText(CustomizedScenarioType row) {
				return  null == row.getMergeDate() ? null : String.valueOf(row.getMergeDate());
			}
		};
		// Creates control for GridColumnController scenarioFileTCGC
		scenarioFileTCGC = new GridColumnController<CustomizedScenarioType>("scenarioFileTC", tabularController) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getColumn().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "customizedScenario", "scenarioFile"));
					setColumnViewerSorter(ColumnViewerSorter.ASC);
				}
			}
			@Override
			public String getValue(CustomizedScenarioType row) {
				return row.getScenarioFile();
			}
			@Override
			public String getColumnText(CustomizedScenarioType row) {
				return row.getScenarioFile();
			}
		};
	}
	
	@Override
	public Object getId(Object element) {
		return null;
	}
}