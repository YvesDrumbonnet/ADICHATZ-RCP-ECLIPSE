/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:53:32 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.Arrays;
import java.util.List;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.CComboController;
import org.adichatz.engine.controller.field.CheckBoxController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.xjc.AddWhenEnum;
import org.adichatz.generator.xjc.PathElementEnum;
import org.adichatz.studio.xjc.controller.CodeTextController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/PathElementPart")
public class PathElementPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController additionalResourcePath$1LBL.
	private LabelController additionalResourcePath$1LBL;
	// the CheckBoxController additionalResourcePathCB.
	private CheckBoxController additionalResourcePathCB;
	// the LabelController addToClassPath$1LBL.
	private LabelController addToClassPath$1LBL;
	// the CheckBoxController addToClassPathCB.
	private CheckBoxController addToClassPathCB;
	// the LabelController addToManifestFile$1LBL.
	private LabelController addToManifestFile$1LBL;
	// the CheckBoxController addToManifestFileCB.
	private CheckBoxController addToManifestFileCB;
	// the LabelController addWhen$1LBL.
	private LabelController addWhen$1LBL;
	// the RadioGroupController addWhenRG.
	private RadioGroupController addWhenRG;
	// the LabelController location$1LBL.
	private LabelController location$1LBL;
	// the TextController locationTXT.
	private TextController locationTXT;
	// the LabelController type$1LBL.
	private LabelController type$1LBL;
	// the CComboController typeCCMB.
	private CComboController typeCCMB;
	// the LabelController condition$1LBL.
	private LabelController condition$1LBL;
	// the CodeTextController conditionTXT.
	private CodeTextController conditionTXT;
	/**
	 * Instantiates a new PathElementPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public PathElementPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part PathElementPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public PathElementPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController additionalResourcePath$1LBL
		additionalResourcePath$1LBL = new LabelController("additionalResourcePath$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "additionalResourcePath").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAdditionalResourcePath(this);
		// Creates control for LabelController addToClassPath$1LBL
		addToClassPath$1LBL = new LabelController("addToClassPath$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "addToClassPath").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAddToClassPath(this);
		// Creates control for LabelController addToManifestFile$1LBL
		addToManifestFile$1LBL = new LabelController("addToManifestFile$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "addToManifestFile").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAddToManifestFile(this);
		// Creates control for LabelController addWhen$1LBL
		addWhen$1LBL = new LabelController("addWhen$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "addWhen").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAddWhen(this);
		// Creates control for LabelController location$1LBL
		location$1LBL = new LabelController("location$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "location").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLocation(this);
		// Creates control for LabelController type$1LBL
		type$1LBL = new LabelController("type$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "type").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createType(this);
		// Creates control for LabelController condition$1LBL
		condition$1LBL = new LabelController("condition$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pathElement", "condition").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createCondition(this);
	}
	public CheckBoxController createAdditionalResourcePath(ControllerCore genCode) {
		// Creates control for CheckBoxController additionalResourcePathCB
		additionalResourcePathCB = new CheckBoxController("additionalResourcePath", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(additionalResourcePath$1LBL);
				setProperty("additionalResourcePath");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return additionalResourcePathCB;
	}
	public CheckBoxController createAddToClassPath(ControllerCore genCode) {
		// Creates control for CheckBoxController addToClassPathCB
		addToClassPathCB = new CheckBoxController("addToClassPath", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(addToClassPath$1LBL);
				setProperty("addToClassPath");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return addToClassPathCB;
	}
	public CheckBoxController createAddToManifestFile(ControllerCore genCode) {
		// Creates control for CheckBoxController addToManifestFileCB
		addToManifestFileCB = new CheckBoxController("addToManifestFile", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(addToManifestFile$1LBL);
				setProperty("addToManifestFile");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return addToManifestFileCB;
	}
	public RadioGroupController createAddWhen(ControllerCore genCode) {
		// Creates control for RadioGroupController addWhenRG
		addWhenRG = new RadioGroupController("addWhen", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(addWhen$1LBL);
				setProperty("addWhen");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((AddWhenEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(AddWhenEnum.class.getEnumConstants());
			}
		};
		return addWhenRG;
	}
	public TextController createLocation(ControllerCore genCode) {
		// Creates control for TextController locationTXT
		locationTXT = new TextController("location", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(location$1LBL);
				setProperty("location");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return locationTXT;
	}
	public CComboController createType(ControllerCore genCode) {
		// Creates control for CComboController typeCCMB
		typeCCMB = new CComboController("type", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(type$1LBL);
				setProperty("type");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.BORDER | SWT.READ_ONLY);
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((PathElementEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					getControl().setLayoutData("grow 0");
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(PathElementEnum.class.getEnumConstants());
			}
		};
		return typeCCMB;
	}
	public CodeTextController createCondition(ControllerCore genCode) {
		// Creates control for CodeTextController conditionTXT
		conditionTXT = new CodeTextController("condition", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(condition$1LBL);
				setProperty("condition");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return conditionTXT;
	}
}