/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Sat Dec 07 15:19:15 CET 2019
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import java.util.function.BooleanSupplier;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.ASetController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.action.SeparatorController;
import org.adichatz.engine.controller.collection.MenuManagerController;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.ATreeCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.studio.xjc.controller.XjcTreeController;
import org.adichatz.studio.xjc.editor.AStudioFormEditor;
import org.adichatz.studio.xjc.editor.action.AddXjcElement;
import org.adichatz.studio.xjc.editor.action.CopyXjcElementAction;
import org.adichatz.studio.xjc.editor.action.CutXjcElementAction;
import org.adichatz.studio.xjc.editor.action.PasteXjcElementAction;
import org.adichatz.studio.xjc.editor.action.ShowOutlineViewAction;
import org.adichatz.studio.xjc.editor.action.ShowXjcFieldViewAction;
import org.eclipse.swt.SWT;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/XjcTreeEditor")
public class XjcTreeEditorXjcTree extends ATreeCore {
	// the MenuManagerController contextMenuMM.
	protected MenuManagerController contextMenuMM;
	// the MenuManagerController addXjcElementMM.
	protected MenuManagerController addXjcElementMM;
	// the SeparatorController separatorWrapper$$3SPR.
	private SeparatorController separatorWrapper$$3SPR;
	// the ActionController cutXjcElementActionACT.
	private ActionController cutXjcElementActionACT;
	// the ActionController copyXjcElementActionACT.
	private ActionController copyXjcElementActionACT;
	// the ActionController pasteXjcElementActionACT.
	private ActionController pasteXjcElementActionACT;
	// the SeparatorController separatorWrapper$$4SPR.
	private SeparatorController separatorWrapper$$4SPR;
	// the ActionController showOutlineViewActionACT.
	private ActionController showOutlineViewActionACT;
	// the ActionController showXjcFieldViewActionACT.
	private ActionController showXjcFieldViewActionACT;
	public XjcTreeEditorXjcTree(final AdiContext context, IContainerController parentController) {
		super(context);
		treeController = new XjcTreeController("xjcTree", parentController, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI);
					levelToExpand = 3;
				}
				super.createControl();
				if (isValid()) {
					setShowRoot(true);
					getControl().setHeaderVisible(false);
				}
			}
		};
		coreController = treeController;
		
		
		// Add context menu
		// Creates control for MenuManagerController contextMenuMM
		contextMenuMM = new MenuManagerController("contextMenu", treeController, this) {
			@Override
			public void startLifeCycle() {
				super.startLifeCycle();
					// Creates control for MenuManagerController addXjcElementMM
					addXjcElementMM = new MenuManagerController("addXjcElement", contextMenuMM, XjcTreeEditorXjcTree.this) {
						@Override
						public void initialize() {
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != ((ASetController) getMenuContainer()).getSelectedObject() && isEditable();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
							super.initialize();
						}
						@Override
						public void createControl() {
							if (isValid()) {
								setImageDescriptor(AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.studio", "IMG_ADD_ELEMENT.png"));
								setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.editor.addElement"));
							}
							super.createControl();
						}
						@Override
						public void startLifeCycle() {
							super.startLifeCycle();
								new AddXjcElement(addXjcElementMM);
						}
					};
					// Creates control for SeparatorController separatorWrapper$$3SPR
					separatorWrapper$$3SPR = new SeparatorController("separatorWrapper$$3", contextMenuMM, XjcTreeEditorXjcTree.this);
					// Creates control for ActionController cutXjcElementActionACT
					cutXjcElementActionACT = new ActionController("CutXjcElementAction", contextMenuMM, XjcTreeEditorXjcTree.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != ((ASetController) getMenuContainer()).getSelectedObject() && isEditable();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new CutXjcElementAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for ActionController copyXjcElementActionACT
					copyXjcElementActionACT = new ActionController("copyXjcElementAction", contextMenuMM, XjcTreeEditorXjcTree.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != ((ASetController) getMenuContainer()).getSelectedObject() && isEditable();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new CopyXjcElementAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for ActionController pasteXjcElementActionACT
					pasteXjcElementActionACT = new ActionController("pasteXjcElementAction", contextMenuMM, XjcTreeEditorXjcTree.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return null != ((ASetController) getMenuContainer()).getSelectedObject() && isEditable();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new PasteXjcElementAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for SeparatorController separatorWrapper$$4SPR
					separatorWrapper$$4SPR = new SeparatorController("separatorWrapper$$4", contextMenuMM, XjcTreeEditorXjcTree.this);
					// Creates control for ActionController showOutlineViewActionACT
					showOutlineViewActionACT = new ActionController("showOutlineViewAction", contextMenuMM, XjcTreeEditorXjcTree.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return org.adichatz.studio.xjc.editor.action.ShowOutlineViewAction.isHidden();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new ShowOutlineViewAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
					// Creates control for ActionController showXjcFieldViewActionACT
					showXjcFieldViewActionACT = new ActionController("showXjcFieldViewAction", contextMenuMM, XjcTreeEditorXjcTree.this) {
						@Override
						public void initialize() {
							super.initialize();
							BooleanSupplier evaluatorVALID;
							evaluatorVALID = new BooleanSupplier() {
								public boolean getAsBoolean() {
									return org.adichatz.studio.xjc.editor.action.ShowXjcFieldViewAction.isHidden();
								}
							};
							addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
						}
						@Override
						public void createControl() {
							if (isValid()) {
								action = new ShowXjcFieldViewAction();
								action.setActionController(this);
							}
							super.createControl();
						}
					};
			}
		};
	}
	
	//* *****************
	//* Additional code *
	//*******************
	boolean isEditable() {
	    return ((AStudioFormEditor) context.getXmlTreeGenCode().getController()).isEditable(); 
	}
}