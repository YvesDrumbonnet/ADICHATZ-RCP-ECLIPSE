/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:52:21 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.function.BooleanSupplier;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.generator.xjc.CrossReferenceType;
import org.adichatz.studio.xjc.controller.AdiResourceUriTextController;
import org.adichatz.studio.xjc.controller.OutlineHyperlinkController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenResourceURIRunnable;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/CrossReferencePart")
public class CrossReferencePart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the OutlineHyperlinkController axmlDetailURICrossReferencePART$1HL.
	private OutlineHyperlinkController axmlDetailURICrossReferencePART$1HL;
	// the AdiResourceUriTextController axmlDetailURITXT.
	private AdiResourceUriTextController axmlDetailURITXT;
	// the OutlineHyperlinkController axmlQueryURICrossReferencePART$1HL.
	private OutlineHyperlinkController axmlQueryURICrossReferencePART$1HL;
	// the AdiResourceUriTextController axmlQueryURITXT.
	private AdiResourceUriTextController axmlQueryURITXT;
	// the OutlineHyperlinkController axmlTableURICrossReferencePART$1HL.
	private OutlineHyperlinkController axmlTableURICrossReferencePART$1HL;
	// the AdiResourceUriTextController axmlTableURITXT.
	private AdiResourceUriTextController axmlTableURITXT;
	// the LabelController description$1LBL.
	private LabelController description$1LBL;
	// the TextController descriptionTXT.
	private TextController descriptionTXT;
	// the LabelController entitySetId$1LBL.
	private LabelController entitySetId$1LBL;
	// the TextController entitySetIdTXT.
	private TextController entitySetIdTXT;
	// the LabelController preferenceURI$1LBL.
	private LabelController preferenceURI$1LBL;
	// the TextController preferenceURITXT.
	private TextController preferenceURITXT;
	/**
	 * Instantiates a new CrossReferencePart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public CrossReferencePart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part CrossReferencePart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public CrossReferencePart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		createAxmlDetailURICrossReferencePART$1(this);
		createAxmlDetailURI(this);
		createAxmlQueryURICrossReferencePART$1(this);
		createAxmlQueryURI(this);
		createAxmlTableURICrossReferencePART$1(this);
		createAxmlTableURI(this);
		// Creates control for LabelController description$1LBL
		description$1LBL = new LabelController("description$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "crossReference", "description").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createDescription(this);
		// Creates control for LabelController entitySetId$1LBL
		entitySetId$1LBL = new LabelController("entitySetId$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "crossReference", "entitySetId").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEntitySetId(this);
		// Creates control for LabelController preferenceURI$1LBL
		preferenceURI$1LBL = new LabelController("preferenceURI$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "crossReference", "preferenceURI").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPreferenceURI(this);
	}
	public OutlineHyperlinkController createAxmlDetailURICrossReferencePART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController axmlDetailURICrossReferencePART$1HL
		axmlDetailURICrossReferencePART$1HL = new OutlineHyperlinkController("axmlDetailURICrossReferencePART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((CrossReferenceType) parentController.getEntity().getBean()).getAxmlDetailURI();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "crossReference", "axmlDetailURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return axmlDetailURICrossReferencePART$1HL;
	}
	public AdiResourceUriTextController createAxmlDetailURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController axmlDetailURITXT
		axmlDetailURITXT = new AdiResourceUriTextController("axmlDetailURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(axmlDetailURICrossReferencePART$1HL);
				setProperty("axmlDetailURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return axmlDetailURITXT;
	}
	public OutlineHyperlinkController createAxmlQueryURICrossReferencePART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController axmlQueryURICrossReferencePART$1HL
		axmlQueryURICrossReferencePART$1HL = new OutlineHyperlinkController("axmlQueryURICrossReferencePART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((CrossReferenceType) parentController.getEntity().getBean()).getAxmlQueryURI();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "crossReference", "axmlQueryURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return axmlQueryURICrossReferencePART$1HL;
	}
	public AdiResourceUriTextController createAxmlQueryURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController axmlQueryURITXT
		axmlQueryURITXT = new AdiResourceUriTextController("axmlQueryURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(axmlQueryURICrossReferencePART$1HL);
				setProperty("axmlQueryURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return axmlQueryURITXT;
	}
	public OutlineHyperlinkController createAxmlTableURICrossReferencePART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController axmlTableURICrossReferencePART$1HL
		axmlTableURICrossReferencePART$1HL = new OutlineHyperlinkController("axmlTableURICrossReferencePART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((CrossReferenceType) parentController.getEntity().getBean()).getAxmlTableURI();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "crossReference", "axmlTableURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return axmlTableURICrossReferencePART$1HL;
	}
	public AdiResourceUriTextController createAxmlTableURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController axmlTableURITXT
		axmlTableURITXT = new AdiResourceUriTextController("axmlTableURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(axmlTableURICrossReferencePART$1HL);
				setProperty("axmlTableURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return axmlTableURITXT;
	}
	public TextController createDescription(ControllerCore genCode) {
		// Creates control for TextController descriptionTXT
		descriptionTXT = new TextController("description", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(description$1LBL);
				setProperty("description");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return descriptionTXT;
	}
	public TextController createEntitySetId(ControllerCore genCode) {
		// Creates control for TextController entitySetIdTXT
		entitySetIdTXT = new TextController("entitySetId", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(entitySetId$1LBL);
				setProperty("entitySetId");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entitySetIdTXT;
	}
	public TextController createPreferenceURI(ControllerCore genCode) {
		// Creates control for TextController preferenceURITXT
		preferenceURITXT = new TextController("preferenceURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(preferenceURI$1LBL);
				setProperty("preferenceURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return preferenceURITXT;
	}
}