/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:53:36 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.function.BooleanSupplier;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.AFieldController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.CheckBoxController;
import org.adichatz.engine.controller.field.HyperlinkController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.wrapper.QueryPreferenceWrapper;
import org.adichatz.generator.xjc.QueryParameterType;
import org.adichatz.studio.xjc.controller.AdiResourceUriTextController;
import org.adichatz.studio.xjc.controller.BooleanRadioGroupController;
import org.adichatz.studio.xjc.controller.PropertyTextController;
import org.adichatz.studio.xjc.controller.SuffixCComboController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.controller.XjcTextController;
import org.adichatz.studio.xjc.data.XjcEntity;
import org.adichatz.studio.xjc.editor.runnable.OpenResourceURIRunnable;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/QueryParameterPart")
public class QueryParameterPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController id$1LBL.
	private LabelController id$1LBL;
	// the TextController idTXT.
	private TextController idTXT;
	// the LabelController binaryExpression$1LBL.
	private LabelController binaryExpression$1LBL;
	// the TextController binaryExpressionTXT.
	private TextController binaryExpressionTXT;
	// the LabelController binarySecondExpression$1LBL.
	private LabelController binarySecondExpression$1LBL;
	// the TextController binarySecondExpressionTXT.
	private TextController binarySecondExpressionTXT;
	// the LabelController columnText$1LBL.
	private LabelController columnText$1LBL;
	// the TextController columnTextTXT.
	private TextController columnTextTXT;
	// the HyperlinkController entityURIQueryParameterPART$1HL.
	private HyperlinkController entityURIQueryParameterPART$1HL;
	// the AdiResourceUriTextController entityURITXT.
	private AdiResourceUriTextController entityURITXT;
	// the LabelController expression$1LBL.
	private LabelController expression$1LBL;
	// the TextController expressionTXT.
	private TextController expressionTXT;
	// the LabelController expressionClassName$1LBL.
	private LabelController expressionClassName$1LBL;
	// the TextController expressionClassNameTXT.
	private TextController expressionClassNameTXT;
	// the LabelController expressionMethodURI$1LBL.
	private LabelController expressionMethodURI$1LBL;
	// the TextController expressionMethodURITXT.
	private TextController expressionMethodURITXT;
	// the LabelController operator$1LBL.
	private LabelController operator$1LBL;
	// the TextController operatorTXT.
	private TextController operatorTXT;
	// the LabelController permanent$1LBL.
	private LabelController permanent$1LBL;
	// the CheckBoxController permanentCB.
	private CheckBoxController permanentCB;
	// the LabelController prompt$1LBL.
	private LabelController prompt$1LBL;
	// the TextController promptTXT.
	private TextController promptTXT;
	// the LabelController property$1LBL.
	private LabelController property$1LBL;
	// the PropertyTextController propertyTXT.
	private PropertyTextController propertyTXT;
	// the LabelController secondColumnText$1LBL.
	private LabelController secondColumnText$1LBL;
	// the TextController secondColumnTextTXT.
	private TextController secondColumnTextTXT;
	// the LabelController secondExpression$1LBL.
	private LabelController secondExpression$1LBL;
	// the TextController secondExpressionTXT.
	private TextController secondExpressionTXT;
	// the LabelController style$1LBL.
	private LabelController style$1LBL;
	// the TextController styleTXT.
	private TextController styleTXT;
	// the LabelController suffix$1LBL.
	private LabelController suffix$1LBL;
	// the SuffixCComboController suffixCCMB.
	private SuffixCComboController suffixCCMB;
	// the LabelController valid$1LBL.
	private LabelController valid$1LBL;
	// the BooleanRadioGroupController validRG.
	private BooleanRadioGroupController validRG;
	// the LabelController visible$1LBL.
	private LabelController visible$1LBL;
	// the XjcTextController visibleTXT.
	private XjcTextController visibleTXT;
	/**
	 * Instantiates a new QueryParameterPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public QueryParameterPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part QueryParameterPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public QueryParameterPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController id$1LBL
		id$1LBL = new LabelController("id$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "element", "id").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createId(this);
		// Creates control for LabelController binaryExpression$1LBL
		binaryExpression$1LBL = new LabelController("binaryExpression$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "binaryExpression").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBinaryExpression(this);
		// Creates control for LabelController binarySecondExpression$1LBL
		binarySecondExpression$1LBL = new LabelController("binarySecondExpression$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "binarySecondExpression").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBinarySecondExpression(this);
		// Creates control for LabelController columnText$1LBL
		columnText$1LBL = new LabelController("columnText$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "columnText").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnText(this);
		createEntityURIQueryParameterPART$1(this);
		createEntityURI(this);
		// Creates control for LabelController expression$1LBL
		expression$1LBL = new LabelController("expression$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "expression").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createExpression(this);
		// Creates control for LabelController expressionClassName$1LBL
		expressionClassName$1LBL = new LabelController("expressionClassName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "expressionClassName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createExpressionClassName(this);
		// Creates control for LabelController expressionMethodURI$1LBL
		expressionMethodURI$1LBL = new LabelController("expressionMethodURI$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "expressionMethodURI").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createExpressionMethodURI(this);
		// Creates control for LabelController operator$1LBL
		operator$1LBL = new LabelController("operator$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "operator").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createOperator(this);
		// Creates control for LabelController permanent$1LBL
		permanent$1LBL = new LabelController("permanent$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "permanent").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPermanent(this);
		// Creates control for LabelController prompt$1LBL
		prompt$1LBL = new LabelController("prompt$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "prompt").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPrompt(this);
		// Creates control for LabelController property$1LBL
		property$1LBL = new LabelController("property$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "property").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createProperty(this);
		// Creates control for LabelController secondColumnText$1LBL
		secondColumnText$1LBL = new LabelController("secondColumnText$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "secondColumnText").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSecondColumnText(this);
		// Creates control for LabelController secondExpression$1LBL
		secondExpression$1LBL = new LabelController("secondExpression$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "secondExpression").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSecondExpression(this);
		// Creates control for LabelController style$1LBL
		style$1LBL = new LabelController("style$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "style").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createStyle(this);
		// Creates control for LabelController suffix$1LBL
		suffix$1LBL = new LabelController("suffix$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "suffix").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSuffix(this);
		// Creates control for LabelController valid$1LBL
		valid$1LBL = new LabelController("valid$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "valid").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createValid(this);
		// Creates control for LabelController visible$1LBL
		visible$1LBL = new LabelController("visible$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "visible").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createVisible(this);
	}
	public TextController createId(ControllerCore genCode) {
		// Creates control for TextController idTXT
		idTXT = new TextController("id", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(id$1LBL);
				setProperty("id");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return idTXT;
	}
	public TextController createBinaryExpression(ControllerCore genCode) {
		// Creates control for TextController binaryExpressionTXT
		binaryExpressionTXT = new TextController("binaryExpression", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(binaryExpression$1LBL);
				setProperty("binaryExpression");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertModelToTarget(Object value) {
				return org.adichatz.common.encoding.Base64.decode(((byte[]) value));
			}
			@Override
			public Object convertTargetToModel(Object value) {
				return org.adichatz.common.encoding.Base64.encode(((QueryParameterType) getEntity().getBean()).getBinaryExpression());
			}
		};
		return binaryExpressionTXT;
	}
	public TextController createBinarySecondExpression(ControllerCore genCode) {
		// Creates control for TextController binarySecondExpressionTXT
		binarySecondExpressionTXT = new TextController("binarySecondExpression", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(binarySecondExpression$1LBL);
				setProperty("binarySecondExpression");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertModelToTarget(Object value) {
				return org.adichatz.common.encoding.Base64.decode(((byte[]) value));
			}
			@Override
			public Object convertTargetToModel(Object value) {
				return org.adichatz.common.encoding.Base64.encode(((QueryParameterType) getEntity().getBean()).getBinarySecondExpression());
			}
		};
		return binarySecondExpressionTXT;
	}
	public TextController createColumnText(ControllerCore genCode) {
		// Creates control for TextController columnTextTXT
		columnTextTXT = new TextController("columnText", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnText$1LBL);
				setProperty("columnText");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnTextTXT;
	}
	public HyperlinkController createEntityURIQueryParameterPART$1(ControllerCore genCode) {
		// Creates control for HyperlinkController entityURIQueryParameterPART$1HL
		entityURIQueryParameterPART$1HL = new HyperlinkController("entityURIQueryParameterPART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryParameter", "entityURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entityURIQueryParameterPART$1HL;
	}
	public AdiResourceUriTextController createEntityURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController entityURITXT
		entityURITXT = new AdiResourceUriTextController("entityURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(entityURIQueryParameterPART$1HL);
				setProperty("entityURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entityURITXT;
	}
	public TextController createExpression(ControllerCore genCode) {
		// Creates control for TextController expressionTXT
		expressionTXT = new TextController("expression", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(expression$1LBL);
				setProperty("expression");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return expressionTXT;
	}
	public TextController createExpressionClassName(ControllerCore genCode) {
		// Creates control for TextController expressionClassNameTXT
		expressionClassNameTXT = new TextController("expressionClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(expressionClassName$1LBL);
				setProperty("expressionClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return expressionClassNameTXT;
	}
	public TextController createExpressionMethodURI(ControllerCore genCode) {
		// Creates control for TextController expressionMethodURITXT
		expressionMethodURITXT = new TextController("expressionMethodURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(expressionMethodURI$1LBL);
				setProperty("expressionMethodURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return expressionMethodURITXT;
	}
	public TextController createOperator(ControllerCore genCode) {
		// Creates control for TextController operatorTXT
		operatorTXT = new TextController("operator", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(operator$1LBL);
				setProperty("operator");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return operatorTXT;
	}
	public CheckBoxController createPermanent(ControllerCore genCode) {
		// Creates control for CheckBoxController permanentCB
		permanentCB = new CheckBoxController("permanent", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(permanent$1LBL);
				setProperty("permanent");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return permanentCB;
	}
	public TextController createPrompt(ControllerCore genCode) {
		// Creates control for TextController promptTXT
		promptTXT = new TextController("prompt", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(prompt$1LBL);
				setProperty("prompt");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return promptTXT;
	}
	public PropertyTextController createProperty(ControllerCore genCode) {
		// Creates control for PropertyTextController propertyTXT
		propertyTXT = new PropertyTextController("property", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(property$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isPreferenceChild(propertyTXT);
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("property");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return propertyTXT;
	}
	public TextController createSecondColumnText(ControllerCore genCode) {
		// Creates control for TextController secondColumnTextTXT
		secondColumnTextTXT = new TextController("secondColumnText", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(secondColumnText$1LBL);
				setProperty("secondColumnText");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return secondColumnTextTXT;
	}
	public TextController createSecondExpression(ControllerCore genCode) {
		// Creates control for TextController secondExpressionTXT
		secondExpressionTXT = new TextController("secondExpression", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(secondExpression$1LBL);
				setProperty("secondExpression");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return secondExpressionTXT;
	}
	public TextController createStyle(ControllerCore genCode) {
		// Creates control for TextController styleTXT
		styleTXT = new TextController("style", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(style$1LBL);
				setProperty("style");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return styleTXT;
	}
	public SuffixCComboController createSuffix(ControllerCore genCode) {
		// Creates control for SuffixCComboController suffixCCMB
		suffixCCMB = new SuffixCComboController("suffix", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(suffix$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isPreferenceChild(suffixCCMB);
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("suffix");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					dataReferenceManager = new DataReferenceManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return suffixCCMB;
	}
	public BooleanRadioGroupController createValid(ControllerCore genCode) {
		// Creates control for BooleanRadioGroupController validRG
		validRG = new BooleanRadioGroupController("valid", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(valid$1LBL);
				setProperty("valid");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return validRG;
	}
	public XjcTextController createVisible(ControllerCore genCode) {
		// Creates control for XjcTextController visibleTXT
		visibleTXT = new XjcTextController("visible", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(visible$1LBL);
				setProperty("visible");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return visibleTXT;
	}
	
	//* *****************
	//* Additional code *
	//*******************
	private boolean isPreferenceChild(AFieldController controller) {
	    return ((XjcEntity) controller.getParentController().getEntity()).getTreeElement().getParentElement().getElement() instanceof QueryPreferenceWrapper;
	}
}