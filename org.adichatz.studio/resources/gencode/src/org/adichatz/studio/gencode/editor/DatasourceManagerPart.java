/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 08:04:42 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.HelpButtonController;
import org.adichatz.engine.controller.collection.GroupController;
import org.adichatz.engine.controller.field.EncryptedTextController;
import org.adichatz.engine.controller.field.FileTextController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.AValidator;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.common.FileUtil;
import org.adichatz.generator.common.GeneratorConstants;
import org.adichatz.generator.wrapper.ConnectorTreeWrapper;
import org.adichatz.scenario.util.ScenarioUtil;
import org.adichatz.studio.util.StudioUtil;
import org.adichatz.studio.xjc.controller.DialectTextController;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/DatasourceManagerPart")
public class DatasourceManagerPart extends AContainerCore {
	// the GroupController datasourceGroupGRP.
	protected GroupController datasourceGroupGRP;
	// the LabelController idLBL.
	private LabelController idLBL;
	// the TextController idTXT.
	private TextController idTXT;
	// the LabelController nameLBLLBL.
	private LabelController nameLBLLBL;
	// the TextController nameTXT.
	private TextController nameTXT;
	// the LabelController descriptionLBLLBL.
	private LabelController descriptionLBLLBL;
	// the TextController descriptionTXT.
	private TextController descriptionTXT;
	// the LabelController customizationFileLBLLBL.
	private LabelController customizationFileLBLLBL;
	// the FileTextController customizationFileFT.
	private FileTextController customizationFileFT;
	// the GroupController propertiesGroupGRP.
	protected GroupController propertiesGroupGRP;
	// the LabelController dialectLBLLBL.
	private LabelController dialectLBLLBL;
	// the DialectTextController dialectTXT.
	private DialectTextController dialectTXT;
	// the LabelController connectionDriverClassLBLLBL.
	private LabelController connectionDriverClassLBLLBL;
	// the TextController connectionDriverClassTXT.
	private TextController connectionDriverClassTXT;
	// the LabelController connectionUrlLBLLBL.
	private LabelController connectionUrlLBLLBL;
	// the TextController connectionUrlTXT.
	private TextController connectionUrlTXT;
	// the LabelController connectionUsernameLBLLBL.
	private LabelController connectionUsernameLBLLBL;
	// the TextController connectionUsernameTXT.
	private TextController connectionUsernameTXT;
	// the LabelController connectionPasswordLBLLBL.
	private LabelController connectionPasswordLBLLBL;
	// the EncryptedTextController connectionPasswordENTXT.
	private EncryptedTextController connectionPasswordENTXT;
	// the LabelController connectionSchemaLBLLBL.
	private LabelController connectionSchemaLBLLBL;
	// the TextController connectionSchemaTXT.
	private TextController connectionSchemaTXT;
	// the LabelController jdbcDriverJarLBLLBL.
	private LabelController jdbcDriverJarLBLLBL;
	// the FileTextController jdbcDriverJarFT.
	private FileTextController jdbcDriverJarFT;
	// the LabelController revengFileLBLLBL.
	private LabelController revengFileLBLLBL;
	// the FileTextController revengFileFT.
	private FileTextController revengFileFT;
	// the GroupController jboss71GroupGRP.
	protected GroupController jboss71GroupGRP;
	// the LabelController driverLBLLBL.
	private LabelController driverLBLLBL;
	// the TextController driverTXT.
	private TextController driverTXT;
	// the HelpButtonController driverHlpHB.
	private HelpButtonController driverHlpHB;
	// the LabelController xaDataSourceClassLBLLBL.
	private LabelController xaDataSourceClassLBLLBL;
	// the TextController xaDataSourceClassTXT.
	private TextController xaDataSourceClassTXT;
	// the HelpButtonController xaDataSourceClassHlpHB.
	private HelpButtonController xaDataSourceClassHlpHB;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new DatasourceManagerPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public DatasourceManagerPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part DatasourceManagerPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public DatasourceManagerPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for GroupController datasourceGroupGRP
		datasourceGroupGRP = new GroupController("datasourceGroup", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.group"));
					getComposite().setLayout(new MigLayout("wrap 2","[]15[grow,fill]","[]2[][]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		// Creates control for LabelController idLBL
		idLBL = new LabelController("id", datasourceGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.id"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createId(this);
		// Creates control for LabelController nameLBLLBL
		nameLBLLBL = new LabelController("nameLBL", datasourceGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.name"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createName(this);
		// Creates control for LabelController descriptionLBLLBL
		descriptionLBLLBL = new LabelController("descriptionLBL", datasourceGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.description"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createDescription(this);
		// Creates control for LabelController customizationFileLBLLBL
		customizationFileLBLLBL = new LabelController("customizationFileLBL", datasourceGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.customization.file"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createCustomizationFile(this);
		// Creates control for GroupController propertiesGroupGRP
		propertiesGroupGRP = new GroupController("propertiesGroup", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.properties.group"));
					getComposite().setLayout(new MigLayout("wrap 2","[]15[grow,fill]","[]2[]2[]2[]2[]2[]2[]2[]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
				}
			}
		};
		// Creates control for LabelController dialectLBLLBL
		dialectLBLLBL = new LabelController("dialectLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.dialect").concat(":"));
				}
			}
		};
		createDialect(this);
		// Creates control for LabelController connectionDriverClassLBLLBL
		connectionDriverClassLBLLBL = new LabelController("connectionDriverClassLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.driverClass").concat(":"));
				}
			}
		};
		createConnectionDriverClass(this);
		// Creates control for LabelController connectionUrlLBLLBL
		connectionUrlLBLLBL = new LabelController("connectionUrlLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.URL").concat(":"));
				}
			}
		};
		createConnectionUrl(this);
		// Creates control for LabelController connectionUsernameLBLLBL
		connectionUsernameLBLLBL = new LabelController("connectionUsernameLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.username").concat(":"));
				}
			}
		};
		createConnectionUsername(this);
		// Creates control for LabelController connectionPasswordLBLLBL
		connectionPasswordLBLLBL = new LabelController("connectionPasswordLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.password").concat(":"));
				}
			}
		};
		createConnectionPassword(this);
		// Creates control for LabelController connectionSchemaLBLLBL
		connectionSchemaLBLLBL = new LabelController("connectionSchemaLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.schema").concat(":"));
				}
			}
		};
		createConnectionSchema(this);
		// Creates control for LabelController jdbcDriverJarLBLLBL
		jdbcDriverJarLBLLBL = new LabelController("jdbcDriverJarLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.jdbc.driverJar").concat(":"));
				}
			}
		};
		createJdbcDriverJar(this);
		// Creates control for LabelController revengFileLBLLBL
		revengFileLBLLBL = new LabelController("revengFileLBL", propertiesGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.reveng.file").concat(":"));
				}
			}
		};
		createRevengFile(this);
		// Creates control for GroupController jboss71GroupGRP
		jboss71GroupGRP = new GroupController("jboss71Group", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.AS"));
					getComposite().setLayout(new MigLayout("wrap 3","[]15[grow,fill][]","[]2[]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		// Creates control for LabelController driverLBLLBL
		driverLBLLBL = new LabelController("driverLBL", jboss71GroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.driver"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createDriver(this);
		// Creates control for HelpButtonController driverHlpHB
		driverHlpHB = new HelpButtonController("driverHlp", jboss71GroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(toolkit.getRegisteredImage("IMG_HELP"));
					setHelpLabel(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.specify.driver"));
					setHelpSpecify(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.specify.driver"));
					setHelpMessage(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.specify.message"));
				}
			}
		};
		// Creates control for LabelController xaDataSourceClassLBLLBL
		xaDataSourceClassLBLLBL = new LabelController("xaDataSourceClassLBL", jboss71GroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.xa.datasource.class"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createXaDataSourceClass(this);
		// Creates control for HelpButtonController xaDataSourceClassHlpHB
		xaDataSourceClassHlpHB = new HelpButtonController("xaDataSourceClassHlp", jboss71GroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(toolkit.getRegisteredImage("IMG_HELP"));
					setHelpLabel(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.xa.datasource.class.driver"));
					setHelpSpecify(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.xa.datasource.class.driver"));
					setHelpMessage(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.xa.datasource.class.message"));
				}
			}
		};
	}
	public TextController createId(ControllerCore genCode) {
		// Creates control for TextController idTXT
		idTXT = new TextController("id", getParentController(datasourceGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new AValidator(this, "connectorNameAlreadyExist") {
						private boolean hasError() {
							return null != getConnectorTree().getDatasource(getControl().getText().trim()) && !((String) context.getParam("CONNECTOR")).equals(getControl().getText().trim());
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.connector.exist", getValue()));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return idTXT;
	}
	public TextController createName(ControllerCore genCode) {
		// Creates control for TextController nameTXT
		nameTXT = new TextController("name", getParentController(datasourceGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return nameTXT;
	}
	public TextController createDescription(ControllerCore genCode) {
		// Creates control for TextController descriptionTXT
		descriptionTXT = new TextController("description", getParentController(datasourceGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return descriptionTXT;
	}
	public FileTextController createCustomizationFile(ControllerCore genCode) {
		// Creates control for FileTextController customizationFileFT
		customizationFileFT = new FileTextController("customizationFile", getParentController(datasourceGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setFilterExtension("*.xml");
					addValidator(new AValidator(this, "invalidCustomFile") {
						private boolean hasError() {
							Object validation = StudioUtil.validateCustomizationFile(getControl().getValue(), null);
							return null != validation && validation instanceof String;
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.invalid", getValue()));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
				}
			}
		};
		return customizationFileFT;
	}
	public DialectTextController createDialect(ControllerCore genCode) {
		// Creates control for DialectTextController dialectTXT
		dialectTXT = new DialectTextController("dialect", getParentController(propertiesGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return dialectTXT;
	}
	public TextController createConnectionDriverClass(ControllerCore genCode) {
		// Creates control for TextController connectionDriverClassTXT
		connectionDriverClassTXT = new TextController("connectionDriverClass", getParentController(propertiesGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return connectionDriverClassTXT;
	}
	public TextController createConnectionUrl(ControllerCore genCode) {
		// Creates control for TextController connectionUrlTXT
		connectionUrlTXT = new TextController("connectionUrl", getParentController(propertiesGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return connectionUrlTXT;
	}
	public TextController createConnectionUsername(ControllerCore genCode) {
		// Creates control for TextController connectionUsernameTXT
		connectionUsernameTXT = new TextController("connectionUsername", getParentController(propertiesGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return connectionUsernameTXT;
	}
	public EncryptedTextController createConnectionPassword(ControllerCore genCode) {
		// Creates control for EncryptedTextController connectionPasswordENTXT
		connectionPasswordENTXT = new EncryptedTextController("connectionPassword", getParentController(propertiesGroupGRP), genCode);
		return connectionPasswordENTXT;
	}
	public TextController createConnectionSchema(ControllerCore genCode) {
		// Creates control for TextController connectionSchemaTXT
		connectionSchemaTXT = new TextController("connectionSchema", getParentController(propertiesGroupGRP), genCode);
		return connectionSchemaTXT;
	}
	public FileTextController createJdbcDriverJar(ControllerCore genCode) {
		// Creates control for FileTextController jdbcDriverJarFT
		jdbcDriverJarFT = new FileTextController("jdbcDriverJar", getParentController(propertiesGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setFilterExtension("*.jar, *.zip");
					getControl().setFilterPath(getConnectorDirectory());
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return jdbcDriverJarFT;
	}
	public FileTextController createRevengFile(ControllerCore genCode) {
		// Creates control for FileTextController revengFileFT
		revengFileFT = new FileTextController("revengFile", getParentController(propertiesGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setFilterExtension("*.xml");
					getControl().setFilterPath(getConnectorDirectory());
				}
			}
		};
		return revengFileFT;
	}
	public TextController createDriver(ControllerCore genCode) {
		// Creates control for TextController driverTXT
		driverTXT = new TextController("driver", getParentController(jboss71GroupGRP), genCode);
		return driverTXT;
	}
	public TextController createXaDataSourceClass(ControllerCore genCode) {
		// Creates control for TextController xaDataSourceClassTXT
		xaDataSourceClassTXT = new TextController("xaDataSourceClass", getParentController(jboss71GroupGRP), genCode);
		return xaDataSourceClassTXT;
	}
	
	//* *****************
	//* Additional code *
	//*******************
	private ConnectorTreeWrapper connectorTree;
	private ConnectorTreeWrapper getConnectorTree() {
	    if (null == connectorTree) {
	       connectorTree = ScenarioUtil.getConnectorTree(((String) context.getParam("CONNECTORS_URI")));
	    }
	    return connectorTree;
	}
	private String getConnectorDirectory() {
	    return FileUtil.getPluginHome(GeneratorConstants.TEMPLATE_BUNDLE) + "/template/connectors";
	}
			
}