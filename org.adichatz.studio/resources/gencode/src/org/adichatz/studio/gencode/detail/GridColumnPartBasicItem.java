/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Mon Jul 06 18:34:26 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.CheckBoxController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.NumericTextController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.nebula.PShelfController;
import org.adichatz.engine.controller.nebula.PShelfItemController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.generator.xjc.GridColumnType;
import org.adichatz.generator.xjc.SortEnum;
import org.adichatz.studio.xjc.controller.BooleanRadioGroupController;
import org.adichatz.studio.xjc.controller.ClassTextController;
import org.adichatz.studio.xjc.controller.CodeTextController;
import org.adichatz.studio.xjc.controller.ColorController;
import org.adichatz.studio.xjc.controller.FontController;
import org.adichatz.studio.xjc.controller.IdTextController;
import org.adichatz.studio.xjc.controller.OutlineHyperlinkController;
import org.adichatz.studio.xjc.controller.PropertyTextController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.controller.XjcTextController;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenClassEditorRunnable;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/GridColumnPart")
public class GridColumnPartBasicItem extends EntityManagerCore {
	// the ScrolledCompositeController basicItemSCSCLC.
	protected ScrolledCompositeController basicItemSCSCLC;
	// the LabelController id$1LBL.
	private LabelController id$1LBL;
	// the IdTextController idTXT.
	private IdTextController idTXT;
	// the LabelController alignment$1LBL.
	private LabelController alignment$1LBL;
	// the NumericTextController alignmentNTXT.
	private NumericTextController alignmentNTXT;
	// the LabelController cellSelectionEnabled$1LBL.
	private LabelController cellSelectionEnabled$1LBL;
	// the XjcTextController cellSelectionEnabledTXT.
	private XjcTextController cellSelectionEnabledTXT;
	// the LabelController columnBackground$1LBL.
	private LabelController columnBackground$1LBL;
	// the ColorController columnBackgroundTXT.
	private ColorController columnBackgroundTXT;
	// the LabelController columnFont$1LBL.
	private LabelController columnFont$1LBL;
	// the FontController columnFontTXT.
	private FontController columnFontTXT;
	// the LabelController columnForeground$1LBL.
	private LabelController columnForeground$1LBL;
	// the ColorController columnForegroundTXT.
	private ColorController columnForegroundTXT;
	// the LabelController columnValueType$1LBL.
	private LabelController columnValueType$1LBL;
	// the TextController columnValueTypeTXT.
	private TextController columnValueTypeTXT;
	// the OutlineHyperlinkController controllerClassNameGridColumnPART$1HL.
	private OutlineHyperlinkController controllerClassNameGridColumnPART$1HL;
	// the ClassTextController controllerClassNameTXT.
	private ClassTextController controllerClassNameTXT;
	// the LabelController headerFont$1LBL.
	private LabelController headerFont$1LBL;
	// the FontController headerFontTXT.
	private FontController headerFontTXT;
	// the LabelController headerWordWrap$1LBL.
	private LabelController headerWordWrap$1LBL;
	// the TextController headerWordWrapTXT.
	private TextController headerWordWrapTXT;
	// the LabelController image$1LBL.
	private LabelController image$1LBL;
	// the TextController imageTXT.
	private TextController imageTXT;
	// the LabelController lazyFetches$1LBL.
	private LabelController lazyFetches$1LBL;
	// the TextController lazyFetchesTXT.
	private TextController lazyFetchesTXT;
	// the LabelController locale$1LBL.
	private LabelController locale$1LBL;
	// the TextController localeTXT.
	private TextController localeTXT;
	// the LabelController minimumWidth$1LBL.
	private LabelController minimumWidth$1LBL;
	// the NumericTextController minimumWidthNTXT.
	private NumericTextController minimumWidthNTXT;
	// the LabelController moveable$1LBL.
	private LabelController moveable$1LBL;
	// the TextController moveableTXT.
	private TextController moveableTXT;
	// the LabelController pack$1LBL.
	private LabelController pack$1LBL;
	// the BooleanRadioGroupController packRG.
	private BooleanRadioGroupController packRG;
	// the LabelController pattern$1LBL.
	private LabelController pattern$1LBL;
	// the XjcTextController patternTXT.
	private XjcTextController patternTXT;
	// the LabelController property$1LBL.
	private LabelController property$1LBL;
	// the PropertyTextController propertyTXT.
	private PropertyTextController propertyTXT;
	// the LabelController ref$1LBL.
	private LabelController ref$1LBL;
	// the TextController refTXT.
	private TextController refTXT;
	// the LabelController resizeable$1LBL.
	private LabelController resizeable$1LBL;
	// the TextController resizeableTXT.
	private TextController resizeableTXT;
	// the LabelController sortDirection$1LBL.
	private LabelController sortDirection$1LBL;
	// the RadioGroupController sortDirectionRG.
	private RadioGroupController sortDirectionRG;
	// the LabelController sorted$1LBL.
	private LabelController sorted$1LBL;
	// the CheckBoxController sortedCB.
	private CheckBoxController sortedCB;
	// the LabelController style$1LBL.
	private LabelController style$1LBL;
	// the XjcTextController styleTXT.
	private XjcTextController styleTXT;
	// the LabelController summary$1LBL.
	private LabelController summary$1LBL;
	// the XjcTextController summaryTXT.
	private XjcTextController summaryTXT;
	// the LabelController text$1LBL.
	private LabelController text$1LBL;
	// the TextController textTXT.
	private TextController textTXT;
	// the LabelController toolTipText$1LBL.
	private LabelController toolTipText$1LBL;
	// the TextController toolTipTextTXT.
	private TextController toolTipTextTXT;
	// the LabelController valid$1LBL.
	private LabelController valid$1LBL;
	// the XjcTextController validTXT.
	private XjcTextController validTXT;
	// the LabelController width$1LBL.
	private LabelController width$1LBL;
	// the NumericTextController widthNTXT.
	private NumericTextController widthNTXT;
	// the LabelController wordWrap$1LBL.
	private LabelController wordWrap$1LBL;
	// the TextController wordWrapTXT.
	private TextController wordWrapTXT;
	// the LabelController additionalCode$1LBL.
	private LabelController additionalCode$1LBL;
	// the CodeTextController additionalCodeTXT.
	private CodeTextController additionalCodeTXT;
	// the LabelController columnImage$1LBL.
	private LabelController columnImage$1LBL;
	// the CodeTextController columnImageTXT.
	private CodeTextController columnImageTXT;
	// the LabelController columnText$1LBL.
	private LabelController columnText$1LBL;
	// the CodeTextController columnTextTXT.
	private CodeTextController columnTextTXT;
	// the LabelController columnValue$1LBL.
	private LabelController columnValue$1LBL;
	// the CodeTextController columnValueTXT.
	private CodeTextController columnValueTXT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Creates GridColumnPartBasicItem.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public GridColumnPartBasicItem(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new PShelfItemController("basicItem", parentController, this) {
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getItem().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.xjcEditor.basicItem"));
					}
				}
			};
			if (!((PShelfController) parentController).isDelayed())
				createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController basicItemSCSCLC
		basicItemSCSCLC = new ScrolledCompositeController("basicItemSC", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController id$1LBL
		id$1LBL = new LabelController("id$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "element", "id").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createId(this);
		// Creates control for LabelController alignment$1LBL
		alignment$1LBL = new LabelController("alignment$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "alignment").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAlignment(this);
		// Creates control for LabelController cellSelectionEnabled$1LBL
		cellSelectionEnabled$1LBL = new LabelController("cellSelectionEnabled$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "cellSelectionEnabled").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createCellSelectionEnabled(this);
		// Creates control for LabelController columnBackground$1LBL
		columnBackground$1LBL = new LabelController("columnBackground$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnBackground").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnBackground(this);
		// Creates control for LabelController columnFont$1LBL
		columnFont$1LBL = new LabelController("columnFont$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnFont").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnFont(this);
		// Creates control for LabelController columnForeground$1LBL
		columnForeground$1LBL = new LabelController("columnForeground$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnForeground").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnForeground(this);
		// Creates control for LabelController columnValueType$1LBL
		columnValueType$1LBL = new LabelController("columnValueType$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnValueType").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnValueType(this);
		createControllerClassNameGridColumnPART$1(this);
		createControllerClassName(this);
		// Creates control for LabelController headerFont$1LBL
		headerFont$1LBL = new LabelController("headerFont$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "headerFont").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createHeaderFont(this);
		// Creates control for LabelController headerWordWrap$1LBL
		headerWordWrap$1LBL = new LabelController("headerWordWrap$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "headerWordWrap").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createHeaderWordWrap(this);
		// Creates control for LabelController image$1LBL
		image$1LBL = new LabelController("image$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "image").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createImage(this);
		// Creates control for LabelController lazyFetches$1LBL
		lazyFetches$1LBL = new LabelController("lazyFetches$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "lazyFetches").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLazyFetches(this);
		// Creates control for LabelController locale$1LBL
		locale$1LBL = new LabelController("locale$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "locale").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLocale(this);
		// Creates control for LabelController minimumWidth$1LBL
		minimumWidth$1LBL = new LabelController("minimumWidth$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "minimumWidth").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createMinimumWidth(this);
		// Creates control for LabelController moveable$1LBL
		moveable$1LBL = new LabelController("moveable$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "moveable").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createMoveable(this);
		// Creates control for LabelController pack$1LBL
		pack$1LBL = new LabelController("pack$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "pack").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPack(this);
		// Creates control for LabelController pattern$1LBL
		pattern$1LBL = new LabelController("pattern$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "pattern").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPattern(this);
		// Creates control for LabelController property$1LBL
		property$1LBL = new LabelController("property$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "property").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createProperty(this);
		// Creates control for LabelController ref$1LBL
		ref$1LBL = new LabelController("ref$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validElement", "ref").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createRef(this);
		// Creates control for LabelController resizeable$1LBL
		resizeable$1LBL = new LabelController("resizeable$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "resizeable").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createResizeable(this);
		// Creates control for LabelController sortDirection$1LBL
		sortDirection$1LBL = new LabelController("sortDirection$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "sortDirection").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSortDirection(this);
		// Creates control for LabelController sorted$1LBL
		sorted$1LBL = new LabelController("sorted$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "sorted").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSorted(this);
		// Creates control for LabelController style$1LBL
		style$1LBL = new LabelController("style$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "style").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createStyle(this);
		// Creates control for LabelController summary$1LBL
		summary$1LBL = new LabelController("summary$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "summary").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSummary(this);
		// Creates control for LabelController text$1LBL
		text$1LBL = new LabelController("text$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "text").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createText(this);
		// Creates control for LabelController toolTipText$1LBL
		toolTipText$1LBL = new LabelController("toolTipText$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "toolTipText").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createToolTipText(this);
		// Creates control for LabelController valid$1LBL
		valid$1LBL = new LabelController("valid$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validElement", "valid").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createValid(this);
		// Creates control for LabelController width$1LBL
		width$1LBL = new LabelController("width$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "width").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createWidth(this);
		// Creates control for LabelController wordWrap$1LBL
		wordWrap$1LBL = new LabelController("wordWrap$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "wordWrap").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createWordWrap(this);
		// Creates control for LabelController additionalCode$1LBL
		additionalCode$1LBL = new LabelController("additionalCode$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "additionalCode").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createAdditionalCode(this);
		// Creates control for LabelController columnImage$1LBL
		columnImage$1LBL = new LabelController("columnImage$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnImage").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnImage(this);
		// Creates control for LabelController columnText$1LBL
		columnText$1LBL = new LabelController("columnText$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnText").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnText(this);
		// Creates control for LabelController columnValue$1LBL
		columnValue$1LBL = new LabelController("columnValue$1", basicItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "columnField", "columnValue").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createColumnValue(this);
	}
	public IdTextController createId(ControllerCore genCode) {
		// Creates control for IdTextController idTXT
		idTXT = new IdTextController("id", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(id$1LBL);
				setProperty("id");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return idTXT;
	}
	public NumericTextController createAlignment(ControllerCore genCode) {
		// Creates control for NumericTextController alignmentNTXT
		alignmentNTXT = new NumericTextController("alignment", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(alignment$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getAlignment();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("alignment");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setStyle(SWT.BORDER | SWT.SINGLE | SWT.RIGHT);
					getControl().setLayoutData("width min:100:150, growx");
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertTargetToModel(Object fromObject) {
				if (fromObject instanceof Number)
					return ((BigDecimal) fromObject).intValue();
				return null;
			}
		};
		return alignmentNTXT;
	}
	public XjcTextController createCellSelectionEnabled(ControllerCore genCode) {
		// Creates control for XjcTextController cellSelectionEnabledTXT
		cellSelectionEnabledTXT = new XjcTextController("cellSelectionEnabled", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(cellSelectionEnabled$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getCellSelectionEnabled();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("cellSelectionEnabled");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return cellSelectionEnabledTXT;
	}
	public ColorController createColumnBackground(ControllerCore genCode) {
		// Creates control for ColorController columnBackgroundTXT
		columnBackgroundTXT = new ColorController("columnBackground", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnBackground$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnBackground();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnBackground");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnBackgroundTXT;
	}
	public FontController createColumnFont(ControllerCore genCode) {
		// Creates control for FontController columnFontTXT
		columnFontTXT = new FontController("columnFont", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnFont$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnFont();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnFont");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnFontTXT;
	}
	public ColorController createColumnForeground(ControllerCore genCode) {
		// Creates control for ColorController columnForegroundTXT
		columnForegroundTXT = new ColorController("columnForeground", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnForeground$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnForeground();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnForeground");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnForegroundTXT;
	}
	public TextController createColumnValueType(ControllerCore genCode) {
		// Creates control for TextController columnValueTypeTXT
		columnValueTypeTXT = new TextController("columnValueType", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnValueType$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnValueType();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnValueType");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnValueTypeTXT;
	}
	public OutlineHyperlinkController createControllerClassNameGridColumnPART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController controllerClassNameGridColumnPART$1HL
		controllerClassNameGridColumnPART$1HL = new OutlineHyperlinkController("controllerClassNameGridColumnPART$1", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenClassEditorRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "gridColumn", "controllerClassName").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return controllerClassNameGridColumnPART$1HL;
	}
	public ClassTextController createControllerClassName(ControllerCore genCode) {
		// Creates control for ClassTextController controllerClassNameTXT
		controllerClassNameTXT = new ClassTextController("controllerClassName", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(controllerClassNameGridColumnPART$1HL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getControllerClassName();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("controllerClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return controllerClassNameTXT;
	}
	public FontController createHeaderFont(ControllerCore genCode) {
		// Creates control for FontController headerFontTXT
		headerFontTXT = new FontController("headerFont", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(headerFont$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getHeaderFont();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("headerFont");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return headerFontTXT;
	}
	public TextController createHeaderWordWrap(ControllerCore genCode) {
		// Creates control for TextController headerWordWrapTXT
		headerWordWrapTXT = new TextController("headerWordWrap", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(headerWordWrap$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getHeaderWordWrap();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("headerWordWrap");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return headerWordWrapTXT;
	}
	public TextController createImage(ControllerCore genCode) {
		// Creates control for TextController imageTXT
		imageTXT = new TextController("image", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(image$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getImage();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("image");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return imageTXT;
	}
	public TextController createLazyFetches(ControllerCore genCode) {
		// Creates control for TextController lazyFetchesTXT
		lazyFetchesTXT = new TextController("lazyFetches", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(lazyFetches$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getLazyFetches();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("lazyFetches");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return lazyFetchesTXT;
	}
	public TextController createLocale(ControllerCore genCode) {
		// Creates control for TextController localeTXT
		localeTXT = new TextController("locale", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(locale$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getLocale();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("locale");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return localeTXT;
	}
	public NumericTextController createMinimumWidth(ControllerCore genCode) {
		// Creates control for NumericTextController minimumWidthNTXT
		minimumWidthNTXT = new NumericTextController("minimumWidth", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(minimumWidth$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getMinimumWidth();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("minimumWidth");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getNumericText().setFormatter("######");
					setStyle(SWT.BORDER | SWT.SINGLE | SWT.RIGHT);
					getControl().setLayoutData("width min:100:150, growx");
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertTargetToModel(Object fromObject) {
				if (fromObject instanceof Number)
					return ((BigDecimal) fromObject).intValue();
				return null;
			}
		};
		return minimumWidthNTXT;
	}
	public TextController createMoveable(ControllerCore genCode) {
		// Creates control for TextController moveableTXT
		moveableTXT = new TextController("moveable", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(moveable$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getMoveable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("moveable");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return moveableTXT;
	}
	public BooleanRadioGroupController createPack(ControllerCore genCode) {
		// Creates control for BooleanRadioGroupController packRG
		packRG = new BooleanRadioGroupController("pack", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(pack$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).isPack();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("pack");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return packRG;
	}
	public XjcTextController createPattern(ControllerCore genCode) {
		// Creates control for XjcTextController patternTXT
		patternTXT = new XjcTextController("pattern", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(pattern$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getPattern();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("pattern");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return patternTXT;
	}
	public PropertyTextController createProperty(ControllerCore genCode) {
		// Creates control for PropertyTextController propertyTXT
		propertyTXT = new PropertyTextController("property", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(property$1LBL);
				setProperty("property");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return propertyTXT;
	}
	public TextController createRef(ControllerCore genCode) {
		// Creates control for TextController refTXT
		refTXT = new TextController("ref", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(ref$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getRef();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("ref");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return refTXT;
	}
	public TextController createResizeable(ControllerCore genCode) {
		// Creates control for TextController resizeableTXT
		resizeableTXT = new TextController("resizeable", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(resizeable$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getResizeable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("resizeable");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return resizeableTXT;
	}
	public RadioGroupController createSortDirection(ControllerCore genCode) {
		// Creates control for RadioGroupController sortDirectionRG
		sortDirectionRG = new RadioGroupController("sortDirection", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(sortDirection$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getSortDirection();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("sortDirection");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((SortEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(SortEnum.class.getEnumConstants());
			}
		};
		return sortDirectionRG;
	}
	public CheckBoxController createSorted(ControllerCore genCode) {
		// Creates control for CheckBoxController sortedCB
		sortedCB = new CheckBoxController("sorted", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(sorted$1LBL);
				setProperty("sorted");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return sortedCB;
	}
	public XjcTextController createStyle(ControllerCore genCode) {
		// Creates control for XjcTextController styleTXT
		styleTXT = new XjcTextController("style", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(style$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getStyle();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("style");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return styleTXT;
	}
	public XjcTextController createSummary(ControllerCore genCode) {
		// Creates control for XjcTextController summaryTXT
		summaryTXT = new XjcTextController("summary", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(summary$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getSummary();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("summary");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return summaryTXT;
	}
	public TextController createText(ControllerCore genCode) {
		// Creates control for TextController textTXT
		textTXT = new TextController("text", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(text$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getText();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("text");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return textTXT;
	}
	public TextController createToolTipText(ControllerCore genCode) {
		// Creates control for TextController toolTipTextTXT
		toolTipTextTXT = new TextController("toolTipText", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(toolTipText$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getToolTipText();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("toolTipText");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return toolTipTextTXT;
	}
	public XjcTextController createValid(ControllerCore genCode) {
		// Creates control for XjcTextController validTXT
		validTXT = new XjcTextController("valid", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(valid$1LBL);
				setProperty("valid");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return validTXT;
	}
	public NumericTextController createWidth(ControllerCore genCode) {
		// Creates control for NumericTextController widthNTXT
		widthNTXT = new NumericTextController("width", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(width$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getWidth();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("width");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setStyle(SWT.BORDER | SWT.SINGLE | SWT.RIGHT);
					getControl().setLayoutData("width min:100:150, growx");
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertTargetToModel(Object fromObject) {
				if (fromObject instanceof Number)
					return ((BigDecimal) fromObject).intValue();
				return null;
			}
		};
		return widthNTXT;
	}
	public TextController createWordWrap(ControllerCore genCode) {
		// Creates control for TextController wordWrapTXT
		wordWrapTXT = new TextController("wordWrap", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(wordWrap$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getWordWrap();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("wordWrap");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return wordWrapTXT;
	}
	public CodeTextController createAdditionalCode(ControllerCore genCode) {
		// Creates control for CodeTextController additionalCodeTXT
		additionalCodeTXT = new CodeTextController("additionalCode", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(additionalCode$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getAdditionalCode();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("additionalCode");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return additionalCodeTXT;
	}
	public CodeTextController createColumnImage(ControllerCore genCode) {
		// Creates control for CodeTextController columnImageTXT
		columnImageTXT = new CodeTextController("columnImage", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnImage$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnImage();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnImage");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnImageTXT;
	}
	public CodeTextController createColumnText(ControllerCore genCode) {
		// Creates control for CodeTextController columnTextTXT
		columnTextTXT = new CodeTextController("columnText", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnText$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnText();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnText");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnTextTXT;
	}
	public CodeTextController createColumnValue(ControllerCore genCode) {
		// Creates control for CodeTextController columnValueTXT
		columnValueTXT = new CodeTextController("columnValue", getParentController(basicItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(columnValue$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((GridColumnType) getEntity().getBean()).getColumnValue();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("columnValue");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return columnValueTXT;
	}
}