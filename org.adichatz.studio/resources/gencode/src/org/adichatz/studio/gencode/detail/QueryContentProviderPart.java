/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Mon Jul 06 18:35:05 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.generator.xjc.QueryContentProviderType;
import org.adichatz.studio.xjc.controller.AdiResourceUriTextController;
import org.adichatz.studio.xjc.controller.BooleanRadioGroupController;
import org.adichatz.studio.xjc.controller.ClassTextController;
import org.adichatz.studio.xjc.controller.OutlineHyperlinkController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenClassEditorRunnable;
import org.adichatz.studio.xjc.editor.runnable.OpenResourceURIRunnable;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/QueryContentProviderPart")
public class QueryContentProviderPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController id$1LBL.
	private LabelController id$1LBL;
	// the TextController idTXT.
	private TextController idTXT;
	// the OutlineHyperlinkController adiResourceURIQueryContentProviderPART$1HL.
	private OutlineHyperlinkController adiResourceURIQueryContentProviderPART$1HL;
	// the AdiResourceUriTextController adiResourceURITXT.
	private AdiResourceUriTextController adiResourceURITXT;
	// the OutlineHyperlinkController comparatorClassNameQueryContentProviderPART$1HL.
	private OutlineHyperlinkController comparatorClassNameQueryContentProviderPART$1HL;
	// the ClassTextController comparatorClassNameTXT.
	private ClassTextController comparatorClassNameTXT;
	// the LabelController optional$1LBL.
	private LabelController optional$1LBL;
	// the BooleanRadioGroupController optionalRG.
	private BooleanRadioGroupController optionalRG;
	// the LabelController pluginKey$1LBL.
	private LabelController pluginKey$1LBL;
	// the TextController pluginKeyTXT.
	private TextController pluginKeyTXT;
	// the LabelController preferenceURI$1LBL.
	private LabelController preferenceURI$1LBL;
	// the TextController preferenceURITXT.
	private TextController preferenceURITXT;
	// the LabelController type$1LBL.
	private LabelController type$1LBL;
	// the TextController typeTXT.
	private TextController typeTXT;
	// the LabelController value$1LBL.
	private LabelController value$1LBL;
	// the TextController valueTXT.
	private TextController valueTXT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new QueryContentProviderPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public QueryContentProviderPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part QueryContentProviderPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public QueryContentProviderPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController id$1LBL
		id$1LBL = new LabelController("id$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "element", "id").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createId(this);
		createAdiResourceURIQueryContentProviderPART$1(this);
		createAdiResourceURI(this);
		createComparatorClassNameQueryContentProviderPART$1(this);
		createComparatorClassName(this);
		// Creates control for LabelController optional$1LBL
		optional$1LBL = new LabelController("optional$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "param", "optional").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createOptional(this);
		// Creates control for LabelController pluginKey$1LBL
		pluginKey$1LBL = new LabelController("pluginKey$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryContentProvider", "pluginKey").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPluginKey(this);
		// Creates control for LabelController preferenceURI$1LBL
		preferenceURI$1LBL = new LabelController("preferenceURI$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryContentProvider", "preferenceURI").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPreferenceURI(this);
		// Creates control for LabelController type$1LBL
		type$1LBL = new LabelController("type$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "param", "type").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createType(this);
		// Creates control for LabelController value$1LBL
		value$1LBL = new LabelController("value$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "param", "value").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createValue(this);
	}
	public TextController createId(ControllerCore genCode) {
		// Creates control for TextController idTXT
		idTXT = new TextController("id", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(id$1LBL);
				setProperty("id");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return idTXT;
	}
	public OutlineHyperlinkController createAdiResourceURIQueryContentProviderPART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController adiResourceURIQueryContentProviderPART$1HL
		adiResourceURIQueryContentProviderPART$1HL = new OutlineHyperlinkController("adiResourceURIQueryContentProviderPART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((QueryContentProviderType) parentController.getEntity().getBean()).getAdiResourceURI();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryContentProvider", "adiResourceURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURIQueryContentProviderPART$1HL;
	}
	public AdiResourceUriTextController createAdiResourceURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController adiResourceURITXT
		adiResourceURITXT = new AdiResourceUriTextController("adiResourceURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(adiResourceURIQueryContentProviderPART$1HL);
				setProperty("adiResourceURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURITXT;
	}
	public OutlineHyperlinkController createComparatorClassNameQueryContentProviderPART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController comparatorClassNameQueryContentProviderPART$1HL
		comparatorClassNameQueryContentProviderPART$1HL = new OutlineHyperlinkController("comparatorClassNameQueryContentProviderPART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenClassEditorRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryContentProvider", "comparatorClassName").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return comparatorClassNameQueryContentProviderPART$1HL;
	}
	public ClassTextController createComparatorClassName(ControllerCore genCode) {
		// Creates control for ClassTextController comparatorClassNameTXT
		comparatorClassNameTXT = new ClassTextController("comparatorClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(comparatorClassNameQueryContentProviderPART$1HL);
				setProperty("comparatorClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return comparatorClassNameTXT;
	}
	public BooleanRadioGroupController createOptional(ControllerCore genCode) {
		// Creates control for BooleanRadioGroupController optionalRG
		optionalRG = new BooleanRadioGroupController("optional", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(optional$1LBL);
				setProperty("optional");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return optionalRG;
	}
	public TextController createPluginKey(ControllerCore genCode) {
		// Creates control for TextController pluginKeyTXT
		pluginKeyTXT = new TextController("pluginKey", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(pluginKey$1LBL);
				setProperty("pluginKey");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return pluginKeyTXT;
	}
	public TextController createPreferenceURI(ControllerCore genCode) {
		// Creates control for TextController preferenceURITXT
		preferenceURITXT = new TextController("preferenceURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(preferenceURI$1LBL);
				setProperty("preferenceURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return preferenceURITXT;
	}
	public TextController createType(ControllerCore genCode) {
		// Creates control for TextController typeTXT
		typeTXT = new TextController("type", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(type$1LBL);
				setProperty("type");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return typeTXT;
	}
	public TextController createValue(ControllerCore genCode) {
		// Creates control for TextController valueTXT
		valueTXT = new TextController("value", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(value$1LBL);
				setProperty("value");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return valueTXT;
	}
}