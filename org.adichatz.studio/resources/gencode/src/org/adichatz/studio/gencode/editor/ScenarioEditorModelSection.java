/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue May 12 15:04:25 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import java.util.Arrays;
import java.util.List;
import java.util.function.BooleanSupplier;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.APageController;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ButtonController;
import org.adichatz.engine.controller.action.HelpButtonController;
import org.adichatz.engine.controller.collection.CompositeController;
import org.adichatz.engine.controller.collection.GroupController;
import org.adichatz.engine.controller.collection.SectionController;
import org.adichatz.engine.controller.field.FileTextController;
import org.adichatz.engine.controller.field.HyperlinkController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.validation.AValidator;
import org.adichatz.engine.validation.EntityInjection;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.engine.widgets.supplement.AHyperlinkRunnable;
import org.adichatz.generator.common.GeneratorUtil;
import org.adichatz.generator.wrapper.ScenarioTreeWrapper;
import org.adichatz.generator.xjc.ModelPartType;
import org.adichatz.generator.xjc.ModelProcurementEnum;
import org.adichatz.generator.xjc.ScenarioTree;
import org.adichatz.studio.util.StudioUtil;
import org.adichatz.studio.xjc.controller.ASComboController;
import org.adichatz.studio.xjc.controller.DatasourceComboController;
import org.adichatz.studio.xjc.custom.ClassNameValidator;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.ui.forms.IFormColors;
import org.eclipse.ui.forms.widgets.Section;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/ScenarioEditor")
public class ScenarioEditorModelSection extends EntityManagerCore {
	// the CompositeController compositeWrapper$$3CMPS.
	protected CompositeController compositeWrapper$$3CMPS;
	// the CompositeController compositeWrapper$$4CMPS.
	protected CompositeController compositeWrapper$$4CMPS;
	// the HyperlinkController datasourceHLHL.
	private HyperlinkController datasourceHLHL;
	// the DatasourceComboController connectorDataSourceCMB.
	private DatasourceComboController connectorDataSourceCMB;
	// the ButtonController testConnectionBTTN.
	private ButtonController testConnectionBTTN;
	// the LabelController customFileLBLLBL.
	private LabelController customFileLBLLBL;
	// the FileTextController customFileNameFT.
	private FileTextController customFileNameFT;
	// the GroupController ejbGroupGRP.
	protected GroupController ejbGroupGRP;
	// the HyperlinkController applicationSeverHLHL.
	private HyperlinkController applicationSeverHLHL;
	// the ASComboController connectorASVersionCMB.
	private ASComboController connectorASVersionCMB;
	// the LabelController dataSourceUnit$1LBL.
	private LabelController dataSourceUnit$1LBL;
	// the TextController dataSourceUnitTXT.
	private TextController dataSourceUnitTXT;
	// the LabelController persistenceManagerClassName$1LBL.
	private LabelController persistenceManagerClassName$1LBL;
	// the TextController persistenceManagerClassNameTXT.
	private TextController persistenceManagerClassNameTXT;
	// the LabelController lockManagerClassName$1LBL.
	private LabelController lockManagerClassName$1LBL;
	// the TextController lockManagerClassNameTXT.
	private TextController lockManagerClassNameTXT;
	// the CompositeController compositeWrapper$$5CMPS.
	protected CompositeController compositeWrapper$$5CMPS;
	// the LabelController modelPackageName$1LBL.
	private LabelController modelPackageName$1LBL;
	// the TextController modelPackageNameTXT.
	private TextController modelPackageNameTXT;
	// the HelpButtonController modelPackageHlpHB.
	private HelpButtonController modelPackageHlpHB;
	// the LabelController modelProcurement$1LBL.
	private LabelController modelProcurement$1LBL;
	// the RadioGroupController modelProcurementRG.
	private RadioGroupController modelProcurementRG;
	// the HelpButtonController pojoProcurementHlpHB.
	private HelpButtonController pojoProcurementHlpHB;
	// the GroupController asGroupGRP.
	protected GroupController asGroupGRP;
	// the LabelController ejbFileName$1LBL.
	private LabelController ejbFileName$1LBL;
	// the TextController ejbFileNameTXT.
	private TextController ejbFileNameTXT;
	// the LabelController jndi$1LBL.
	private LabelController jndi$1LBL;
	// the TextController jndiTXT.
	private TextController jndiTXT;
	// the LabelController dataSourceFileName$1LBL.
	private LabelController dataSourceFileName$1LBL;
	// the TextController dataSourceFileNameTXT.
	private TextController dataSourceFileNameTXT;
	/**
	 * Creates ScenarioEditorModelSection.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public ScenarioEditorModelSection(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new SectionController("modelSection", parentController, this) {
				@Override
				public void afterInstantiateController() {
					breakInjection = true;
					super.afterInstantiateController();
				}
				@Override
				public void initialize() {
					BooleanSupplier evaluatorVALID;
					evaluatorVALID = new BooleanSupplier() {
						public boolean getAsBoolean() {
							return false;
						}
					};
					addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
					super.initialize();
				}
				@Override
				public void createControl() {
					if (isValid()) {
						setStyle(Section.TWISTIE | Section.TITLE_BAR | Section.EXPANDED);
					}
					super.createControl();
					if (isValid()) {
						getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.model.part"));
						getComposite().setLayout(new MigLayout("wrap 1","fill,grow",null));
						getControl().setLayoutData("w 0:n:n, h 0:n:n");
					}
				}
				@Override
				public EntityInjection getEntityInjection() {
					if (null == entityInjection)
						entityInjection = new EntityInjection(this, getDataAccess().getDataCache().fetchEntity(((ScenarioTree) parentController.getEntity().getBean()).getGenerationScenario().getModelPart()));
					return entityInjection;
				}
			};
			createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for CompositeController compositeWrapper$$3CMPS
		compositeWrapper$$3CMPS = new CompositeController("compositeWrapper$$3", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 1, ins 0","[fill,grow]",null));
				}
			}
		};
		// Creates control for CompositeController compositeWrapper$$4CMPS
		compositeWrapper$$4CMPS = new CompositeController("compositeWrapper$$4", compositeWrapper$$3CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 3, ins 0","[fill, align right]5[fill,grow][]",null));
				}
			}
		};
		createDatasourceHL(this);
		createConnectorDataSource(this);
		// Creates control for ButtonController testConnectionBTTN
		testConnectionBTTN = new ButtonController("testConnection", compositeWrapper$$4CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.testConnection"));
				}
			}
			@Override
			public void synchronize() {
				super.synchronize();
				if (isValid()) {
					SelectionAdapter testConnectionLSTN$0 = new SelectionAdapter() {
						@Override
						public void widgetSelected(SelectionEvent event) {
							((DatasourceComboController) getFromRegister("connectorDataSource")).testConnection();
						}
					};
					getControl().addSelectionListener(testConnectionLSTN$0);
				}
			}
		};
		// Creates control for LabelController customFileLBLLBL
		customFileLBLLBL = new LabelController("customFileLBL", compositeWrapper$$4CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.customization.file"));
				}
			}
		};
		createCustomFileName(this);
		// Creates control for GroupController ejbGroupGRP
		ejbGroupGRP = new GroupController("ejbGroup", compositeWrapper$$3CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.EJB.group"));
					getComposite().setLayout(new MigLayout("wrap 4","[align right]10[fill,grow]20[align right]10[fill,grow]",null));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
				}
			}
		};
		createApplicationSeverHL(this);
		createConnectorASVersion(this);
		// Creates control for LabelController dataSourceUnit$1LBL
		dataSourceUnit$1LBL = new LabelController("dataSourceUnit$1", ejbGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "dataSourceUnit").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createDataSourceUnit(this);
		// Creates control for LabelController persistenceManagerClassName$1LBL
		persistenceManagerClassName$1LBL = new LabelController("persistenceManagerClassName$1", ejbGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "persistenceManagerClassName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPersistenceManagerClassName(this);
		// Creates control for LabelController lockManagerClassName$1LBL
		lockManagerClassName$1LBL = new LabelController("lockManagerClassName$1", ejbGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "lockManagerClassName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLockManagerClassName(this);
		// Creates control for CompositeController compositeWrapper$$5CMPS
		compositeWrapper$$5CMPS = new CompositeController("compositeWrapper$$5", compositeWrapper$$3CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 3, ins 0","[align right]10[fill,grow][]",null));
				}
			}
		};
		// Creates control for LabelController modelPackageName$1LBL
		modelPackageName$1LBL = new LabelController("modelPackageName$1", compositeWrapper$$5CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "modelPackageName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createModelPackageName(this);
		// Creates control for HelpButtonController modelPackageHlpHB
		modelPackageHlpHB = new HelpButtonController("modelPackageHlp", compositeWrapper$$5CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(AdichatzApplication.getInstance().getFormToolkit().getRegisteredImage("IMG_HELP"));
					setHelpLabel(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "specify.modelPackageName"));
					setHelpSpecify(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "specify.modelPackageName"));
					setHelpMessage(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "modelPackageName.message"));
				}
			}
		};
		// Creates control for LabelController modelProcurement$1LBL
		modelProcurement$1LBL = new LabelController("modelProcurement$1", compositeWrapper$$5CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "modelProcurement").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createModelProcurement(this);
		// Creates control for HelpButtonController pojoProcurementHlpHB
		pojoProcurementHlpHB = new HelpButtonController("pojoProcurementHlp", compositeWrapper$$5CMPS, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImage(AdichatzApplication.getInstance().getFormToolkit().getRegisteredImage("IMG_HELP"));
					setHelpLabel(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "specify.pojo.procurement"));
					setHelpSpecify(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "specify.pojo.procurement"));
					setHelpMessage(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "pojo.procurement.message"));
				}
			}
		};
		// Creates control for GroupController asGroupGRP
		asGroupGRP = new GroupController("asGroup", coreController, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return false;
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.AS.group"));
					getComposite().setLayout(new MigLayout("wrap 4, hidemode 3","[align right]10[fill,grow]20[align right]10[fill,grow]",null));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
				}
			}
		};
		// Creates control for LabelController ejbFileName$1LBL
		ejbFileName$1LBL = new LabelController("ejbFileName$1", asGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "ejbFileName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEjbFileName(this);
		// Creates control for LabelController jndi$1LBL
		jndi$1LBL = new LabelController("jndi$1", asGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "jndi").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createJndi(this);
		// Creates control for LabelController dataSourceFileName$1LBL
		dataSourceFileName$1LBL = new LabelController("dataSourceFileName$1", asGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "dataSourceFileName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createDataSourceFileName(this);
	}
	public HyperlinkController createDatasourceHL(ControllerCore genCode) {
		// Creates control for HyperlinkController datasourceHLHL
		datasourceHLHL = new HyperlinkController("datasourceHL", getParentController(compositeWrapper$$4CMPS), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new AHyperlinkRunnable(this){
						@Override
						public void run() {
							((DatasourceComboController) getFromRegister("connectorDataSource")).openDataSourceWindow();
						}
					};
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "connectorDataSource"));
				}
			}
		};
		return datasourceHLHL;
	}
	public DatasourceComboController createConnectorDataSource(ControllerCore genCode) {
		// Creates control for DatasourceComboController connectorDataSourceCMB
		connectorDataSourceCMB = new DatasourceComboController("connectorDataSource", getParentController(compositeWrapper$$4CMPS), genCode) {
			@Override
			public void initialize() {
				setProperty("connectorDataSource");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.READ_ONLY);
				}
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					dataReferenceManager = new DataReferenceManager(this);
				}
			}
		};
		return connectorDataSourceCMB;
	}
	public FileTextController createCustomFileName(ControllerCore genCode) {
		// Creates control for FileTextController customFileNameFT
		customFileNameFT = new FileTextController("customFileName", getParentController(compositeWrapper$$4CMPS), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setFilterExtension("*.xml");
					getControl().setLayoutData("span 2");
					addValidator(new AValidator(this, "invalidCustomFile") {
						private boolean hasError() {
							Object validation = StudioUtil.validateCustomizationFile(getControl().getValue(), null);
							return null != validation && validation instanceof String;
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.custom.invalid", getValue()));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
				}
			}
		};
		return customFileNameFT;
	}
	public HyperlinkController createApplicationSeverHL(ControllerCore genCode) {
		// Creates control for HyperlinkController applicationSeverHLHL
		applicationSeverHLHL = new HyperlinkController("applicationSeverHL", getParentController(ejbGroupGRP), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new AHyperlinkRunnable(this){
						@Override
						public void run() {
							((ASComboController) getFromRegister("connectorASVersion")).openApplicationServerWindow();
						}
					};
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "connectorASVersion"));
				}
			}
		};
		return applicationSeverHLHL;
	}
	public ASComboController createConnectorASVersion(ControllerCore genCode) {
		// Creates control for ASComboController connectorASVersionCMB
		connectorASVersionCMB = new ASComboController("connectorASVersion", getParentController(ejbGroupGRP), genCode) {
			@Override
			public void initialize() {
				setProperty("connectorASVersion");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.READ_ONLY);
				}
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					dataReferenceManager = new DataReferenceManager(this);
				}
			}
		};
		return connectorASVersionCMB;
	}
	public TextController createDataSourceUnit(ControllerCore genCode) {
		// Creates control for TextController dataSourceUnitTXT
		dataSourceUnitTXT = new TextController("dataSourceUnit", getParentController(ejbGroupGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(dataSourceUnit$1LBL);
				setProperty("dataSourceUnit");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return dataSourceUnitTXT;
	}
	public TextController createPersistenceManagerClassName(ControllerCore genCode) {
		// Creates control for TextController persistenceManagerClassNameTXT
		persistenceManagerClassNameTXT = new TextController("persistenceManagerClassName", getParentController(ejbGroupGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(persistenceManagerClassName$1LBL);
				setProperty("persistenceManagerClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new ClassNameValidator(this, "invalidClassName"));
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return persistenceManagerClassNameTXT;
	}
	public TextController createLockManagerClassName(ControllerCore genCode) {
		// Creates control for TextController lockManagerClassNameTXT
		lockManagerClassNameTXT = new TextController("lockManagerClassName", getParentController(ejbGroupGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(lockManagerClassName$1LBL);
				setProperty("lockManagerClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new ClassNameValidator(this, "invalidClassName"));
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return lockManagerClassNameTXT;
	}
	public TextController createModelPackageName(ControllerCore genCode) {
		// Creates control for TextController modelPackageNameTXT
		modelPackageNameTXT = new TextController("modelPackageName", getParentController(compositeWrapper$$5CMPS), genCode) {
			@Override
			public void initialize() {
				setLinkedController(modelPackageName$1LBL);
				setProperty("modelPackageName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new AValidator(this, "incorrectPackageName") {
						private boolean hasError() {
							String modelPackageName = (String) getValue();
							if (null != modelPackageName) {
							    ScenarioTreeWrapper scenarioTree = (ScenarioTreeWrapper) ((APageController) genCode.getFromRegister("modelPage")).getEntity().getBean();
							    String packageName = GeneratorUtil.getParamValue(scenarioTree.getParams(), "plugin.package");
							    return modelPackageName.equals(packageName) || modelPackageName.equals(packageName.concat(".ejb"));
							}
							return  false;													
																
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.newProject.invalidPackageName"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
					addValidator(new AValidator(this, "invalidPackageName") {
						private boolean hasError() {
							String modelPackageName = (String) getValue();
							if (null != modelPackageName) {
							    return !ClassNameValidator.PACKAGE_PATTERN.matcher(modelPackageName).matches()  || ClassNameValidator.JAVA_KEYWORDS.contains(modelPackageName);
							}
							return false;
																
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "invalid.modelPackageName"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return modelPackageNameTXT;
	}
	public RadioGroupController createModelProcurement(ControllerCore genCode) {
		// Creates control for RadioGroupController modelProcurementRG
		modelProcurementRG = new RadioGroupController("modelProcurement", getParentController(compositeWrapper$$5CMPS), genCode) {
			@Override
			public void initialize() {
				setLinkedController(modelProcurement$1LBL);
				setProperty("modelProcurement");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return AdichatzApplication.getInstance().getMessageBundle("adi://org.adichatz.studio/./modelPart","procurement." + ((ModelProcurementEnum) element).name());
						}
					};
				}
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 2","[]",null));
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					dataReferenceManager = new DataReferenceManager(this);
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(ModelProcurementEnum.values());
											
			}
		};
		return modelProcurementRG;
	}
	public TextController createEjbFileName(ControllerCore genCode) {
		// Creates control for TextController ejbFileNameTXT
		ejbFileNameTXT = new TextController("ejbFileName", getParentController(asGroupGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(ejbFileName$1LBL);
				setProperty("ejbFileName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new AValidator(this, "EJBFileName") {
						private boolean hasError() {
							return null != getValue() && !getControl().getText().matches(".*\\..ar");
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.invalid.ejb"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
				}
			}
		};
		return ejbFileNameTXT;
	}
	public TextController createJndi(ControllerCore genCode) {
		// Creates control for TextController jndiTXT
		jndiTXT = new TextController("jndi", getParentController(asGroupGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(jndi$1LBL);
				setProperty("jndi");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new AValidator(this, "mandatoryField") {
						private boolean hasError() {
							return null == getValue() && !"jse".equals(((ASComboController) getFromRegister("connectorASVersion")).getValue());
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "mandatoryField"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
				}
			}
		};
		return jndiTXT;
	}
	public TextController createDataSourceFileName(ControllerCore genCode) {
		// Creates control for TextController dataSourceFileNameTXT
		dataSourceFileNameTXT = new TextController("dataSourceFileName", getParentController(asGroupGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(dataSourceFileName$1LBL);
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return !((ModelPartType) getEntity().getBean()).getConnectorASVersion().startsWith("wildfly") && !((ModelPartType) getEntity().getBean()).getConnectorASVersion().startsWith("jboss-eap-6");
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				setProperty("dataSourceFileName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new AValidator(this, "DatasourceFileName") {
						private boolean hasError() {
							return !((ModelPartType) getEntity().getBean()).getConnectorASVersion().startsWith("jboss-7.1") && !((ModelPartType) getEntity().getBean()).getConnectorASVersion().startsWith("wildfly") && !((ModelPartType) getEntity().getBean()).getConnectorASVersion().startsWith("jboss-eap-6") && !getControl().getText().endsWith("-ds.xml");
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.invalid.xml"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
				}
			}
		};
		return dataSourceFileNameTXT;
	}
}