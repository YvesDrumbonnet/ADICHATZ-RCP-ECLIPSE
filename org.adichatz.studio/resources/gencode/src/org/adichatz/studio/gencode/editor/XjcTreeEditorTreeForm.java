/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Mon Jul 06 18:35:51 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.action.AAction;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.action.ActionController;
import org.adichatz.engine.controller.action.SeparatorController;
import org.adichatz.engine.controller.collection.ManagedToolBarController;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AFormPageCore;
import org.adichatz.engine.core.ATreeCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.indigo.controller.LegacyFormPageController;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.studio.xjc.controller.XjcTreeController;
import org.adichatz.studio.xjc.data.XjcBindingService;
import org.adichatz.studio.xjc.editor.AStudioFormEditor;
import org.adichatz.studio.xjc.editor.action.CollapseTreeAction;
import org.adichatz.studio.xjc.editor.action.CompareFilesActionController;
import org.adichatz.studio.xjc.editor.action.ErrorStudioAction;
import org.adichatz.studio.xjc.editor.action.ExpandTreeAction;
import org.adichatz.studio.xjc.editor.action.OpenJavaFileMAController;
import org.adichatz.studio.xjc.editor.action.SwitchToActiveFileActionController;
import org.eclipse.jface.viewers.TreeSelection;
import org.eclipse.swt.SWT;

@AdiResourceURI(URI = "adi://org.adichatz.studio/editor/XjcTreeEditor")
public class XjcTreeEditorTreeForm extends AFormPageCore {
	// the ActionController expandTreeActionACT.
	private ActionController expandTreeActionACT;

	// the ActionController collapseTreeActionACT.
	private ActionController collapseTreeActionACT;

	// the SeparatorController separatorWrapper$$0SPR.
	private SeparatorController separatorWrapper$$0SPR;

	// the SwitchToActiveFileActionController switchToActiveFileActionACT.
	private SwitchToActiveFileActionController switchToActiveFileActionACT;

	// the CompareFilesActionController compareFilesActionACT.
	private CompareFilesActionController compareFilesActionACT;

	// the OpenJavaFileMAController openJavaFileMenuActionMACT.
	private OpenJavaFileMAController openJavaFileMenuActionMACT;

	// the SeparatorController separatorWrapper$$1SPR.
	private SeparatorController separatorWrapper$$1SPR;

	// the ActionController refreshFromXmlFileActionACT.
	private ActionController refreshFromXmlFileActionACT;

	// the ActionController savePageActionACT.
	private ActionController savePageActionACT;

	// the ActionController errorStudioActionACT.
	private ActionController errorStudioActionACT;

	// the LegacyFormPageController treeFormFP.
	protected LegacyFormPageController treeFormFP;

	protected ATreeCore xjcTreeEditorXjcTree;

	@Inject
	protected AdiFormToolkit toolkit;

	/**
	 * Creates the formPage XjcTreeEditorTreeForm.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param parentController
	 *            The parent controller
	 * @param managedForm
	 *            The managed form
	 */
	public XjcTreeEditorTreeForm(final AdiContext context, IContainerController parentController) {
		super(context);
		this.parentController = parentController;
		createContents();
		ManagedToolBarController mtoolBarCtler = new ManagedToolBarController("pageToolBar", coreController, this);
		// Creates control for ActionController expandTreeActionACT
		expandTreeActionACT = new ActionController("expandTreeAction", mtoolBarCtler, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action = new ExpandTreeAction() {
						@Override
						public void init() {
							super.init();
							setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_DEVELOP"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio",
									"studio.editor.expandTree"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_DEVELOP"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio",
							"adichatzStudio", "studio.editor.expandTree"));
				}
			}
		};
		// Creates control for ActionController collapseTreeActionACT
		collapseTreeActionACT = new ActionController("collapseTreeAction", mtoolBarCtler, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					action = new CollapseTreeAction() {
						@Override
						public void init() {
							super.init();
							setImageDescriptor(AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.studio",
									"IMG_COLLAPSE.gif"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio",
									"studio.editor.collapseTree"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(
							AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.studio", "IMG_COLLAPSE.gif"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio",
							"adichatzStudio", "studio.editor.collapseTree"));
				}
			}
		};
		// Creates control for SeparatorController separatorWrapper$$0SPR
		separatorWrapper$$0SPR = new SeparatorController("separatorWrapper$$0", mtoolBarCtler, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.NONE);
				}
				super.createControl();
			}
		};
		// Creates control for SwitchToActiveFileActionController switchToActiveFileActionACT
		switchToActiveFileActionACT = new SwitchToActiveFileActionController("switchToActiveFileAction", mtoolBarCtler, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isEditable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				super.initialize();
			}

			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(
							AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.studio", "IMG_SWITCH.png"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio",
							"adichatzStudio", "studio.xjcEditor.switchToActiveFile"));
				}
			}
		};
		// Creates control for CompareFilesActionController compareFilesActionACT
		compareFilesActionACT = new CompareFilesActionController("compareFilesAction", mtoolBarCtler, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isEditable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				super.initialize();
			}

			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(
							AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.studio", "IMG_COMPARE.png"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio",
							"adichatzStudio", "studio.xjcEditor.compareCustomizedAndGeneratedFiles"));
				}
			}
		};
		// Creates control for OpenJavaFileMAController openJavaFileMenuActionMACT
		openJavaFileMenuActionMACT = new OpenJavaFileMAController("openJavaFileMenuAction", mtoolBarCtler, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isEditable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				super.initialize();
			}

			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(AdichatzApplication.getInstance().getImageDescriptor("org.adichatz.studio",
							"IMG_GENERATE_JAVA_FILES.png"));
				}
			}
		};
		// Creates control for SeparatorController separatorWrapper$$1SPR
		separatorWrapper$$1SPR = new SeparatorController("separatorWrapper$$1", mtoolBarCtler, this) {
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.NONE);
				}
				super.createControl();
			}
		};
		// Creates control for ActionController refreshFromXmlFileActionACT
		refreshFromXmlFileActionACT = new ActionController("refreshFromXmlFileAction", mtoolBarCtler, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isEditable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				super.initialize();
			}

			@Override
			public void createControl() {
				if (isValid()) {
					action = new AAction() {
						@Override
						public void runAction() {
							((XjcBindingService) getBindingService()).getEditor().fileChanged();
							((XjcTreeController) getFromRegister("xjcTree")).getViewer().setSelection(TreeSelection.EMPTY);
						}

						@Override
						public void init() {
							super.init();
							setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_REFRESH"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio",
									"studio.editor.refreshFormPage"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_REFRESH"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio",
							"adichatzStudio", "studio.editor.refreshFormPage"));
				}
			}
		};
		// Creates control for ActionController savePageActionACT
		savePageActionACT = new ActionController("savePageAction", mtoolBarCtler, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isEditable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return false;
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}

			@Override
			public void createControl() {
				if (isValid()) {
					action = new AAction() {
						@Override
						public void runAction() {
							((AStudioFormEditor) genCode.getContext().getRootCore().getController()).doSave();
						}

						@Override
						public void init() {
							super.init();
							setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_SAVE"));
							setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio",
									"studio.editor.save"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setImageDescriptor(toolkit.getRegisteredImageDescriptor("IMG_SAVE"));
					getControl().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio",
							"adichatzStudio", "studio.editor.save"));
				}
			}
		};
		// Creates control for ActionController errorStudioActionACT
		errorStudioActionACT = new ActionController("errorStudioAction", mtoolBarCtler, this) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorVALID;
				evaluatorVALID = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return isEditable();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.VALID, evaluatorVALID));
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return false;
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}

			@Override
			public void createControl() {
				if (isValid()) {
					action = new ErrorStudioAction() {
						@Override
						public void init() {
							super.init();
							setToolTipText(
									AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "error"));
						}
					};
					action.setActionController(this);
				}
				super.createControl();
				if (isValid()) {
					getControl().setToolTipText(
							AdichatzApplication.getInstance().getMessage("org.adichatz.engine", "adichatzEngine", "error"));
				}
			}
		};
	}

	/**
	 * Create contents for FormPage
	 */
	public void createContents() {
		// Creates control for LegacyFormPageController treeFormFP
		treeFormFP = new LegacyFormPageController("treeForm", parentController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().getForm().setText(((String) context.getParam("TITLE")));
					getComposite().setLayout(new MigLayout("wrap", "[grow,fill]", "[grow,fill]"));
				}
			}
		};
		coreController = treeFormFP;

		// loads and instantiates the class XjcTreeEditorXjcTree.
		xjcTreeEditorXjcTree = new XjcTreeEditorXjcTree(context, treeFormFP);
	}

	//* *****************
	//* Additional code *
	//*******************
	boolean isEditable() {
		return ((AStudioFormEditor) context.getXmlTreeGenCode().getController()).isEditable();
	}
}