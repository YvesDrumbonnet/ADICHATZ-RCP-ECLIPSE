/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:53:38 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.Arrays;
import java.util.List;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.cache.IEntity;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.HyperlinkController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.listener.AControlListener;
import org.adichatz.engine.listener.AEntityListener;
import org.adichatz.engine.listener.AdiEntityEvent;
import org.adichatz.engine.listener.AdiEvent;
import org.adichatz.engine.listener.IEventType;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.wrapper.QueryTreeWrapper;
import org.adichatz.generator.xjc.QueryTypeEnum;
import org.adichatz.studio.xjc.controller.AdiResourceUriTextController;
import org.adichatz.studio.xjc.controller.CodeTextController;
import org.adichatz.studio.xjc.controller.SuffixIdTextController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.controller.XjcTextController;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenResourceURIRunnable;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/QueryTreePart")
public class QueryTreePart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the HyperlinkController entityURIQueryTreePART$1HL.
	private HyperlinkController entityURIQueryTreePART$1HL;
	// the AdiResourceUriTextController entityURITXT.
	private AdiResourceUriTextController entityURITXT;
	// the LabelController suffix$1LBL.
	private LabelController suffix$1LBL;
	// the SuffixIdTextController suffixTXT.
	private SuffixIdTextController suffixTXT;
	// the LabelController queryType$1LBL.
	private LabelController queryType$1LBL;
	// the RadioGroupController queryTypeRG.
	private RadioGroupController queryTypeRG;
	// the LabelController sqlClause$1LBL.
	private LabelController sqlClause$1LBL;
	// the CodeTextController sqlClauseTXT.
	private CodeTextController sqlClauseTXT;
	// the LabelController whereClause$1LBL.
	private LabelController whereClause$1LBL;
	// the CodeTextController whereClauseTXT.
	private CodeTextController whereClauseTXT;
	// the LabelController lazyFetches$1LBL.
	private LabelController lazyFetches$1LBL;
	// the TextController lazyFetchesTXT.
	private TextController lazyFetchesTXT;
	// the LabelController valid$1LBL.
	private LabelController valid$1LBL;
	// the XjcTextController validTXT.
	private XjcTextController validTXT;
	/**
	 * Instantiates a new QueryTreePart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public QueryTreePart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part QueryTreePart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public QueryTreePart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void initialize() {
				AControlListener itemCompositeLSTN$0 = new AControlListener(null, IEventType.AFTER_SYNCHRONIZE) {
					@Override
					public void handleEvent(AdiEvent event) {
						displaySQLorWhereClause();
					}
				};
				addListener(itemCompositeLSTN$0);
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2, hidemode 3","[align right]10[fill,grow]","[]"));
				}
			}
			@Override
			public void synchronize() {
				super.synchronize();
				if (isValid()) {
					AEntityListener itemCompositeLSTN$1 = new AEntityListener(itemCompositeSCLC, IEventType.AFTER_PROPERTY_CHANGE) {
						@Override
						public void handleEntityEvent(AdiEntityEvent event) {
							displaySQLorWhereClause();
						}
					};
					AEntityListener itemCompositeLSTN$2 = new AEntityListener(itemCompositeSCLC, IEventType.POST_REFRESH) {
						@Override
						public void handleEntityEvent(AdiEntityEvent event) {
							displaySQLorWhereClause();
						}
					};
				}
			}
		};
		createEntityURIQueryTreePART$1(this);
		createEntityURI(this);
		// Creates control for LabelController suffix$1LBL
		suffix$1LBL = new LabelController("suffix$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryPart", "suffix").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSuffix(this);
		// Creates control for LabelController queryType$1LBL
		queryType$1LBL = new LabelController("queryType$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryTree", "queryType").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createQueryType(this);
		// Creates control for LabelController sqlClause$1LBL
		sqlClause$1LBL = new LabelController("sqlClause$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryTree", "sqlClause").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSqlClause(this);
		// Creates control for LabelController whereClause$1LBL
		whereClause$1LBL = new LabelController("whereClause$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryTree", "whereClause").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createWhereClause(this);
		// Creates control for LabelController lazyFetches$1LBL
		lazyFetches$1LBL = new LabelController("lazyFetches$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryTree", "lazyFetches").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLazyFetches(this);
		// Creates control for LabelController valid$1LBL
		valid$1LBL = new LabelController("valid$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validElement", "valid").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createValid(this);
	}
	public HyperlinkController createEntityURIQueryTreePART$1(ControllerCore genCode) {
		// Creates control for HyperlinkController entityURIQueryTreePART$1HL
		entityURIQueryTreePART$1HL = new HyperlinkController("entityURIQueryTreePART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "queryPart", "entityURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entityURIQueryTreePART$1HL;
	}
	public AdiResourceUriTextController createEntityURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController entityURITXT
		entityURITXT = new AdiResourceUriTextController("entityURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(entityURIQueryTreePART$1HL);
				setProperty("entityURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entityURITXT;
	}
	public SuffixIdTextController createSuffix(ControllerCore genCode) {
		// Creates control for SuffixIdTextController suffixTXT
		suffixTXT = new SuffixIdTextController("suffix", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(suffix$1LBL);
				setProperty("suffix");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return suffixTXT;
	}
	public RadioGroupController createQueryType(ControllerCore genCode) {
		// Creates control for RadioGroupController queryTypeRG
		queryTypeRG = new RadioGroupController("queryType", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(queryType$1LBL);
				setProperty("queryType");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((QueryTypeEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(QueryTypeEnum.class.getEnumConstants());
			}
		};
		return queryTypeRG;
	}
	public CodeTextController createSqlClause(ControllerCore genCode) {
		// Creates control for CodeTextController sqlClauseTXT
		sqlClauseTXT = new CodeTextController("sqlClause", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(sqlClause$1LBL);
				setProperty("sqlClause");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return sqlClauseTXT;
	}
	public CodeTextController createWhereClause(ControllerCore genCode) {
		// Creates control for CodeTextController whereClauseTXT
		whereClauseTXT = new CodeTextController("whereClause", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(whereClause$1LBL);
				setProperty("whereClause");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return whereClauseTXT;
	}
	public TextController createLazyFetches(ControllerCore genCode) {
		// Creates control for TextController lazyFetchesTXT
		lazyFetchesTXT = new TextController("lazyFetches", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(lazyFetches$1LBL);
				setProperty("lazyFetches");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return lazyFetchesTXT;
	}
	public XjcTextController createValid(ControllerCore genCode) {
		// Creates control for XjcTextController validTXT
		validTXT = new XjcTextController("valid", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(valid$1LBL);
				setProperty("valid");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return validTXT;
	}
	
	//* *****************
	//* Additional code *
	//*******************
	private boolean doit = true;
	private void displaySQLorWhereClause() {
	    if (doit) {
	        doit = false;
	        QueryTreeWrapper queryTree = ((IEntity<QueryTreeWrapper>) getEntity()).getBean();
	        TextController sqlClause = ((CodeTextController) getFromRegister("sqlClause"));
	        TextController whereClause = ((CodeTextController) getFromRegister("whereClause"));
	        switch (queryTree.getQueryType()) {
	        case JQL:
	            sqlClause.getControl().setVisible(false);
	            sqlClause.getLinkedController().getControl().setVisible(false);
	            whereClause.getControl().setVisible(true);
	            whereClause.getLinkedController().getControl().setVisible(true);
	            break;
	        case SQL:
	            sqlClause.getControl().setVisible(true);
	            sqlClause.getLinkedController().getControl().setVisible(true);
	            whereClause.getControl().setVisible(false);
	            whereClause.getLinkedController().getControl().setVisible(false);
	            break;
	        }
	        sqlClause.getParentController().getComposite().layout();
	        doit = true;
	    }
	}
}