/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:53:33 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.GroupController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.CheckBoxController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.studio.xjc.controller.BeanClassTextController;
import org.adichatz.studio.xjc.controller.EntityUri4PETextController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/PluginEntityPart")
public class PluginEntityPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController entityURI$1LBL.
	private LabelController entityURI$1LBL;
	// the EntityUri4PETextController entityURITXT.
	private EntityUri4PETextController entityURITXT;
	// the LabelController beanClassName$1LBL.
	private LabelController beanClassName$1LBL;
	// the BeanClassTextController beanClassNameTXT.
	private BeanClassTextController beanClassNameTXT;
	// the LabelController protectPojo$1LBL.
	private LabelController protectPojo$1LBL;
	// the CheckBoxController protectPojoCB.
	private CheckBoxController protectPojoCB;
	// the GroupController itemCompositeGRP.
	protected GroupController itemCompositeGRP;
	// the LabelController retrieveRoles$1LBL.
	private LabelController retrieveRoles$1LBL;
	// the TextController retrieveRolesTXT.
	private TextController retrieveRolesTXT;
	// the LabelController mergeRoles$1LBL.
	private LabelController mergeRoles$1LBL;
	// the TextController mergeRolesTXT.
	private TextController mergeRolesTXT;
	// the LabelController persistRoles$1LBL.
	private LabelController persistRoles$1LBL;
	// the TextController persistRolesTXT.
	private TextController persistRolesTXT;
	// the LabelController removeRoles$1LBL.
	private LabelController removeRoles$1LBL;
	// the TextController removeRolesTXT.
	private TextController removeRolesTXT;
	/**
	 * Instantiates a new PluginEntityPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public PluginEntityPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part PluginEntityPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public PluginEntityPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController entityURI$1LBL
		entityURI$1LBL = new LabelController("entityURI$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "entityURI").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEntityURI(this);
		// Creates control for LabelController beanClassName$1LBL
		beanClassName$1LBL = new LabelController("beanClassName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "beanClassName").concat(":"));
				}
			}
		};
		createBeanClassName(this);
		// Creates control for LabelController protectPojo$1LBL
		protectPojo$1LBL = new LabelController("protectPojo$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "protectPojo").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createProtectPojo(this);
		// Creates control for GroupController itemCompositeGRP
		itemCompositeGRP = new GroupController("itemComposite", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.roles"));
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("gap top 20, span 2, grow");
				}
			}
		};
		// Creates control for LabelController retrieveRoles$1LBL
		retrieveRoles$1LBL = new LabelController("retrieveRoles$1", itemCompositeGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "retrieveRoles").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createRetrieveRoles(this);
		// Creates control for LabelController mergeRoles$1LBL
		mergeRoles$1LBL = new LabelController("mergeRoles$1", itemCompositeGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "mergeRoles").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createMergeRoles(this);
		// Creates control for LabelController persistRoles$1LBL
		persistRoles$1LBL = new LabelController("persistRoles$1", itemCompositeGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "persistRoles").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPersistRoles(this);
		// Creates control for LabelController removeRoles$1LBL
		removeRoles$1LBL = new LabelController("removeRoles$1", itemCompositeGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "pluginEntity", "removeRoles").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createRemoveRoles(this);
	}
	public EntityUri4PETextController createEntityURI(ControllerCore genCode) {
		// Creates control for EntityUri4PETextController entityURITXT
		entityURITXT = new EntityUri4PETextController("entityURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(entityURI$1LBL);
				setProperty("entityURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entityURITXT;
	}
	public BeanClassTextController createBeanClassName(ControllerCore genCode) {
		// Creates control for BeanClassTextController beanClassNameTXT
		beanClassNameTXT = new BeanClassTextController("beanClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(beanClassName$1LBL);
				setProperty("beanClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return beanClassNameTXT;
	}
	public CheckBoxController createProtectPojo(ControllerCore genCode) {
		// Creates control for CheckBoxController protectPojoCB
		protectPojoCB = new CheckBoxController("protectPojo", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(protectPojo$1LBL);
				setProperty("protectPojo");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return protectPojoCB;
	}
	public TextController createRetrieveRoles(ControllerCore genCode) {
		// Creates control for TextController retrieveRolesTXT
		retrieveRolesTXT = new TextController("retrieveRoles", getParentController(itemCompositeGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(retrieveRoles$1LBL);
				setProperty("retrieveRoles");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return retrieveRolesTXT;
	}
	public TextController createMergeRoles(ControllerCore genCode) {
		// Creates control for TextController mergeRolesTXT
		mergeRolesTXT = new TextController("mergeRoles", getParentController(itemCompositeGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(mergeRoles$1LBL);
				setProperty("mergeRoles");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return mergeRolesTXT;
	}
	public TextController createPersistRoles(ControllerCore genCode) {
		// Creates control for TextController persistRolesTXT
		persistRolesTXT = new TextController("persistRoles", getParentController(itemCompositeGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(persistRoles$1LBL);
				setProperty("persistRoles");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return persistRolesTXT;
	}
	public TextController createRemoveRoles(ControllerCore genCode) {
		// Creates control for TextController removeRolesTXT
		removeRolesTXT = new TextController("removeRoles", getParentController(itemCompositeGRP), genCode) {
			@Override
			public void initialize() {
				setLinkedController(removeRoles$1LBL);
				setProperty("removeRoles");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return removeRolesTXT;
	}
}