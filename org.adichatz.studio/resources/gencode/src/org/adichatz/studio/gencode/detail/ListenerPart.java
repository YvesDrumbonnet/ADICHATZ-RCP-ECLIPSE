/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Sat Dec 07 15:18:05 CET 2019
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.HyperlinkController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.AValidator;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.xjc.ListenerType;
import org.adichatz.studio.xjc.controller.ClassTextController;
import org.adichatz.studio.xjc.controller.CodeTextController;
import org.adichatz.studio.xjc.controller.ListenerTypeController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenClassEditorRunnable;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/ListenerPart")
public class ListenerPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the HyperlinkController listenerClassNameListenerPart$1HL.
	private HyperlinkController listenerClassNameListenerPart$1HL;
	// the ClassTextController listenerClassNameTXT.
	private ClassTextController listenerClassNameTXT;
	// the LabelController listenerTypes$1LBL.
	private LabelController listenerTypes$1LBL;
	// the ListenerTypeController listenerTypesGF.
	private ListenerTypeController listenerTypesGF;
	// the LabelController code$1LBL.
	private LabelController code$1LBL;
	// the CodeTextController codeTXT.
	private CodeTextController codeTXT;
	/**
	 * Instantiates a new ListenerPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public ListenerPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part ListenerPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public ListenerPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]",null));
					addValidator(new AValidator(this, "classOrCodeMandatory") {
						private boolean hasError() {
							return null == ((ListenerType) getEntity().getBean()).getListenerClassName() && (null == ((ListenerType) getEntity().getBean()).getCode() || ((ListenerType) getEntity().getBean()).getCode().trim().isEmpty());
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.listener.classOrCodeMandatory"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
				}
			}
		};
		createListenerClassNameListenerPart$1(this);
		createListenerClassName(this);
		// Creates control for LabelController listenerTypes$1LBL
		listenerTypes$1LBL = new LabelController("listenerTypes$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "listener", "listenerTypes").concat(":"));
					getControl().setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createListenerTypes(this);
		// Creates control for LabelController code$1LBL
		code$1LBL = new LabelController("code$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "listener", "code").concat(":"));
					getControl().setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createCode(this);
	}
	public HyperlinkController createListenerClassNameListenerPart$1(ControllerCore genCode) {
		// Creates control for HyperlinkController listenerClassNameListenerPart$1HL
		listenerClassNameListenerPart$1HL = new HyperlinkController("listenerClassNameListenerPart$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenClassEditorRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "listener", "listenerClassName"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return listenerClassNameListenerPart$1HL;
	}
	public ClassTextController createListenerClassName(ControllerCore genCode) {
		// Creates control for ClassTextController listenerClassNameTXT
		listenerClassNameTXT = new ClassTextController("listenerClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(listenerClassNameListenerPart$1HL);
				setProperty("listenerClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return listenerClassNameTXT;
	}
	public ListenerTypeController createListenerTypes(ControllerCore genCode) {
		// Creates control for ListenerTypeController listenerTypesGF
		listenerTypesGF = new ListenerTypeController("listenerTypes", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(listenerTypes$1LBL);
				setProperty("listenerTypes");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return listenerTypesGF;
	}
	public CodeTextController createCode(ControllerCore genCode) {
		// Creates control for CodeTextController codeTXT
		codeTXT = new CodeTextController("code", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(code$1LBL);
				setProperty("code");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return codeTXT;
	}
}