/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:54:19 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.studio.xjc.controller.ClassTextController;
import org.adichatz.studio.xjc.controller.CodeTextController;
import org.adichatz.studio.xjc.controller.OutlineHyperlinkController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenClassEditorRunnable;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/ValidatorPart")
public class ValidatorPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController key$1LBL.
	private LabelController key$1LBL;
	// the TextController keyTXT.
	private TextController keyTXT;
	// the OutlineHyperlinkController validatorClassNameValidatorPART$1HL.
	private OutlineHyperlinkController validatorClassNameValidatorPART$1HL;
	// the ClassTextController validatorClassNameTXT.
	private ClassTextController validatorClassNameTXT;
	// the LabelController hostingControllerIds$1LBL.
	private LabelController hostingControllerIds$1LBL;
	// the TextController hostingControllerIdsTXT.
	private TextController hostingControllerIdsTXT;
	// the LabelController errorMessage$1LBL.
	private LabelController errorMessage$1LBL;
	// the TextController errorMessageTXT.
	private TextController errorMessageTXT;
	// the LabelController errorWhen$1LBL.
	private LabelController errorWhen$1LBL;
	// the CodeTextController errorWhenTXT.
	private CodeTextController errorWhenTXT;
	// the LabelController warningMessage$1LBL.
	private LabelController warningMessage$1LBL;
	// the TextController warningMessageTXT.
	private TextController warningMessageTXT;
	// the LabelController warningWhen$1LBL.
	private LabelController warningWhen$1LBL;
	// the CodeTextController warningWhenTXT.
	private CodeTextController warningWhenTXT;
	/**
	 * Instantiates a new ValidatorPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public ValidatorPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part ValidatorPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public ValidatorPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController key$1LBL
		key$1LBL = new LabelController("key$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "key").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createKey(this);
		createValidatorClassNameValidatorPART$1(this);
		createValidatorClassName(this);
		// Creates control for LabelController hostingControllerIds$1LBL
		hostingControllerIds$1LBL = new LabelController("hostingControllerIds$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "hostingControllerIds").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createHostingControllerIds(this);
		// Creates control for LabelController errorMessage$1LBL
		errorMessage$1LBL = new LabelController("errorMessage$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "errorMessage").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createErrorMessage(this);
		// Creates control for LabelController errorWhen$1LBL
		errorWhen$1LBL = new LabelController("errorWhen$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "errorWhen").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createErrorWhen(this);
		// Creates control for LabelController warningMessage$1LBL
		warningMessage$1LBL = new LabelController("warningMessage$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "warningMessage").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createWarningMessage(this);
		// Creates control for LabelController warningWhen$1LBL
		warningWhen$1LBL = new LabelController("warningWhen$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "warningWhen").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createWarningWhen(this);
	}
	public TextController createKey(ControllerCore genCode) {
		// Creates control for TextController keyTXT
		keyTXT = new TextController("key", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(key$1LBL);
				setProperty("key");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return keyTXT;
	}
	public OutlineHyperlinkController createValidatorClassNameValidatorPART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController validatorClassNameValidatorPART$1HL
		validatorClassNameValidatorPART$1HL = new OutlineHyperlinkController("validatorClassNameValidatorPART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenClassEditorRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "validator", "validatorClassName").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return validatorClassNameValidatorPART$1HL;
	}
	public ClassTextController createValidatorClassName(ControllerCore genCode) {
		// Creates control for ClassTextController validatorClassNameTXT
		validatorClassNameTXT = new ClassTextController("validatorClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(validatorClassNameValidatorPART$1HL);
				setProperty("validatorClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return validatorClassNameTXT;
	}
	public TextController createHostingControllerIds(ControllerCore genCode) {
		// Creates control for TextController hostingControllerIdsTXT
		hostingControllerIdsTXT = new TextController("hostingControllerIds", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(hostingControllerIds$1LBL);
				setProperty("hostingControllerIds");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return hostingControllerIdsTXT;
	}
	public TextController createErrorMessage(ControllerCore genCode) {
		// Creates control for TextController errorMessageTXT
		errorMessageTXT = new TextController("errorMessage", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(errorMessage$1LBL);
				setProperty("errorMessage");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return errorMessageTXT;
	}
	public CodeTextController createErrorWhen(ControllerCore genCode) {
		// Creates control for CodeTextController errorWhenTXT
		errorWhenTXT = new CodeTextController("errorWhen", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(errorWhen$1LBL);
				setProperty("errorWhen");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return errorWhenTXT;
	}
	public TextController createWarningMessage(ControllerCore genCode) {
		// Creates control for TextController warningMessageTXT
		warningMessageTXT = new TextController("warningMessage", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(warningMessage$1LBL);
				setProperty("warningMessage");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return warningMessageTXT;
	}
	public CodeTextController createWarningWhen(ControllerCore genCode) {
		// Creates control for CodeTextController warningWhenTXT
		warningWhenTXT = new CodeTextController("warningWhen", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(warningWhen$1LBL);
				setProperty("warningWhen");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return warningWhenTXT;
	}
}