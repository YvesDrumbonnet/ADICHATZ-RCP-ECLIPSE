/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:52:22 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.Arrays;
import java.util.List;
import java.util.function.BooleanSupplier;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.CComboController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.xjc.CustomGenerationUnitType;
import org.adichatz.generator.xjc.GenerationEnum;
import org.adichatz.studio.xjc.controller.AdiResourceUriTextController;
import org.adichatz.studio.xjc.controller.ClassTextController;
import org.adichatz.studio.xjc.controller.OutlineHyperlinkController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.adichatz.studio.xjc.editor.runnable.OpenClassEditorRunnable;
import org.adichatz.studio.xjc.editor.runnable.OpenResourceURIRunnable;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/CustomGenerationUnitPart")
public class CustomGenerationUnitPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the OutlineHyperlinkController adiResourceURICustomGenerationUnitPART$1HL.
	private OutlineHyperlinkController adiResourceURICustomGenerationUnitPART$1HL;
	// the AdiResourceUriTextController adiResourceURITXT.
	private AdiResourceUriTextController adiResourceURITXT;
	// the LabelController entityRegex$1LBL.
	private LabelController entityRegex$1LBL;
	// the TextController entityRegexTXT.
	private TextController entityRegexTXT;
	// the LabelController propertyRegex$1LBL.
	private LabelController propertyRegex$1LBL;
	// the TextController propertyRegexTXT.
	private TextController propertyRegexTXT;
	// the OutlineHyperlinkController scenarioClassNameCustomGenerationUnitPART$1HL.
	private OutlineHyperlinkController scenarioClassNameCustomGenerationUnitPART$1HL;
	// the ClassTextController scenarioClassNameTXT.
	private ClassTextController scenarioClassNameTXT;
	// the LabelController type$1LBL.
	private LabelController type$1LBL;
	// the CComboController typeCCMB.
	private CComboController typeCCMB;
	/**
	 * Instantiates a new CustomGenerationUnitPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public CustomGenerationUnitPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part CustomGenerationUnitPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public CustomGenerationUnitPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		createAdiResourceURICustomGenerationUnitPART$1(this);
		createAdiResourceURI(this);
		// Creates control for LabelController entityRegex$1LBL
		entityRegex$1LBL = new LabelController("entityRegex$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "customGenerationUnit", "entityRegex").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEntityRegex(this);
		// Creates control for LabelController propertyRegex$1LBL
		propertyRegex$1LBL = new LabelController("propertyRegex$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "customGenerationUnit", "propertyRegex").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPropertyRegex(this);
		createScenarioClassNameCustomGenerationUnitPART$1(this);
		createScenarioClassName(this);
		// Creates control for LabelController type$1LBL
		type$1LBL = new LabelController("type$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "type").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createType(this);
	}
	public OutlineHyperlinkController createAdiResourceURICustomGenerationUnitPART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController adiResourceURICustomGenerationUnitPART$1HL
		adiResourceURICustomGenerationUnitPART$1HL = new OutlineHyperlinkController("adiResourceURICustomGenerationUnitPART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return null != ((CustomGenerationUnitType) parentController.getEntity().getBean()).getAdiResourceURI();
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenResourceURIRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "adiResourceURI").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURICustomGenerationUnitPART$1HL;
	}
	public AdiResourceUriTextController createAdiResourceURI(ControllerCore genCode) {
		// Creates control for AdiResourceUriTextController adiResourceURITXT
		adiResourceURITXT = new AdiResourceUriTextController("adiResourceURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(adiResourceURICustomGenerationUnitPART$1HL);
				setProperty("adiResourceURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return adiResourceURITXT;
	}
	public TextController createEntityRegex(ControllerCore genCode) {
		// Creates control for TextController entityRegexTXT
		entityRegexTXT = new TextController("entityRegex", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(entityRegex$1LBL);
				setProperty("entityRegex");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return entityRegexTXT;
	}
	public TextController createPropertyRegex(ControllerCore genCode) {
		// Creates control for TextController propertyRegexTXT
		propertyRegexTXT = new TextController("propertyRegex", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(propertyRegex$1LBL);
				setProperty("propertyRegex");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return propertyRegexTXT;
	}
	public OutlineHyperlinkController createScenarioClassNameCustomGenerationUnitPART$1(ControllerCore genCode) {
		// Creates control for OutlineHyperlinkController scenarioClassNameCustomGenerationUnitPART$1HL
		scenarioClassNameCustomGenerationUnitPART$1HL = new OutlineHyperlinkController("scenarioClassNameCustomGenerationUnitPART$1", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					runnable = new OpenClassEditorRunnable(this);
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "generationUnit", "scenarioClassName").concat(":"));
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return scenarioClassNameCustomGenerationUnitPART$1HL;
	}
	public ClassTextController createScenarioClassName(ControllerCore genCode) {
		// Creates control for ClassTextController scenarioClassNameTXT
		scenarioClassNameTXT = new ClassTextController("scenarioClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(scenarioClassNameCustomGenerationUnitPART$1HL);
				setProperty("scenarioClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return scenarioClassNameTXT;
	}
	public CComboController createType(ControllerCore genCode) {
		// Creates control for CComboController typeCCMB
		typeCCMB = new CComboController("type", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(type$1LBL);
				setProperty("type");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.BORDER | SWT.READ_ONLY);
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((GenerationEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					getControl().setLayoutData("grow 0");
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(GenerationEnum.class.getEnumConstants());
			}
		};
		return typeCCMB;
	}
}