/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Jul 07 08:04:43 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import java.util.function.BooleanSupplier;
import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.GroupController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.ElementaryAccessibility;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.MandatoryValidator;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/ApplicationServerManagerPart")
public class ApplicationServerManagerPart extends AContainerCore {
	// the GroupController applicationServerGroupGRP.
	protected GroupController applicationServerGroupGRP;
	// the LabelController nameLBLLBL.
	private LabelController nameLBLLBL;
	// the TextController nameTXT.
	private TextController nameTXT;
	// the LabelController descriptionLBLLBL.
	private LabelController descriptionLBLLBL;
	// the TextController descriptionTXT.
	private TextController descriptionTXT;
	protected EntityManagerCore applicationServerManagerPartServerGroup;
	// the GroupController contextGroupGRP.
	protected GroupController contextGroupGRP;
	// the LabelController urlPkgsLBLLBL.
	private LabelController urlPkgsLBLLBL;
	// the TextController javaNamingFactoryUrlPkgsTXT.
	private TextController javaNamingFactoryUrlPkgsTXT;
	// the LabelController namingLBLLBL.
	private LabelController namingLBLLBL;
	// the TextController javaNamingFactoryInitialTXT.
	private TextController javaNamingFactoryInitialTXT;
	// the LabelController providerUrlLBLLBL.
	private LabelController providerUrlLBLLBL;
	// the TextController javaNamingProviderUrlTXT.
	private TextController javaNamingProviderUrlTXT;
	// the GroupController remoteGroupGRP.
	protected GroupController remoteGroupGRP;
	// the LabelController hostLBLLBL.
	private LabelController hostLBLLBL;
	// the TextController remoteConnectionDefaultHostTXT.
	private TextController remoteConnectionDefaultHostTXT;
	// the LabelController portLBLLBL.
	private LabelController portLBLLBL;
	// the TextController remoteConnectionDefaultPortTXT.
	private TextController remoteConnectionDefaultPortTXT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new ApplicationServerManagerPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public ApplicationServerManagerPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part ApplicationServerManagerPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public ApplicationServerManagerPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for GroupController applicationServerGroupGRP
		applicationServerGroupGRP = new GroupController("applicationServerGroup", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.applicationServer.group"));
					getComposite().setLayout(new MigLayout("wrap 2","[]15[grow,fill]","[]2[]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		// Creates control for LabelController nameLBLLBL
		nameLBLLBL = new LabelController("nameLBL", applicationServerGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.applicationServer.name"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createName(this);
		// Creates control for LabelController descriptionLBLLBL
		descriptionLBLLBL = new LabelController("descriptionLBL", applicationServerGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.datasource.description"));
					setBackground(toolkit.getColors().getColor(IFormColors.H_GRADIENT_START));
				}
			}
		};
		createDescription(this);
		
		// loads and instantiates the class ApplicationServerManagerPartServerGroup.
		applicationServerManagerPartServerGroup  = new ApplicationServerManagerPartServerGroup(context, coreController);
		// Creates control for GroupController contextGroupGRP
		contextGroupGRP = new GroupController("contextGroup", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.as.CONTEXT"));
					getComposite().setLayout(new MigLayout("wrap 2","[]15[grow,fill]","[]2[]2[]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
				}
			}
		};
		// Creates control for LabelController urlPkgsLBLLBL
		urlPkgsLBLLBL = new LabelController("urlPkgsLBL", contextGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText("java.naming.factory.url.pkgs:");
				}
			}
		};
		createJavaNamingFactoryUrlPkgs(this);
		// Creates control for LabelController namingLBLLBL
		namingLBLLBL = new LabelController("namingLBL", contextGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText("java.naming.factory.initial:");
				}
			}
		};
		createJavaNamingFactoryInitial(this);
		// Creates control for LabelController providerUrlLBLLBL
		providerUrlLBLLBL = new LabelController("providerUrlLBL", contextGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText("java.naming.provider.url:");
				}
			}
		};
		createJavaNamingProviderUrl(this);
		// Creates control for GroupController remoteGroupGRP
		remoteGroupGRP = new GroupController("remoteGroup", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.as.REMOTE"));
					getComposite().setLayout(new MigLayout("wrap 2","[]15[grow,fill]","[]2[]"));
					setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
					getControl().setLayoutData("h 0:n:n, w 0:n:n");
				}
			}
		};
		// Creates control for LabelController hostLBLLBL
		hostLBLLBL = new LabelController("hostLBL", remoteGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText("remote.connection.default.host:");
				}
			}
		};
		createRemoteConnectionDefaultHost(this);
		// Creates control for LabelController portLBLLBL
		portLBLLBL = new LabelController("portLBL", remoteGroupGRP, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText("remote.connection.default.port:");
				}
			}
		};
		createRemoteConnectionDefaultPort(this);
	}
	public TextController createName(ControllerCore genCode) {
		// Creates control for TextController nameTXT
		nameTXT = new TextController("name", getParentController(applicationServerGroupGRP), genCode) {
			@Override
			public void initialize() {
				BooleanSupplier evaluatorENABLED;
				evaluatorENABLED = new BooleanSupplier() {
					public boolean getAsBoolean() {
						return false;
					}
				};
				addAccessibility(new ElementaryAccessibility(ElementaryAccessibility.ACCESS_ATTRIBUTE.ENABLED, evaluatorENABLED));
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return nameTXT;
	}
	public TextController createDescription(ControllerCore genCode) {
		// Creates control for TextController descriptionTXT
		descriptionTXT = new TextController("description", getParentController(applicationServerGroupGRP), genCode);
		return descriptionTXT;
	}
	public TextController createJavaNamingFactoryUrlPkgs(ControllerCore genCode) {
		// Creates control for TextController javaNamingFactoryUrlPkgsTXT
		javaNamingFactoryUrlPkgsTXT = new TextController("java.naming.factory.url.pkgs", getParentController(contextGroupGRP), genCode);
		return javaNamingFactoryUrlPkgsTXT;
	}
	public TextController createJavaNamingFactoryInitial(ControllerCore genCode) {
		// Creates control for TextController javaNamingFactoryInitialTXT
		javaNamingFactoryInitialTXT = new TextController("java.naming.factory.initial", getParentController(contextGroupGRP), genCode);
		return javaNamingFactoryInitialTXT;
	}
	public TextController createJavaNamingProviderUrl(ControllerCore genCode) {
		// Creates control for TextController javaNamingProviderUrlTXT
		javaNamingProviderUrlTXT = new TextController("java.naming.provider.url", getParentController(contextGroupGRP), genCode);
		return javaNamingProviderUrlTXT;
	}
	public TextController createRemoteConnectionDefaultHost(ControllerCore genCode) {
		// Creates control for TextController remoteConnectionDefaultHostTXT
		remoteConnectionDefaultHostTXT = new TextController("remote.connection.default.host", getParentController(remoteGroupGRP), genCode);
		return remoteConnectionDefaultHostTXT;
	}
	public TextController createRemoteConnectionDefaultPort(ControllerCore genCode) {
		// Creates control for TextController remoteConnectionDefaultPortTXT
		remoteConnectionDefaultPortTXT = new TextController("remote.connection.default.port", getParentController(remoteGroupGRP), genCode);
		return remoteConnectionDefaultPortTXT;
	}
}