/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:53:51 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.math.BigDecimal;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.NumericTextController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.nebula.PShelfController;
import org.adichatz.engine.controller.nebula.PShelfItemController;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.studio.xjc.controller.ColorController;
import org.adichatz.studio.xjc.controller.FontController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.controller.XjcTextController;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/RichTextPart")
public class RichTextPartControlItem extends EntityManagerCore {
	// the ScrolledCompositeController controlItemSCSCLC.
	protected ScrolledCompositeController controlItemSCSCLC;
	// the LabelController background$1LBL.
	private LabelController background$1LBL;
	// the ColorController backgroundTXT.
	private ColorController backgroundTXT;
	// the LabelController backgroundImage$1LBL.
	private LabelController backgroundImage$1LBL;
	// the TextController backgroundImageTXT.
	private TextController backgroundImageTXT;
	// the LabelController bounds$1LBL.
	private LabelController bounds$1LBL;
	// the TextController boundsTXT.
	private TextController boundsTXT;
	// the LabelController capture$1LBL.
	private LabelController capture$1LBL;
	// the TextController captureTXT.
	private TextController captureTXT;
	// the LabelController containerBackground$1LBL.
	private LabelController containerBackground$1LBL;
	// the ColorController containerBackgroundTXT.
	private ColorController containerBackgroundTXT;
	// the LabelController containerBackgroundImage$1LBL.
	private LabelController containerBackgroundImage$1LBL;
	// the TextController containerBackgroundImageTXT.
	private TextController containerBackgroundImageTXT;
	// the LabelController containerBounds$1LBL.
	private LabelController containerBounds$1LBL;
	// the TextController containerBoundsTXT.
	private TextController containerBoundsTXT;
	// the LabelController containerCapture$1LBL.
	private LabelController containerCapture$1LBL;
	// the TextController containerCaptureTXT.
	private TextController containerCaptureTXT;
	// the LabelController containerFocus$1LBL.
	private LabelController containerFocus$1LBL;
	// the TextController containerFocusTXT.
	private TextController containerFocusTXT;
	// the LabelController containerFont$1LBL.
	private LabelController containerFont$1LBL;
	// the FontController containerFontTXT.
	private FontController containerFontTXT;
	// the LabelController containerForeground$1LBL.
	private LabelController containerForeground$1LBL;
	// the ColorController containerForegroundTXT.
	private ColorController containerForegroundTXT;
	// the LabelController containerLayoutData$1LBL.
	private LabelController containerLayoutData$1LBL;
	// the TextController containerLayoutDataTXT.
	private TextController containerLayoutDataTXT;
	// the LabelController containerLocation$1LBL.
	private LabelController containerLocation$1LBL;
	// the TextController containerLocationTXT.
	private TextController containerLocationTXT;
	// the LabelController containerMenu$1LBL.
	private LabelController containerMenu$1LBL;
	// the TextController containerMenuTXT.
	private TextController containerMenuTXT;
	// the LabelController containerRedraw$1LBL.
	private LabelController containerRedraw$1LBL;
	// the TextController containerRedrawTXT.
	private TextController containerRedrawTXT;
	// the LabelController containerSize$1LBL.
	private LabelController containerSize$1LBL;
	// the TextController containerSizeTXT.
	private TextController containerSizeTXT;
	// the LabelController containerStyle$1LBL.
	private LabelController containerStyle$1LBL;
	// the TextController containerStyleTXT.
	private TextController containerStyleTXT;
	// the LabelController editable$1LBL.
	private LabelController editable$1LBL;
	// the XjcTextController editableTXT.
	private XjcTextController editableTXT;
	// the LabelController enabled$1LBL.
	private LabelController enabled$1LBL;
	// the XjcTextController enabledTXT.
	private XjcTextController enabledTXT;
	// the LabelController focus$1LBL.
	private LabelController focus$1LBL;
	// the TextController focusTXT.
	private TextController focusTXT;
	// the LabelController font$1LBL.
	private LabelController font$1LBL;
	// the FontController fontTXT.
	private FontController fontTXT;
	// the LabelController foreground$1LBL.
	private LabelController foreground$1LBL;
	// the ColorController foregroundTXT.
	private ColorController foregroundTXT;
	// the LabelController layoutData$1LBL.
	private LabelController layoutData$1LBL;
	// the XjcTextController layoutDataTXT.
	private XjcTextController layoutDataTXT;
	// the LabelController location$1LBL.
	private LabelController location$1LBL;
	// the TextController locationTXT.
	private TextController locationTXT;
	// the LabelController menu$1LBL.
	private LabelController menu$1LBL;
	// the TextController menuTXT.
	private TextController menuTXT;
	// the LabelController orientation$1LBL.
	private LabelController orientation$1LBL;
	// the TextController orientationTXT.
	private TextController orientationTXT;
	// the LabelController redraw$1LBL.
	private LabelController redraw$1LBL;
	// the TextController redrawTXT.
	private TextController redrawTXT;
	// the LabelController size$1LBL.
	private LabelController size$1LBL;
	// the TextController sizeTXT.
	private TextController sizeTXT;
	// the LabelController style$1LBL.
	private LabelController style$1LBL;
	// the TextController styleTXT.
	private TextController styleTXT;
	// the LabelController tabs$1LBL.
	private LabelController tabs$1LBL;
	// the NumericTextController tabsNTXT.
	private NumericTextController tabsNTXT;
	// the LabelController text$1LBL.
	private LabelController text$1LBL;
	// the TextController textTXT.
	private TextController textTXT;
	// the LabelController textLimit$1LBL.
	private LabelController textLimit$1LBL;
	// the NumericTextController textLimitNTXT.
	private NumericTextController textLimitNTXT;
	// the LabelController toolTipText$1LBL.
	private LabelController toolTipText$1LBL;
	// the TextController toolTipTextTXT.
	private TextController toolTipTextTXT;
	// the LabelController visible$1LBL.
	private LabelController visible$1LBL;
	// the XjcTextController visibleTXT.
	private XjcTextController visibleTXT;
	/**
	 * Creates RichTextPartControlItem.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public RichTextPartControlItem(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new PShelfItemController("controlItem", parentController, this) {
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getItem().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.xjcEditor.controlItem"));
					}
				}
			};
			if (!((PShelfController) parentController).isDelayed())
				createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController controlItemSCSCLC
		controlItemSCSCLC = new ScrolledCompositeController("controlItemSC", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController background$1LBL
		background$1LBL = new LabelController("background$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "background").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBackground(this);
		// Creates control for LabelController backgroundImage$1LBL
		backgroundImage$1LBL = new LabelController("backgroundImage$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "backgroundImage").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBackgroundImage(this);
		// Creates control for LabelController bounds$1LBL
		bounds$1LBL = new LabelController("bounds$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "bounds").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBounds(this);
		// Creates control for LabelController capture$1LBL
		capture$1LBL = new LabelController("capture$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "capture").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createCapture(this);
		// Creates control for LabelController containerBackground$1LBL
		containerBackground$1LBL = new LabelController("containerBackground$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerBackground").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerBackground(this);
		// Creates control for LabelController containerBackgroundImage$1LBL
		containerBackgroundImage$1LBL = new LabelController("containerBackgroundImage$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerBackgroundImage").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerBackgroundImage(this);
		// Creates control for LabelController containerBounds$1LBL
		containerBounds$1LBL = new LabelController("containerBounds$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerBounds").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerBounds(this);
		// Creates control for LabelController containerCapture$1LBL
		containerCapture$1LBL = new LabelController("containerCapture$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerCapture").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerCapture(this);
		// Creates control for LabelController containerFocus$1LBL
		containerFocus$1LBL = new LabelController("containerFocus$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerFocus").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerFocus(this);
		// Creates control for LabelController containerFont$1LBL
		containerFont$1LBL = new LabelController("containerFont$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerFont").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerFont(this);
		// Creates control for LabelController containerForeground$1LBL
		containerForeground$1LBL = new LabelController("containerForeground$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerForeground").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerForeground(this);
		// Creates control for LabelController containerLayoutData$1LBL
		containerLayoutData$1LBL = new LabelController("containerLayoutData$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerLayoutData").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerLayoutData(this);
		// Creates control for LabelController containerLocation$1LBL
		containerLocation$1LBL = new LabelController("containerLocation$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerLocation").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerLocation(this);
		// Creates control for LabelController containerMenu$1LBL
		containerMenu$1LBL = new LabelController("containerMenu$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerMenu").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerMenu(this);
		// Creates control for LabelController containerRedraw$1LBL
		containerRedraw$1LBL = new LabelController("containerRedraw$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerRedraw").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerRedraw(this);
		// Creates control for LabelController containerSize$1LBL
		containerSize$1LBL = new LabelController("containerSize$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerSize").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerSize(this);
		// Creates control for LabelController containerStyle$1LBL
		containerStyle$1LBL = new LabelController("containerStyle$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "containerStyle").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createContainerStyle(this);
		// Creates control for LabelController editable$1LBL
		editable$1LBL = new LabelController("editable$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "editable").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEditable(this);
		// Creates control for LabelController enabled$1LBL
		enabled$1LBL = new LabelController("enabled$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "widget", "enabled").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEnabled(this);
		// Creates control for LabelController focus$1LBL
		focus$1LBL = new LabelController("focus$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "focus").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createFocus(this);
		// Creates control for LabelController font$1LBL
		font$1LBL = new LabelController("font$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "font").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createFont(this);
		// Creates control for LabelController foreground$1LBL
		foreground$1LBL = new LabelController("foreground$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "foreground").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createForeground(this);
		// Creates control for LabelController layoutData$1LBL
		layoutData$1LBL = new LabelController("layoutData$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "layoutData").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLayoutData(this);
		// Creates control for LabelController location$1LBL
		location$1LBL = new LabelController("location$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "location").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLocation(this);
		// Creates control for LabelController menu$1LBL
		menu$1LBL = new LabelController("menu$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "menu").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createMenu(this);
		// Creates control for LabelController orientation$1LBL
		orientation$1LBL = new LabelController("orientation$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "orientation").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createOrientation(this);
		// Creates control for LabelController redraw$1LBL
		redraw$1LBL = new LabelController("redraw$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "redraw").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createRedraw(this);
		// Creates control for LabelController size$1LBL
		size$1LBL = new LabelController("size$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "size").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSize(this);
		// Creates control for LabelController style$1LBL
		style$1LBL = new LabelController("style$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "widget", "style").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createStyle(this);
		// Creates control for LabelController tabs$1LBL
		tabs$1LBL = new LabelController("tabs$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "tabs").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createTabs(this);
		// Creates control for LabelController text$1LBL
		text$1LBL = new LabelController("text$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "text").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createText(this);
		// Creates control for LabelController textLimit$1LBL
		textLimit$1LBL = new LabelController("textLimit$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "richText", "textLimit").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createTextLimit(this);
		// Creates control for LabelController toolTipText$1LBL
		toolTipText$1LBL = new LabelController("toolTipText$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "widget", "toolTipText").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createToolTipText(this);
		// Creates control for LabelController visible$1LBL
		visible$1LBL = new LabelController("visible$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "control", "visible").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createVisible(this);
	}
	public ColorController createBackground(ControllerCore genCode) {
		// Creates control for ColorController backgroundTXT
		backgroundTXT = new ColorController("background", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(background$1LBL);
				setProperty("background");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return backgroundTXT;
	}
	public TextController createBackgroundImage(ControllerCore genCode) {
		// Creates control for TextController backgroundImageTXT
		backgroundImageTXT = new TextController("backgroundImage", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(backgroundImage$1LBL);
				setProperty("backgroundImage");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return backgroundImageTXT;
	}
	public TextController createBounds(ControllerCore genCode) {
		// Creates control for TextController boundsTXT
		boundsTXT = new TextController("bounds", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(bounds$1LBL);
				setProperty("bounds");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return boundsTXT;
	}
	public TextController createCapture(ControllerCore genCode) {
		// Creates control for TextController captureTXT
		captureTXT = new TextController("capture", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(capture$1LBL);
				setProperty("capture");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return captureTXT;
	}
	public ColorController createContainerBackground(ControllerCore genCode) {
		// Creates control for ColorController containerBackgroundTXT
		containerBackgroundTXT = new ColorController("containerBackground", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerBackground$1LBL);
				setProperty("containerBackground");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerBackgroundTXT;
	}
	public TextController createContainerBackgroundImage(ControllerCore genCode) {
		// Creates control for TextController containerBackgroundImageTXT
		containerBackgroundImageTXT = new TextController("containerBackgroundImage", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerBackgroundImage$1LBL);
				setProperty("containerBackgroundImage");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerBackgroundImageTXT;
	}
	public TextController createContainerBounds(ControllerCore genCode) {
		// Creates control for TextController containerBoundsTXT
		containerBoundsTXT = new TextController("containerBounds", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerBounds$1LBL);
				setProperty("containerBounds");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerBoundsTXT;
	}
	public TextController createContainerCapture(ControllerCore genCode) {
		// Creates control for TextController containerCaptureTXT
		containerCaptureTXT = new TextController("containerCapture", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerCapture$1LBL);
				setProperty("containerCapture");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerCaptureTXT;
	}
	public TextController createContainerFocus(ControllerCore genCode) {
		// Creates control for TextController containerFocusTXT
		containerFocusTXT = new TextController("containerFocus", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerFocus$1LBL);
				setProperty("containerFocus");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerFocusTXT;
	}
	public FontController createContainerFont(ControllerCore genCode) {
		// Creates control for FontController containerFontTXT
		containerFontTXT = new FontController("containerFont", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerFont$1LBL);
				setProperty("containerFont");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerFontTXT;
	}
	public ColorController createContainerForeground(ControllerCore genCode) {
		// Creates control for ColorController containerForegroundTXT
		containerForegroundTXT = new ColorController("containerForeground", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerForeground$1LBL);
				setProperty("containerForeground");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerForegroundTXT;
	}
	public TextController createContainerLayoutData(ControllerCore genCode) {
		// Creates control for TextController containerLayoutDataTXT
		containerLayoutDataTXT = new TextController("containerLayoutData", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerLayoutData$1LBL);
				setProperty("containerLayoutData");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerLayoutDataTXT;
	}
	public TextController createContainerLocation(ControllerCore genCode) {
		// Creates control for TextController containerLocationTXT
		containerLocationTXT = new TextController("containerLocation", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerLocation$1LBL);
				setProperty("containerLocation");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerLocationTXT;
	}
	public TextController createContainerMenu(ControllerCore genCode) {
		// Creates control for TextController containerMenuTXT
		containerMenuTXT = new TextController("containerMenu", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerMenu$1LBL);
				setProperty("containerMenu");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerMenuTXT;
	}
	public TextController createContainerRedraw(ControllerCore genCode) {
		// Creates control for TextController containerRedrawTXT
		containerRedrawTXT = new TextController("containerRedraw", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerRedraw$1LBL);
				setProperty("containerRedraw");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerRedrawTXT;
	}
	public TextController createContainerSize(ControllerCore genCode) {
		// Creates control for TextController containerSizeTXT
		containerSizeTXT = new TextController("containerSize", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerSize$1LBL);
				setProperty("containerSize");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerSizeTXT;
	}
	public TextController createContainerStyle(ControllerCore genCode) {
		// Creates control for TextController containerStyleTXT
		containerStyleTXT = new TextController("containerStyle", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(containerStyle$1LBL);
				setProperty("containerStyle");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return containerStyleTXT;
	}
	public XjcTextController createEditable(ControllerCore genCode) {
		// Creates control for XjcTextController editableTXT
		editableTXT = new XjcTextController("editable", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(editable$1LBL);
				setProperty("editable");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return editableTXT;
	}
	public XjcTextController createEnabled(ControllerCore genCode) {
		// Creates control for XjcTextController enabledTXT
		enabledTXT = new XjcTextController("enabled", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(enabled$1LBL);
				setProperty("enabled");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return enabledTXT;
	}
	public TextController createFocus(ControllerCore genCode) {
		// Creates control for TextController focusTXT
		focusTXT = new TextController("focus", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(focus$1LBL);
				setProperty("focus");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return focusTXT;
	}
	public FontController createFont(ControllerCore genCode) {
		// Creates control for FontController fontTXT
		fontTXT = new FontController("font", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(font$1LBL);
				setProperty("font");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return fontTXT;
	}
	public ColorController createForeground(ControllerCore genCode) {
		// Creates control for ColorController foregroundTXT
		foregroundTXT = new ColorController("foreground", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(foreground$1LBL);
				setProperty("foreground");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return foregroundTXT;
	}
	public XjcTextController createLayoutData(ControllerCore genCode) {
		// Creates control for XjcTextController layoutDataTXT
		layoutDataTXT = new XjcTextController("layoutData", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(layoutData$1LBL);
				setProperty("layoutData");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return layoutDataTXT;
	}
	public TextController createLocation(ControllerCore genCode) {
		// Creates control for TextController locationTXT
		locationTXT = new TextController("location", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(location$1LBL);
				setProperty("location");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return locationTXT;
	}
	public TextController createMenu(ControllerCore genCode) {
		// Creates control for TextController menuTXT
		menuTXT = new TextController("menu", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(menu$1LBL);
				setProperty("menu");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return menuTXT;
	}
	public TextController createOrientation(ControllerCore genCode) {
		// Creates control for TextController orientationTXT
		orientationTXT = new TextController("orientation", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(orientation$1LBL);
				setProperty("orientation");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return orientationTXT;
	}
	public TextController createRedraw(ControllerCore genCode) {
		// Creates control for TextController redrawTXT
		redrawTXT = new TextController("redraw", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(redraw$1LBL);
				setProperty("redraw");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return redrawTXT;
	}
	public TextController createSize(ControllerCore genCode) {
		// Creates control for TextController sizeTXT
		sizeTXT = new TextController("size", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(size$1LBL);
				setProperty("size");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return sizeTXT;
	}
	public TextController createStyle(ControllerCore genCode) {
		// Creates control for TextController styleTXT
		styleTXT = new TextController("style", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(style$1LBL);
				setProperty("style");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return styleTXT;
	}
	public NumericTextController createTabs(ControllerCore genCode) {
		// Creates control for NumericTextController tabsNTXT
		tabsNTXT = new NumericTextController("tabs", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(tabs$1LBL);
				setProperty("tabs");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getNumericText().setFormatter("######");
					setStyle(SWT.BORDER | SWT.SINGLE | SWT.RIGHT);
					getControl().setLayoutData("width min:100:150, growx");
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertTargetToModel(Object fromObject) {
				if (fromObject instanceof Number)
					return ((BigDecimal) fromObject).intValue();
				return null;
			}
		};
		return tabsNTXT;
	}
	public TextController createText(ControllerCore genCode) {
		// Creates control for TextController textTXT
		textTXT = new TextController("text", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(text$1LBL);
				setProperty("text");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return textTXT;
	}
	public NumericTextController createTextLimit(ControllerCore genCode) {
		// Creates control for NumericTextController textLimitNTXT
		textLimitNTXT = new NumericTextController("textLimit", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(textLimit$1LBL);
				setProperty("textLimit");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getNumericText().setFormatter("######");
					setStyle(SWT.BORDER | SWT.SINGLE | SWT.RIGHT);
					getControl().setLayoutData("width min:100:150, growx");
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public Object convertTargetToModel(Object fromObject) {
				if (fromObject instanceof Number)
					return ((BigDecimal) fromObject).intValue();
				return null;
			}
		};
		return textLimitNTXT;
	}
	public TextController createToolTipText(ControllerCore genCode) {
		// Creates control for TextController toolTipTextTXT
		toolTipTextTXT = new TextController("toolTipText", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(toolTipText$1LBL);
				setProperty("toolTipText");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return toolTipTextTXT;
	}
	public XjcTextController createVisible(ControllerCore genCode) {
		// Creates control for XjcTextController visibleTXT
		visibleTXT = new XjcTextController("visible", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(visible$1LBL);
				setProperty("visible");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return visibleTXT;
	}
}