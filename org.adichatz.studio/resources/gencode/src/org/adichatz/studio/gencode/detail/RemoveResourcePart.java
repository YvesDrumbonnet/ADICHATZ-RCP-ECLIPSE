/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Mon Jul 06 18:35:15 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.CheckBoxController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.xjc.ActionWhenTypeEnum;
import org.adichatz.studio.xjc.controller.CodeTextController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/RemoveResourcePart")
public class RemoveResourcePart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController actionWhen$1LBL.
	private LabelController actionWhen$1LBL;
	// the RadioGroupController actionWhenRG.
	private RadioGroupController actionWhenRG;
	// the LabelController relative$1LBL.
	private LabelController relative$1LBL;
	// the CheckBoxController relativeCB.
	private CheckBoxController relativeCB;
	// the LabelController targetURI$1LBL.
	private LabelController targetURI$1LBL;
	// the TextController targetURITXT.
	private TextController targetURITXT;
	// the LabelController throwError$1LBL.
	private LabelController throwError$1LBL;
	// the CheckBoxController throwErrorCB.
	private CheckBoxController throwErrorCB;
	// the LabelController condition$1LBL.
	private LabelController condition$1LBL;
	// the CodeTextController conditionTXT.
	private CodeTextController conditionTXT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Instantiates a new RemoveResourcePart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public RemoveResourcePart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part RemoveResourcePart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public RemoveResourcePart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController actionWhen$1LBL
		actionWhen$1LBL = new LabelController("actionWhen$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "removeResource", "actionWhen").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createActionWhen(this);
		// Creates control for LabelController relative$1LBL
		relative$1LBL = new LabelController("relative$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "removeResource", "relative").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createRelative(this);
		// Creates control for LabelController targetURI$1LBL
		targetURI$1LBL = new LabelController("targetURI$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "removeResource", "targetURI").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createTargetURI(this);
		// Creates control for LabelController throwError$1LBL
		throwError$1LBL = new LabelController("throwError$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "removeResource", "throwError").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createThrowError(this);
		// Creates control for LabelController condition$1LBL
		condition$1LBL = new LabelController("condition$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "removeResource", "condition").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createCondition(this);
	}
	public RadioGroupController createActionWhen(ControllerCore genCode) {
		// Creates control for RadioGroupController actionWhenRG
		actionWhenRG = new RadioGroupController("actionWhen", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(actionWhen$1LBL);
				setProperty("actionWhen");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((ActionWhenTypeEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(ActionWhenTypeEnum.class.getEnumConstants());
			}
		};
		return actionWhenRG;
	}
	public CheckBoxController createRelative(ControllerCore genCode) {
		// Creates control for CheckBoxController relativeCB
		relativeCB = new CheckBoxController("relative", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(relative$1LBL);
				setProperty("relative");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return relativeCB;
	}
	public TextController createTargetURI(ControllerCore genCode) {
		// Creates control for TextController targetURITXT
		targetURITXT = new TextController("targetURI", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(targetURI$1LBL);
				setProperty("targetURI");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return targetURITXT;
	}
	public CheckBoxController createThrowError(ControllerCore genCode) {
		// Creates control for CheckBoxController throwErrorCB
		throwErrorCB = new CheckBoxController("throwError", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(throwError$1LBL);
				setProperty("throwError");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return throwErrorCB;
	}
	public CodeTextController createCondition(ControllerCore genCode) {
		// Creates control for CodeTextController conditionTXT
		conditionTXT = new CodeTextController("condition", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(condition$1LBL);
				setProperty("condition");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | AdiSWT.EXPANDABLE);
				}
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return conditionTXT;
	}
}