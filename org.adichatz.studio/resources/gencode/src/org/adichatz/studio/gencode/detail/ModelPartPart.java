/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Tue Apr 28 15:53:18 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import java.util.Arrays;
import java.util.List;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdiPluginResources;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.RadioGroupController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.DataReferenceManager;
import org.adichatz.engine.core.AContainerCore;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.plugin.ParamMap;
import org.adichatz.engine.plugin.RegisterEntry;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.generator.xjc.ModelProcurementEnum;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/ModelPartPart")
public class ModelPartPart extends AContainerCore {
	// the ScrolledCompositeController itemCompositeSCLC.
	protected ScrolledCompositeController itemCompositeSCLC;
	// the LabelController connectorASVersion$1LBL.
	private LabelController connectorASVersion$1LBL;
	// the TextController connectorASVersionTXT.
	private TextController connectorASVersionTXT;
	// the LabelController connectorDataSource$1LBL.
	private LabelController connectorDataSource$1LBL;
	// the TextController connectorDataSourceTXT.
	private TextController connectorDataSourceTXT;
	// the LabelController dataSourceFileName$1LBL.
	private LabelController dataSourceFileName$1LBL;
	// the TextController dataSourceFileNameTXT.
	private TextController dataSourceFileNameTXT;
	// the LabelController dataSourceUnit$1LBL.
	private LabelController dataSourceUnit$1LBL;
	// the TextController dataSourceUnitTXT.
	private TextController dataSourceUnitTXT;
	// the LabelController ejbFileName$1LBL.
	private LabelController ejbFileName$1LBL;
	// the TextController ejbFileNameTXT.
	private TextController ejbFileNameTXT;
	// the LabelController jndi$1LBL.
	private LabelController jndi$1LBL;
	// the TextController jndiTXT.
	private TextController jndiTXT;
	// the LabelController lockManagerClassName$1LBL.
	private LabelController lockManagerClassName$1LBL;
	// the TextController lockManagerClassNameTXT.
	private TextController lockManagerClassNameTXT;
	// the LabelController modelPackageName$1LBL.
	private LabelController modelPackageName$1LBL;
	// the TextController modelPackageNameTXT.
	private TextController modelPackageNameTXT;
	// the LabelController modelProcurement$1LBL.
	private LabelController modelProcurement$1LBL;
	// the RadioGroupController modelProcurementRG.
	private RadioGroupController modelProcurementRG;
	// the LabelController modelProcurementFolder$1LBL.
	private LabelController modelProcurementFolder$1LBL;
	// the TextController modelProcurementFolderTXT.
	private TextController modelProcurementFolderTXT;
	// the LabelController persistenceManagerClassName$1LBL.
	private LabelController persistenceManagerClassName$1LBL;
	// the TextController persistenceManagerClassNameTXT.
	private TextController persistenceManagerClassNameTXT;
	/**
	 * Instantiates a new ModelPartPart.
	 * 
	 * This constructor could be used by dynamic controller.
	 * 
	 * @param parentContext
	 *            the parent context
	 * @param parentController
	 *            the parent controller
	 */
	public ModelPartPart(AdiContext parentContext, IContainerController parentController) {
		super(null, parentController, null);
		coreController = parentController;
	}

	/**
	 * Creates the part ModelPartPart.
	 *
	 * @param pluginResources
	 *            the plugin resources
	 * @param coreController
	 *            the parent controller
	 * @param paramMap
	 *            the param map
	*/
	public ModelPartPart(AdiPluginResources pluginResources, IContainerController coreController, ParamMap paramMap) {
		super(pluginResources, coreController, paramMap);
		ContainerController containerController = (ContainerController) coreController;
		getRegister().put("detailPart", new RegisterEntry<ContainerController>(containerController, ContainerController.class));
		createContents();
	}

	/**
	 * creates contents
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController itemCompositeSCLC
		itemCompositeSCLC = new ScrolledCompositeController("itemComposite", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController connectorASVersion$1LBL
		connectorASVersion$1LBL = new LabelController("connectorASVersion$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "connectorASVersion").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createConnectorASVersion(this);
		// Creates control for LabelController connectorDataSource$1LBL
		connectorDataSource$1LBL = new LabelController("connectorDataSource$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "connectorDataSource").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createConnectorDataSource(this);
		// Creates control for LabelController dataSourceFileName$1LBL
		dataSourceFileName$1LBL = new LabelController("dataSourceFileName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "dataSourceFileName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createDataSourceFileName(this);
		// Creates control for LabelController dataSourceUnit$1LBL
		dataSourceUnit$1LBL = new LabelController("dataSourceUnit$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "dataSourceUnit").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createDataSourceUnit(this);
		// Creates control for LabelController ejbFileName$1LBL
		ejbFileName$1LBL = new LabelController("ejbFileName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "ejbFileName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEjbFileName(this);
		// Creates control for LabelController jndi$1LBL
		jndi$1LBL = new LabelController("jndi$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "jndi").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createJndi(this);
		// Creates control for LabelController lockManagerClassName$1LBL
		lockManagerClassName$1LBL = new LabelController("lockManagerClassName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "lockManagerClassName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLockManagerClassName(this);
		// Creates control for LabelController modelPackageName$1LBL
		modelPackageName$1LBL = new LabelController("modelPackageName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "modelPackageName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createModelPackageName(this);
		// Creates control for LabelController modelProcurement$1LBL
		modelProcurement$1LBL = new LabelController("modelProcurement$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "modelProcurement").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createModelProcurement(this);
		// Creates control for LabelController modelProcurementFolder$1LBL
		modelProcurementFolder$1LBL = new LabelController("modelProcurementFolder$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "modelProcurementFolder").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createModelProcurementFolder(this);
		// Creates control for LabelController persistenceManagerClassName$1LBL
		persistenceManagerClassName$1LBL = new LabelController("persistenceManagerClassName$1", itemCompositeSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "modelPart", "persistenceManagerClassName").concat(":"));
					setForeground(AdichatzApplication.getInstance().getFormToolkit().getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createPersistenceManagerClassName(this);
	}
	public TextController createConnectorASVersion(ControllerCore genCode) {
		// Creates control for TextController connectorASVersionTXT
		connectorASVersionTXT = new TextController("connectorASVersion", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(connectorASVersion$1LBL);
				setProperty("connectorASVersion");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return connectorASVersionTXT;
	}
	public TextController createConnectorDataSource(ControllerCore genCode) {
		// Creates control for TextController connectorDataSourceTXT
		connectorDataSourceTXT = new TextController("connectorDataSource", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(connectorDataSource$1LBL);
				setProperty("connectorDataSource");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return connectorDataSourceTXT;
	}
	public TextController createDataSourceFileName(ControllerCore genCode) {
		// Creates control for TextController dataSourceFileNameTXT
		dataSourceFileNameTXT = new TextController("dataSourceFileName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(dataSourceFileName$1LBL);
				setProperty("dataSourceFileName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return dataSourceFileNameTXT;
	}
	public TextController createDataSourceUnit(ControllerCore genCode) {
		// Creates control for TextController dataSourceUnitTXT
		dataSourceUnitTXT = new TextController("dataSourceUnit", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(dataSourceUnit$1LBL);
				setProperty("dataSourceUnit");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return dataSourceUnitTXT;
	}
	public TextController createEjbFileName(ControllerCore genCode) {
		// Creates control for TextController ejbFileNameTXT
		ejbFileNameTXT = new TextController("ejbFileName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(ejbFileName$1LBL);
				setProperty("ejbFileName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return ejbFileNameTXT;
	}
	public TextController createJndi(ControllerCore genCode) {
		// Creates control for TextController jndiTXT
		jndiTXT = new TextController("jndi", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(jndi$1LBL);
				setProperty("jndi");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return jndiTXT;
	}
	public TextController createLockManagerClassName(ControllerCore genCode) {
		// Creates control for TextController lockManagerClassNameTXT
		lockManagerClassNameTXT = new TextController("lockManagerClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(lockManagerClassName$1LBL);
				setProperty("lockManagerClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return lockManagerClassNameTXT;
	}
	public TextController createModelPackageName(ControllerCore genCode) {
		// Creates control for TextController modelPackageNameTXT
		modelPackageNameTXT = new TextController("modelPackageName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(modelPackageName$1LBL);
				setProperty("modelPackageName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return modelPackageNameTXT;
	}
	public RadioGroupController createModelProcurement(ControllerCore genCode) {
		// Creates control for RadioGroupController modelProcurementRG
		modelProcurementRG = new RadioGroupController("modelProcurement", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(modelProcurement$1LBL);
				setProperty("modelProcurement");
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					labelProvider = new LabelProvider() {
						public String getText(Object element) {
							return ((ModelProcurementEnum) element).value();
						}
					};
				}
				super.createControl();
				if (isValid()) {
					dataReferenceManager = new DataReferenceManager(this);
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
			@Override
			public List getValues() {
				return Arrays.asList(ModelProcurementEnum.class.getEnumConstants());
			}
		};
		return modelProcurementRG;
	}
	public TextController createModelProcurementFolder(ControllerCore genCode) {
		// Creates control for TextController modelProcurementFolderTXT
		modelProcurementFolderTXT = new TextController("modelProcurementFolder", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(modelProcurementFolder$1LBL);
				setProperty("modelProcurementFolder");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return modelProcurementFolderTXT;
	}
	public TextController createPersistenceManagerClassName(ControllerCore genCode) {
		// Creates control for TextController persistenceManagerClassNameTXT
		persistenceManagerClassNameTXT = new TextController("persistenceManagerClassName", getParentController(itemCompositeSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(persistenceManagerClassName$1LBL);
				setProperty("persistenceManagerClassName");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return persistenceManagerClassNameTXT;
	}
}