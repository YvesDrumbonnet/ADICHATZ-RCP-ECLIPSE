/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Sat Dec 07 15:19:22 CET 2019
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.editor;

import java.io.File;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.IValidableController;
import org.adichatz.engine.controller.collection.GroupController;
import org.adichatz.engine.controller.field.FileTextController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.utils.AdiSWT;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.validation.AValidator;
import org.adichatz.engine.validation.MandatoryValidator;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.swt.SWT;

@AdiResourceURI(URI="adi://org.adichatz.studio/editor/ApplicationServerManagerPart")
public class ApplicationServerManagerPartServerGroup extends EntityManagerCore {
	// the LabelController asHomeLBLLBL.
	private LabelController asHomeLBLLBL;
	// the FileTextController applicationServerHomeFT.
	private FileTextController applicationServerHomeFT;
	// the LabelController asDeploymentDirLBLLBL.
	private LabelController asDeploymentDirLBLLBL;
	// the TextController ejbDeploymentDirTXT.
	private TextController ejbDeploymentDirTXT;
	// the LabelController asModulesDirectoryLBLLBL.
	private LabelController asModulesDirectoryLBLLBL;
	// the TextController asModulesDirectoryTXT.
	private TextController asModulesDirectoryTXT;
	/**
	 * Creates ApplicationServerManagerPartServerGroup.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public ApplicationServerManagerPartServerGroup(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new GroupController("serverGroup", parentController, this) {
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.as.SERVER"));
						getComposite().setLayout(new MigLayout("wrap 2","[]15[grow,fill]","[]2[]2[]"));
						getControl().setFont(JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT));
						getControl().setLayoutData("h 0:n:n, w 0:n:n");
						addValidator(new AValidator(this, "invalidInstallation", (IValidableController) getFromRegister("ejb.deployment.dir")) {
							private boolean hasError() {
								String serverHome = (String) ((FileTextController) getFromRegister("application.server.home")).getValue(); 
								String deployDir = (String) ((TextController) getFromRegister("ejb.deployment.dir")).getValue(); 
								if (null == serverHome || null == deployDir)
								   return true;
								return !(new File(serverHome.concat("/").concat(deployDir)).exists());
							}
							public int validate() {
								if (hasError()) {
									return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.fullProject.applicationServer"));
								} else {
									return setLevel(IMessageProvider.NONE, null);
								}
							};
						});
						addValidator(new AValidator(this, "invalidModulesDirectory", (IValidableController) getFromRegister("as.modules.directory")) {
							private boolean hasError() {
								String serverHome = (String) ((FileTextController) getFromRegister("application.server.home")).getValue(); 
								String modulesDirectory = (String) ((TextController) getFromRegister("as.modules.directory")).getValue(); 
								if (null == serverHome || null == modulesDirectory)
								   return true;
								return !(new File(serverHome.concat("/").concat(modulesDirectory)).exists());
							}
							public int validate() {
								if (hasError()) {
									return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.invalid.modules.directory"));
								} else {
									return setLevel(IMessageProvider.NONE, null);
								}
							};
						});
					}
				}
			};
			createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for LabelController asHomeLBLLBL
		asHomeLBLLBL = new LabelController("asHomeLBL", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.as.home"));
				}
			}
		};
		createApplicationServerHome(this);
		// Creates control for LabelController asDeploymentDirLBLLBL
		asDeploymentDirLBLLBL = new LabelController("asDeploymentDirLBL", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.as.deploymentDir"));
				}
			}
		};
		createEjbDeploymentDir(this);
		// Creates control for LabelController asModulesDirectoryLBLLBL
		asModulesDirectoryLBLLBL = new LabelController("as.modules.directoryLBL", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.as.modulesDir"));
				}
			}
		};
		createAsModulesDirectory(this);
	}
	public FileTextController createApplicationServerHome(ControllerCore genCode) {
		// Creates control for FileTextController applicationServerHomeFT
		applicationServerHomeFT = new FileTextController("application.server.home", getParentController(coreController), genCode) {
			@Override
			public void initialize() {
				setForceBinding(true);
				super.initialize();
			}
			@Override
			public void createControl() {
				if (isValid()) {
					setStyle(SWT.BORDER | AdiSWT.DIRECTORY | SWT.NONE);
				}
				super.createControl();
				if (isValid()) {
					getControl().setLayoutData("wmin 400");
					getControl().getText().setToolTipText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.applicationServer.dir.sample"));
					addValidator(new AValidator(this, "invalidDeployDir") {
						private boolean hasError() {
							return null == getValue() || !(new File((String) getValue()).exists());
						}
						public int validate() {
							if (hasError()) {
								return setLevel(IMessageProvider.ERROR, AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "scenario.applicationServer.invalid.deploymentDir"));
							} else {
								return setLevel(IMessageProvider.NONE, null);
							}
						};
					});
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return applicationServerHomeFT;
	}
	public TextController createEjbDeploymentDir(ControllerCore genCode) {
		// Creates control for TextController ejbDeploymentDirTXT
		ejbDeploymentDirTXT = new TextController("ejb.deployment.dir", getParentController(coreController), genCode) {
			@Override
			public void initialize() {
				setForceBinding(true);
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
				}
			}
		};
		return ejbDeploymentDirTXT;
	}
	public TextController createAsModulesDirectory(ControllerCore genCode) {
		// Creates control for TextController asModulesDirectoryTXT
		asModulesDirectoryTXT = new TextController("as.modules.directory", getParentController(coreController), genCode) {
			@Override
			public void initialize() {
				setForceBinding(true);
				super.initialize();
			}
		};
		return asModulesDirectoryTXT;
	}
}