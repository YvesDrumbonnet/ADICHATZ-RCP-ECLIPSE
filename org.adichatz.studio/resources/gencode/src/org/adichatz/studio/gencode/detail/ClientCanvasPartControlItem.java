/**********************************************************************************************
 * This class was automatically generated by Adichatz tools on Mon Jul 06 18:33:35 CEST 2020
 *
 * 				+----------------------------------------+
 * 				| BE CAREFUL BEFORE UPDATING THIS CLASS! |
 * 				+----------------------------------------+
 *
 * Changes will be transient up to next generation process.
 * **********************************************************************************************/
package org.adichatz.studio.gencode.detail;

import javax.inject.Inject;
import net.miginfocom.swt.MigLayout;
import org.adichatz.engine.common.AdichatzApplication;
import org.adichatz.engine.controller.IContainerController;
import org.adichatz.engine.controller.collection.ScrolledCompositeController;
import org.adichatz.engine.controller.field.LabelController;
import org.adichatz.engine.controller.field.TextController;
import org.adichatz.engine.controller.nebula.PShelfController;
import org.adichatz.engine.controller.nebula.PShelfItemController;
import org.adichatz.engine.core.ControllerCore;
import org.adichatz.engine.core.EntityManagerCore;
import org.adichatz.engine.extra.AdiResourceURI;
import org.adichatz.engine.plugin.AdiContext;
import org.adichatz.engine.renderer.AdiFormToolkit;
import org.adichatz.engine.validation.MandatoryValidator;
import org.adichatz.studio.xjc.controller.ColorController;
import org.adichatz.studio.xjc.controller.FontController;
import org.adichatz.studio.xjc.controller.XjcFocusListener;
import org.adichatz.studio.xjc.controller.XjcTextController;
import org.adichatz.studio.xjc.data.XjcFieldBindingManager;
import org.eclipse.ui.forms.IFormColors;

@AdiResourceURI(URI="adi://org.adichatz.studio/detail/ClientCanvasPart")
public class ClientCanvasPartControlItem extends EntityManagerCore {
	// the ScrolledCompositeController controlItemSCSCLC.
	protected ScrolledCompositeController controlItemSCSCLC;
	// the LabelController background$1LBL.
	private LabelController background$1LBL;
	// the ColorController backgroundTXT.
	private ColorController backgroundTXT;
	// the LabelController backgroundImage$1LBL.
	private LabelController backgroundImage$1LBL;
	// the TextController backgroundImageTXT.
	private TextController backgroundImageTXT;
	// the LabelController bounds$1LBL.
	private LabelController bounds$1LBL;
	// the TextController boundsTXT.
	private TextController boundsTXT;
	// the LabelController capture$1LBL.
	private LabelController capture$1LBL;
	// the TextController captureTXT.
	private TextController captureTXT;
	// the LabelController clientBackground$1LBL.
	private LabelController clientBackground$1LBL;
	// the ColorController clientBackgroundTXT.
	private ColorController clientBackgroundTXT;
	// the LabelController clientBackgroundImage$1LBL.
	private LabelController clientBackgroundImage$1LBL;
	// the TextController clientBackgroundImageTXT.
	private TextController clientBackgroundImageTXT;
	// the LabelController clientBounds$1LBL.
	private LabelController clientBounds$1LBL;
	// the TextController clientBoundsTXT.
	private TextController clientBoundsTXT;
	// the LabelController clientCapture$1LBL.
	private LabelController clientCapture$1LBL;
	// the TextController clientCaptureTXT.
	private TextController clientCaptureTXT;
	// the LabelController clientFocus$1LBL.
	private LabelController clientFocus$1LBL;
	// the TextController clientFocusTXT.
	private TextController clientFocusTXT;
	// the LabelController clientFont$1LBL.
	private LabelController clientFont$1LBL;
	// the FontController clientFontTXT.
	private FontController clientFontTXT;
	// the LabelController clientForeground$1LBL.
	private LabelController clientForeground$1LBL;
	// the ColorController clientForegroundTXT.
	private ColorController clientForegroundTXT;
	// the LabelController clientLayoutData$1LBL.
	private LabelController clientLayoutData$1LBL;
	// the TextController clientLayoutDataTXT.
	private TextController clientLayoutDataTXT;
	// the LabelController clientLocation$1LBL.
	private LabelController clientLocation$1LBL;
	// the TextController clientLocationTXT.
	private TextController clientLocationTXT;
	// the LabelController clientMenu$1LBL.
	private LabelController clientMenu$1LBL;
	// the TextController clientMenuTXT.
	private TextController clientMenuTXT;
	// the LabelController clientRedraw$1LBL.
	private LabelController clientRedraw$1LBL;
	// the TextController clientRedrawTXT.
	private TextController clientRedrawTXT;
	// the LabelController clientSize$1LBL.
	private LabelController clientSize$1LBL;
	// the TextController clientSizeTXT.
	private TextController clientSizeTXT;
	// the LabelController clientStyle$1LBL.
	private LabelController clientStyle$1LBL;
	// the TextController clientStyleTXT.
	private TextController clientStyleTXT;
	// the LabelController enabled$1LBL.
	private LabelController enabled$1LBL;
	// the XjcTextController enabledTXT.
	private XjcTextController enabledTXT;
	// the LabelController expanded$1LBL.
	private LabelController expanded$1LBL;
	// the XjcTextController expandedTXT.
	private XjcTextController expandedTXT;
	// the LabelController focus$1LBL.
	private LabelController focus$1LBL;
	// the TextController focusTXT.
	private TextController focusTXT;
	// the LabelController font$1LBL.
	private LabelController font$1LBL;
	// the FontController fontTXT.
	private FontController fontTXT;
	// the LabelController foreground$1LBL.
	private LabelController foreground$1LBL;
	// the ColorController foregroundTXT.
	private ColorController foregroundTXT;
	// the LabelController layoutData$1LBL.
	private LabelController layoutData$1LBL;
	// the XjcTextController layoutDataTXT.
	private XjcTextController layoutDataTXT;
	// the LabelController location$1LBL.
	private LabelController location$1LBL;
	// the TextController locationTXT.
	private TextController locationTXT;
	// the LabelController menu$1LBL.
	private LabelController menu$1LBL;
	// the TextController menuTXT.
	private TextController menuTXT;
	// the LabelController redraw$1LBL.
	private LabelController redraw$1LBL;
	// the TextController redrawTXT.
	private TextController redrawTXT;
	// the LabelController size$1LBL.
	private LabelController size$1LBL;
	// the TextController sizeTXT.
	private TextController sizeTXT;
	// the LabelController style$1LBL.
	private LabelController style$1LBL;
	// the TextController styleTXT.
	private TextController styleTXT;
	// the LabelController text$1LBL.
	private LabelController text$1LBL;
	// the TextController textTXT.
	private TextController textTXT;
	// the LabelController visible$1LBL.
	private LabelController visible$1LBL;
	// the XjcTextController visibleTXT.
	private XjcTextController visibleTXT;
	@Inject
	protected AdiFormToolkit toolkit;
	/**
	 * Creates ClientCanvasPartControlItem.
	 *
	 * @param context
	 *            The context of the root controller
	 * @param core controller
	 *            The collection controller linked to the class
	 */
	public ClientCanvasPartControlItem(final AdiContext context, IContainerController parentController) {
		super(context);
		// do not create contents when context is null because that means that class is invoked from dynamic part
		if (null != context) {
			coreController = new PShelfItemController("controlItem", parentController, this) {
				@Override
				public void createControl() {
					super.createControl();
					if (isValid()) {
						getItem().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "adichatzStudio", "studio.xjcEditor.controlItem"));
					}
				}
			};
			if (!((PShelfController) parentController).isDelayed())
				createContents();
		} else
			coreController = parentController;
	}

	/**
	 * creates contents for controller
	 */
	public void createContents(){
		// Creates control for ScrolledCompositeController controlItemSCSCLC
		controlItemSCSCLC = new ScrolledCompositeController("controlItemSC", coreController, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					setDirtyManagement(false);
					getComposite().setLayout(new MigLayout("wrap 2","[align right]10[fill,grow]","[]"));
				}
			}
		};
		// Creates control for LabelController background$1LBL
		background$1LBL = new LabelController("background$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "collection", "background").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBackground(this);
		// Creates control for LabelController backgroundImage$1LBL
		backgroundImage$1LBL = new LabelController("backgroundImage$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "backgroundImage").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBackgroundImage(this);
		// Creates control for LabelController bounds$1LBL
		bounds$1LBL = new LabelController("bounds$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "bounds").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createBounds(this);
		// Creates control for LabelController capture$1LBL
		capture$1LBL = new LabelController("capture$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "capture").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createCapture(this);
		// Creates control for LabelController clientBackground$1LBL
		clientBackground$1LBL = new LabelController("clientBackground$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientBackground").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientBackground(this);
		// Creates control for LabelController clientBackgroundImage$1LBL
		clientBackgroundImage$1LBL = new LabelController("clientBackgroundImage$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientBackgroundImage").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientBackgroundImage(this);
		// Creates control for LabelController clientBounds$1LBL
		clientBounds$1LBL = new LabelController("clientBounds$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientBounds").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientBounds(this);
		// Creates control for LabelController clientCapture$1LBL
		clientCapture$1LBL = new LabelController("clientCapture$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientCapture").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientCapture(this);
		// Creates control for LabelController clientFocus$1LBL
		clientFocus$1LBL = new LabelController("clientFocus$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientFocus").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientFocus(this);
		// Creates control for LabelController clientFont$1LBL
		clientFont$1LBL = new LabelController("clientFont$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientFont").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientFont(this);
		// Creates control for LabelController clientForeground$1LBL
		clientForeground$1LBL = new LabelController("clientForeground$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientForeground").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientForeground(this);
		// Creates control for LabelController clientLayoutData$1LBL
		clientLayoutData$1LBL = new LabelController("clientLayoutData$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientLayoutData").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientLayoutData(this);
		// Creates control for LabelController clientLocation$1LBL
		clientLocation$1LBL = new LabelController("clientLocation$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientLocation").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientLocation(this);
		// Creates control for LabelController clientMenu$1LBL
		clientMenu$1LBL = new LabelController("clientMenu$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientMenu").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientMenu(this);
		// Creates control for LabelController clientRedraw$1LBL
		clientRedraw$1LBL = new LabelController("clientRedraw$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientRedraw").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientRedraw(this);
		// Creates control for LabelController clientSize$1LBL
		clientSize$1LBL = new LabelController("clientSize$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientSize").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientSize(this);
		// Creates control for LabelController clientStyle$1LBL
		clientStyle$1LBL = new LabelController("clientStyle$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "clientStyle").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createClientStyle(this);
		// Creates control for LabelController enabled$1LBL
		enabled$1LBL = new LabelController("enabled$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "collection", "enabled").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createEnabled(this);
		// Creates control for LabelController expanded$1LBL
		expanded$1LBL = new LabelController("expanded$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "expanded").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createExpanded(this);
		// Creates control for LabelController focus$1LBL
		focus$1LBL = new LabelController("focus$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "focus").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createFocus(this);
		// Creates control for LabelController font$1LBL
		font$1LBL = new LabelController("font$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "font").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createFont(this);
		// Creates control for LabelController foreground$1LBL
		foreground$1LBL = new LabelController("foreground$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "collection", "foreground").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createForeground(this);
		// Creates control for LabelController layoutData$1LBL
		layoutData$1LBL = new LabelController("layoutData$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "lazyFetchContainer", "layoutData").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLayoutData(this);
		// Creates control for LabelController location$1LBL
		location$1LBL = new LabelController("location$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "location").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createLocation(this);
		// Creates control for LabelController menu$1LBL
		menu$1LBL = new LabelController("menu$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "menu").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createMenu(this);
		// Creates control for LabelController redraw$1LBL
		redraw$1LBL = new LabelController("redraw$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "redraw").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createRedraw(this);
		// Creates control for LabelController size$1LBL
		size$1LBL = new LabelController("size$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "fieldContainer", "size").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createSize(this);
		// Creates control for LabelController style$1LBL
		style$1LBL = new LabelController("style$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "collection", "style").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createStyle(this);
		// Creates control for LabelController text$1LBL
		text$1LBL = new LabelController("text$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "clientCanvas", "text").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createText(this);
		// Creates control for LabelController visible$1LBL
		visible$1LBL = new LabelController("visible$1", controlItemSCSCLC, this) {
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					getControl().setText(AdichatzApplication.getInstance().getMessage("org.adichatz.studio", "collection", "visible").concat(":"));
					setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
				}
			}
		};
		createVisible(this);
	}
	public ColorController createBackground(ControllerCore genCode) {
		// Creates control for ColorController backgroundTXT
		backgroundTXT = new ColorController("background", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(background$1LBL);
				setProperty("background");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return backgroundTXT;
	}
	public TextController createBackgroundImage(ControllerCore genCode) {
		// Creates control for TextController backgroundImageTXT
		backgroundImageTXT = new TextController("backgroundImage", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(backgroundImage$1LBL);
				setProperty("backgroundImage");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return backgroundImageTXT;
	}
	public TextController createBounds(ControllerCore genCode) {
		// Creates control for TextController boundsTXT
		boundsTXT = new TextController("bounds", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(bounds$1LBL);
				setProperty("bounds");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return boundsTXT;
	}
	public TextController createCapture(ControllerCore genCode) {
		// Creates control for TextController captureTXT
		captureTXT = new TextController("capture", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(capture$1LBL);
				setProperty("capture");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return captureTXT;
	}
	public ColorController createClientBackground(ControllerCore genCode) {
		// Creates control for ColorController clientBackgroundTXT
		clientBackgroundTXT = new ColorController("clientBackground", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientBackground$1LBL);
				setProperty("clientBackground");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientBackgroundTXT;
	}
	public TextController createClientBackgroundImage(ControllerCore genCode) {
		// Creates control for TextController clientBackgroundImageTXT
		clientBackgroundImageTXT = new TextController("clientBackgroundImage", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientBackgroundImage$1LBL);
				setProperty("clientBackgroundImage");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientBackgroundImageTXT;
	}
	public TextController createClientBounds(ControllerCore genCode) {
		// Creates control for TextController clientBoundsTXT
		clientBoundsTXT = new TextController("clientBounds", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientBounds$1LBL);
				setProperty("clientBounds");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientBoundsTXT;
	}
	public TextController createClientCapture(ControllerCore genCode) {
		// Creates control for TextController clientCaptureTXT
		clientCaptureTXT = new TextController("clientCapture", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientCapture$1LBL);
				setProperty("clientCapture");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientCaptureTXT;
	}
	public TextController createClientFocus(ControllerCore genCode) {
		// Creates control for TextController clientFocusTXT
		clientFocusTXT = new TextController("clientFocus", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientFocus$1LBL);
				setProperty("clientFocus");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientFocusTXT;
	}
	public FontController createClientFont(ControllerCore genCode) {
		// Creates control for FontController clientFontTXT
		clientFontTXT = new FontController("clientFont", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientFont$1LBL);
				setProperty("clientFont");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientFontTXT;
	}
	public ColorController createClientForeground(ControllerCore genCode) {
		// Creates control for ColorController clientForegroundTXT
		clientForegroundTXT = new ColorController("clientForeground", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientForeground$1LBL);
				setProperty("clientForeground");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientForegroundTXT;
	}
	public TextController createClientLayoutData(ControllerCore genCode) {
		// Creates control for TextController clientLayoutDataTXT
		clientLayoutDataTXT = new TextController("clientLayoutData", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientLayoutData$1LBL);
				setProperty("clientLayoutData");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientLayoutDataTXT;
	}
	public TextController createClientLocation(ControllerCore genCode) {
		// Creates control for TextController clientLocationTXT
		clientLocationTXT = new TextController("clientLocation", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientLocation$1LBL);
				setProperty("clientLocation");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientLocationTXT;
	}
	public TextController createClientMenu(ControllerCore genCode) {
		// Creates control for TextController clientMenuTXT
		clientMenuTXT = new TextController("clientMenu", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientMenu$1LBL);
				setProperty("clientMenu");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientMenuTXT;
	}
	public TextController createClientRedraw(ControllerCore genCode) {
		// Creates control for TextController clientRedrawTXT
		clientRedrawTXT = new TextController("clientRedraw", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientRedraw$1LBL);
				setProperty("clientRedraw");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientRedrawTXT;
	}
	public TextController createClientSize(ControllerCore genCode) {
		// Creates control for TextController clientSizeTXT
		clientSizeTXT = new TextController("clientSize", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientSize$1LBL);
				setProperty("clientSize");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientSizeTXT;
	}
	public TextController createClientStyle(ControllerCore genCode) {
		// Creates control for TextController clientStyleTXT
		clientStyleTXT = new TextController("clientStyle", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(clientStyle$1LBL);
				setProperty("clientStyle");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return clientStyleTXT;
	}
	public XjcTextController createEnabled(ControllerCore genCode) {
		// Creates control for XjcTextController enabledTXT
		enabledTXT = new XjcTextController("enabled", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(enabled$1LBL);
				setProperty("enabled");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return enabledTXT;
	}
	public XjcTextController createExpanded(ControllerCore genCode) {
		// Creates control for XjcTextController expandedTXT
		expandedTXT = new XjcTextController("expanded", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(expanded$1LBL);
				setProperty("expanded");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return expandedTXT;
	}
	public TextController createFocus(ControllerCore genCode) {
		// Creates control for TextController focusTXT
		focusTXT = new TextController("focus", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(focus$1LBL);
				setProperty("focus");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return focusTXT;
	}
	public FontController createFont(ControllerCore genCode) {
		// Creates control for FontController fontTXT
		fontTXT = new FontController("font", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(font$1LBL);
				setProperty("font");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return fontTXT;
	}
	public ColorController createForeground(ControllerCore genCode) {
		// Creates control for ColorController foregroundTXT
		foregroundTXT = new ColorController("foreground", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(foreground$1LBL);
				setProperty("foreground");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return foregroundTXT;
	}
	public XjcTextController createLayoutData(ControllerCore genCode) {
		// Creates control for XjcTextController layoutDataTXT
		layoutDataTXT = new XjcTextController("layoutData", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(layoutData$1LBL);
				setProperty("layoutData");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return layoutDataTXT;
	}
	public TextController createLocation(ControllerCore genCode) {
		// Creates control for TextController locationTXT
		locationTXT = new TextController("location", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(location$1LBL);
				setProperty("location");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return locationTXT;
	}
	public TextController createMenu(ControllerCore genCode) {
		// Creates control for TextController menuTXT
		menuTXT = new TextController("menu", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(menu$1LBL);
				setProperty("menu");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return menuTXT;
	}
	public TextController createRedraw(ControllerCore genCode) {
		// Creates control for TextController redrawTXT
		redrawTXT = new TextController("redraw", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(redraw$1LBL);
				setProperty("redraw");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return redrawTXT;
	}
	public TextController createSize(ControllerCore genCode) {
		// Creates control for TextController sizeTXT
		sizeTXT = new TextController("size", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(size$1LBL);
				setProperty("size");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return sizeTXT;
	}
	public TextController createStyle(ControllerCore genCode) {
		// Creates control for TextController styleTXT
		styleTXT = new TextController("style", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(style$1LBL);
				setProperty("style");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return styleTXT;
	}
	public TextController createText(ControllerCore genCode) {
		// Creates control for TextController textTXT
		textTXT = new TextController("text", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(text$1LBL);
				setProperty("text");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					addValidator(new MandatoryValidator(this, "mandatoryField"));
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return textTXT;
	}
	public XjcTextController createVisible(ControllerCore genCode) {
		// Creates control for XjcTextController visibleTXT
		visibleTXT = new XjcTextController("visible", getParentController(controlItemSCSCLC), genCode) {
			@Override
			public void initialize() {
				setLinkedController(visible$1LBL);
				setProperty("visible");
				super.initialize();
			}
			@Override
			public void createControl() {
				super.createControl();
				if (isValid()) {
					if (null != fieldBindManager)
						fieldBindManager = new XjcFieldBindingManager(this);
					getControl().addFocusListener(new XjcFocusListener(this));
				}
			}
		};
		return visibleTXT;
	}
}