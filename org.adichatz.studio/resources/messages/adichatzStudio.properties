# The following value is in use as a console identifier
studio.adichatzConsole = Adichatz stdio/stderr.

###################################################
###					S T U D I O					###
###################################################
studio.menu.productExportAction = Export Adichatz product

studio.menu.continue = Do you want to continue ?  
studio.menu.openWithXjcEditor = Open with XJC editor
studio.menu.label.pojoNotYetImplemented = {0} - ***Not yet implemented POJO***.

studio.menu.switchToCustomizeFile.switchEditor = SwitchEditor
studio.menu.switchToCustomizeFile.switchEditor.message = An editor with current generated file is open.\n\n Do you want to :
studio.menu.switchToCustomizeFile.openEditor.customizedFile = Open a new editor with the customized file '{0}'.
studio.menu.switchToCustomizeFile.closeEditor.closeFile = Close current editor for the generated file '{0}'.
studio.menu.switchToCustomizeFile.customizedVersionCreated = customized version was create for file '{0}'.
studio.menu.switchToCustomizeFile.confirm = Do you really want to create  a customized version for selected files.

studio.menu.deleteAction = Delete
studio.menu.deleteAction.deleteSectionText = List of resources marked to be deleted.
studio.menu.deleteAction.deleteColumnText = Resource marked to be deleted  
studio.menu.deleteAction.generateSectionText = List of resources marked to be generated.
studio.menu.deleteAction.generateColumnText = Resource marked to be generated
studio.menu.deleteAction.warning = Deletion of resources is definitive!  
studio.menu.deleteAction.deletingResource = deleting resource '{0}'.
studio.menu.deleteAction.deleteSelectedResources = Delete selected resources.

studio.menu.generateXmlAction.title = Generate selected XML files with default scenario for project '{0}'.
studio.menu.generateXmlAction.sectionText = List of XML files marked to be generated.
studio.menu.generateXmlAction.columnText = XML files marked to be generated
studio.menu.generateScenarioAction.closeWindow = Close Scenario Generation Window
studio.menu.generateScenarioAction.closeWindow.confirm = Generation process is launched.\n\nDo you want to close window?

studio.menu.generateBundleAction.title = Generate selected Bundle file with default scenario for project '{0}' .
studio.menu.generateBundleAction.sectionText = List of Bundle (properties) files marked to be generated.
studio.menu.generateBundleAction.columnText = Bundle (properties) files marked to be generated
studio.generateBundle.file = "Generating bundle file for '{0}'.

studio.menu.productExportAction.projectHasErrors = Cannot export project because errors are encountered!
studio.menu.productExportAction.cannotExportProject = Cannot export.
studio.menu.productExportAction.testingClause = Cannot export project because 'testing' clause exists in 'resources/xml/AdichatzRcpConfig.xml' file!
studio.menu.productExportAction.noConfigFile.title = Cannot find 'AdichatzRcpConfig.xml' file!
studio.menu.productExportAction.noConfigFile.message = Cannot find 'resources/xml/AdichatzRcpConfig.xml' file!\n\n Do you want to continue?

studio.projectClean.title = List of pending problems.
studio.projectClean.launch.action = Launch described actions

studio.projectCleanAction = Clean Adichatz project.
studio.projectCleanAction.nothingToClean = No resource should be cleaned up.
studio.projectCleanAction.file = File with problem
studio.projectCleanAction.description = Description
studio.projectCleanAction.action = Action
studio.projectClean.delete.javaFile = Java file '{0}' is deleted.

studio.projectCleanAction.sax.desc = invalid AXML file
studio.projectCleanAction.obsolete.generation.desc = Generation process is obsolete.
studio.projectCleanAction.missing.desc = Generated java files without parent AXML file
studio.projectCleanAction.generation.java.desc = Generation cause java errors
studio.projectCleanAction.java.desc = Java error

studio.projectCleanAction.open.axml.file = open AXML file
studio.projectCleanAction.delete.java.files = delete java files.
studio.projectCleanAction.open.java.file = open Java file

studio.locksManager = Locks manager
studio.locksManager.choosePluginKey = Choose a plugin:

studio.connectionFailed.message = Connection to database failed! Project generation is not possible.\nChange connection parameters and retry.
studio.connectionFailed = Connection to database failed
 
studio.editor.treeForm = Tree Form
studio.editor.addElement = Add XML element
studio.editor.save = Save
studio.editor.copy = Copy
studio.editor.paste = Paste
studio.editor.cut = Cut
studio.editor.confirm.delete.elements = Cut elements are present in clipboard buffer\n\nDo you really want to delete these elements?
studio.editor.replace = Replace {0}
studio.editor.refreshFormPage = Refresh page from XML file
studio.editor.confirmRefreshFormPage = Page has been updated. Do you really want to refresh this page from elements of XML file?
studio.editor.refreshElement = Refresh current element
studio.editor.expandTree = Expand tree
studio.editor.collapseTree = Collapse tree
studio.editor.show.outLine = Show outLine view
studio.editor.show.fieldView = Show XJC Field view
studio.editor.element.error = Error for element <{0}>
studio.xjcFieldPart.value = Field value:

studio.xjcEditor.wrong.input = File '{0}' not in '$PROJECT/resources/xml' and cannot be processed by Adichatz XML editor!

studio.xjcEditor.open.file = Open '{0}' file.
studio.xjcEditor.regenerate.java.files = Regenerate java files.
studio.xjcEditor.switchToActiveFile = Switch to active file
studio.xjcEditor.save.active.file = Save active file
studio.xjcEditor.save.active.file.tooltip = Save content to '{0}' active file and close '{1}' file.
studio.xjcEditor.save.generated.file = Save generated file.
studio.xjcEditor.save.generated.file.tooltip = Save content to '{0}' generated file.

studio.xjcEditor.switchToActiveFile.message = '{0}' is a generated File. Generated content could be overloaded by next generation process.\n\n You can choose to save content in a new active file named '{1}'. 

studio.xjcEditor.compareCustomizedAndGeneratedFiles = Compare customized and generated versions

studio.compare.title = Compare ('{0}')
studio.compare.toolTipText = Compare ('{0}' - {1})

studio.xjcEditor.notNullItem = Not null elements
studio.xjcEditor.basicItem = Basic elements
studio.xjcEditor.lifeCycleItem = Life cycle elements
studio.xjcEditor.controlItem = Control / Display

studio.preference.treeEditor = Tree Editor
studio.preference.treeEditor.automaticGeneration = Generate Class automatically after save action

studio.preference.default.param = Default parameters
studio.preference.default.max.results = Query maximum result
studio.preference.default.reftext.popup.uri = RefText popup form URI 
studio.preference.default.decimal.scale = Decimal scale
studio.preference.default.interger.pattern = Integer pattern
studio.preference.default.continuation = Class name continuation
studio.preference.default.format.classes = Format generated class
studio.preference.default.xml.trace = Create an XML trace file for editor and include tree after generating
studio.preference.default.ask.switch.file.when.saving = Ask for switching to customized file when saving updated generated AXML file.
studio.preference.default.generation.scenarioTree.uri = ScenarioTree generator URI

studio.preference.customization = Default customization files
studio.preference.customization.model = Model project:
studio.preference.customization.rcp = RCP project:
studio.preference.customization.full = Both Model and RCP project: 

studio.jpa.options = JPA options
studio.jpa.generateEJBjar = Generate EJB jar
studio.jpa.deployEJBjar = EJB jar and datasource will be deployed.

studio.testConnection = Test Connection
studio.changeConnection = Change connection
studio.changeConnectionToolTip = Change parameters for database connection

studio.choose.connector = Choose connector
studio.add.connector = You can add connector proposals in changing file 'plugins/org.adichatz.template/template/connectors/connectors.xml'.

studio.pojo.usedRevengFile = Reverse Engineering file '{0}' will be in use.
studio.warningPojoGenerationReplace = POJO files will be replaced or added following to you previous choices.
studio.completedPojoGeneration = Pojo Generation is completed for project '{0}'.
studio.pojoGeneration = Pojo Generation for project '{0}'.
studio.directoryAlreadyExist = Directory '{0}' already exists!
studio.connectorName = Connector:
studio.usedParameters = Used parameters
studio.ejbGenerationTitle = EJB Generation for project '{0}'.
studio.finalRefreshing = Refresh final before completion.
studio.completedProjectCreation = Generation process is completed for project '{0}'.
studio.scenarioTree.generation.uri.not.valid = URI <{0}> for scenarioTree generation is invalid! bundleclass://PLUGIN_NAME/CLASS_NAME is expected

studio.fullProject.noDatasource = Select a datasource. 
studio.fullProject.selectApplicationSever = Select a Application Server.
scenario.applicationServer.dir.sample = e.g.: 'C:\\applicationServers\\wildfly-10.1.0.Final'
studio.fullProject.invalidPmBeanClassName = Invalid persistence manager class name.
studio.fullProject.invalidLmBeanClassName =  Invalid lock manager class name.
studio.fullProject.invalidEjbJarName = Invalid EJB jar file name. (File must end with '.jar').
studio.fullProject.applicationServer = Invalid Application Server installation (Specify right values for application server home and deployment directory).
studio.invalid.modules.directory = Invalid Application Server installation (Specify right value module directory).

studio.newProject.reverseEngeneeringOptions = Reverse Engineering options
studio.newProject.pojo.revengFile = Reverse Engineering file:
studio.newProject.pojo.revengFileToolTip = Specify the path of the reverse engineering file.
studio.newProject.pojo.revengFileSpecify = specifying the reverse engineering file.
studio.newProject.pojo.revengFileHelp = Specifying a reverse engineering file allow to drive the POJO generation process.

studio.newProject.empty.project = Generate an empty project
studio.newProject.empty.projectToolTip = Generate an empty project. You can rebuild the project later after having added your own filters.
studio.newProject.empty.projectHelp = The generated project will be empty (without entities and dependencies)\n\n Remove the void filter and add your own filters to build a customized project.

studio.newProject.packageName = Package Name:
studio.newProject.invalidPackageName = Package name is invalid!
studio.newProject.packageNameToolTip = Root package for classes of your projects
studio.newProject.specifyPackageName = specifying package name
studio.newProject.packageNameHelp = You must specify a root package name: example could be 'org.myproject'.\nThe package will be declined as following:\n\t-'org.myproject.bean' for EJB or bean matter.\n\t-'org.myproject.bean.model' for model classes.\n\t-'org.myproject.bean' for RCP components. 

studio.newProject.datasourceToolTip = Unique JPA data source (database schema) for your project.
studio.newProject.specifyDatasource = specifying data source
studio.newProject.datasourceHelp = You must specify a unique JPA data source (database schema) for your project.\n\nAvailable Data sources are specified in file ECLIPSE/plugins/org.adichatz.template/template/connectors/connectors.xml. 

studio.newProject.connectorVersionToolTip = Unique connector version for your project
studio.newProject.specifyconnectorVersion = specifying connector version
studio.newProject.connectorVersionHelp = You must specify a connector version (JSE or Application server) 
studio.newProject.connectorVersionHelp = You must specify a unique connector version (JSE or Application server)  for your project.\n\nAvailable connectors are specified in file ECLIPSE/plugins/org.adichatz.template/template/connectors/connectors.xml. 

studio.newProject.projectCreated = Project '{0}' was created

studio.newProject.beanClassName = Beans name
studio.newProject.pmBeanClassName = Persistent manager:
studio.newProject.lmBeanClassName = Lock manager:
studio.newProject.ejbJarName = EJB jar:
studio.newProject.pmBeanClassNameToolTip = Specify the Persistent Manager Bean class name.
studio.newProject.lmBeanClassNameToolTip = Specify the Lock Manager Bean class name.
studio.newProject.ejbJarNameToolTip = Specify the jar file name containing the EJB.
studio.newProject.pmBeanClassNameSpecify = specifying the Persistent Manager Bean class name.
studio.newProject.lmBeanClassNameSpecify = specifying the Lock Manager Bean class name.
studio.newProject.ejbJarNameSpecify = specifying the jar file name.
studio.newProject.pmBeanClassNameHelp = Persistence Manager Bean class name must be a valid and unique class name.\nUnicity must be understood for the project and the application server.
studio.newProject.lmBeanClassNameHelp = Lock Manager Bean class name must be a valid and unique class name.\nUnicity must be understood for the project and the application server.
studio.newProject.ejbJarNameHelp = the jar file name must end by '.jar'.
studio.generation.launching = Launching generation for project '{0}'.
studio.generation.scenarioTreeGeneration.buildingFile = Building scenario file
studio.generation.completed = Generation for project '{0}' is completed!

studio.newProject.modelProjectSelection = Model project selection

studio.jpa.launchingEjbGeneration = Launching generation of EJB jar for project '{0}'...
studio.jpa.completedEjbGeneration = EJB Generation is completed for project '{0}'.
studio.jpa.warningEjbGeneration = This action will replace previous EJB jar file and previous datasource file.

studio.jpa.deploymentDirectory = Deployment directory:
studio.jpa.deploymentDirToolTip = Specify the deployment directory.
studio.jpa.deploymentDirSpecify = specifying the deployment directory.
studio.jpa.deploymentDirHelp = Give the deployment directory of the actual application server.

studio.jpa.dataSource = Data source
studio.jpa.fileNameDS = File Name
studio.jpa.unitNameDS = Unit Name
studio.jpa.jndiNameDS = JNDI Name
studio.jpa.fileNameDSSpecify = specifying datasource File Name
studio.jpa.unitNameDSSpecify = specifying unit name for datasource
studio.jpa.jndiNameDSSpecify = specifying JNDI name for datasource
studio.jpa.fileNameDSToolTip = specify datasource File Name
studio.jpa.unitNameDSToolTip = specify unit name for datasource
studio.jpa.jndiNameDSToolTip = specify JNDI name for datasource
studio.jpa.fileNameDSHelp = File name must end by "-ds.xml".\n\nThe file will be sent to deployment directory.
studio.jpa.unitNameDSHelp = The unit name is specified in "persistence.xml" file and must be unique on the application server. 
studio.jpa.jndiNameDSHelp = JNDI is specified in "persistence.xml" file and persistent manager bean class.

studio.helpFor = Help for {0}

confirmContent.selectAll = Select all
confirmContent.deselectAll = Deselect all

############
#   JDBC   #
############
studio.jdbc.hibernateProperties = Hibernate properties
studio.jdbc.dialect = Dialect
studio.jdbc.driverClass = Connection driver class
studio.jdbc.URL = Connection URL
studio.jdbc.username = Connection Username
studio.jdbc.password = Connection Password
studio.jdbc.schema = Connection Schema
studio.jdbc.driverJar = JDBC driver jar
studio.reveng.file = Reverse engineering file

studio.duplicateIdentifier = duplicate identifier

studio.default.null = default value (null)

studio.none = None
studio.info = Info
studio.warning = Warning
studio.error = Error

studio.search.class.error = Error when searching for class
studio.search.class.error.message = The class '{0}' wasn't found!\n\nCannot open the editor for this class. 
studio.no.class.for.listener.type = Don't know which super class must be chosen for listener type '{0}' !?
studio.listener.classOrCodeMandatory = Specify a listener class name or enter specific code.

studio.invalid.class = Invalid class '{0}' or class is not accessible from plugin '{1}'.

studio.pojo.error = Error when creating new Entity class
studio.pojo.improper.usage = Entity class (POJO) cannot be created from this editor!\n\n Use Scenario editor (page Model) to generate POJO..

studio.identifier.key = Invalid identifier
studio.identifier.isNull = Identifier is null
studio.controller.class.key = Invalid controller class name.
studio.controller.class = Invalid controller class name  '{0}'.
studio.combined.class.key = Invalid combined class name.
studio.combined.class = Invalid combined class name '{0}'.
studio.invalid.property.name.key = Invalid property name.
studio.invalid.property.name = Invalid property name '{0}'.
studio.entity.URI.key = Invalid entity URI.
studio.adi.resource.URI.key = Invalid Adichatz URI.

studio.invalid.pluginKey = Invalid plugin key '{0}'.
studio.invalid.subPackage = Invalid Invalid sub-package '{0}'.
studio.invalid.treeId = Invalid tree identifier '{0}'.
studio.current.project = Current project
studio.resource.uri.list = List of Adichatz resource URIs.
studio.resource.callback.list = List of eligible Callback classes.
studio.resource.callfore.list = List of eligible Callfore classes.
studio.no.annotation = '{0}' Class has no '{1}' annotation.
studio.no.annotation = '{0}' Class has no '{1}' annotation.
studio.invalid.annotation = '{0}' Class has not correct annotation annotation ('{1}'  != '{2}') .
studio.export.no.file = File '{0}' does not exist: export by this way is not possible!
studio.no.resource = Resource '{0}' does not exist!
studio.bundle.project.not.exists = Bundle or project '{0}' does not exists?!

studio.invalid.axml.file = '{0}' AXML file is invalid and cannot be unmarshalled.
studio.java.files.errors = At least one linked Java file of '{0}' AXML file contains errors.
studio.refresh.close.resources = \n\nScenario resources was refreshed.\n\nRelated XML resources must be closed to consider changes.
studio.resource.exception = '{0}' file is locked or does not exist for modification! 

studio.generate.plugin.entity.tree = Generate Plugin Entity Tree.
studio.generate.activator = Generate Activator class.

scenario.applicationServer.update = Update Application Server
scenario.applicationServer.group = Application Server
scenario.applicationServer = Application Server:
scenario.applicationServer.name = Name:
scenario.applicationServer.deploymentDir = Deployment directory:
scenario.applicationServer.invalid.deploymentDir = Invalid deployment directory
scenario.applicationServer.description = Description:

scenario.as.home = Application Server Home:
scenario.as.deploymentDir = Deployment directory:
scenario.as.modulesDir = Modules directory:
scenario.as.save.connector = Save Application Server connector
scenario.as.SERVER = Server properties
scenario.as.CONTEXT = Context properties
scenario.as.REMOTE = Remote properties
scenario.as.jse.no.parameter = JSE environment was chosen. No parameter is available. 


scenario.datasource.update = Update data source
scenario.datasource.group = Datasource
scenario.datasource.id = Id:
scenario.datasource.name = Data source Name:
scenario.datasource.description = Description:
scenario.customization.file = Customization file:

scenario.datasource.AS = Datasource parameters for Application Server
scenario.datasource.driver = Driver:
scenario.datasource.xa.datasource.class = XA datasource class
scenario.specify.driver = Specify a driver name
scenario.driver.message = Driver jar specified above, will be automatically set into JBoss installation.\n Datasources installed on JBoss 7.1.x, can refer to the driver by this name.  
scenario.xa.datasource.class.driver = Specify a XA datasource class
scenario.xa.datasource.class.message = Driver class for distributed transaction (XA).  

scenario.datasource.invalid.ejb = Invalid EJB file name (extension must be .jar, or .ear or ... .?ar)!
scenario.datasource.invalid.xml = Invalid datasource file name (name must end with "-ds.xml")!
scenario.datasource.invalid.className = Invalid class name!
scenario.datasource.add = Add data source
scenario.datasource.properties.group = Properties
scenario.datasource.connector.exist = Connector: '{0}' already exists in Connectors.xml file!
scenario.datasource.save.connector = Save datasource connector
scenario.datasource.test.connection = Test connection
scenario.connector.save.message = New values for datasource connector '{0}' were saved. Customization file is changed.
scenario.EJB.group = EJB attributes
scenario.AS.group = AS attributes

scenario.generation.what = What's to generate
scenario.generation.model = Generate model part
scenario.generation.rcp = Generate RCP part

scenario.merge.customization = Merge 'Customization file' to scenario.
 
scenario.generate.pojo = Generate POJOs.
scenario.folder.pojo = Copy POJOs from a folder of current workspace.
scenario.pojo.folder.choose = Choose a package containing POjos in workspace.  

scenario.add.components.rewrite = Add libraries, generate Connector, plugin entities, rewrite POJOs...
scenario.generate.metaModel = Generate queries and Meta model, Persistence.xml...
scenario.generate.metaModel.onlyChanges = process only for deleted and created Plugin-Entities.
scenario.generate.metaModel.all = process for all Plugin-Entities.
scenario.generate.ejb = Generate EJB.
scenario.generate.persistence.xml = Regenerate 'persistence.xml' file.
scenario.deploy.ejb = Deploy EJB on Application Server.

scenario.generate.callback = Generate privileges and callbacks calls.

scenario.generate.rcp.pluginEntities = Generate Plugin-Entities Tree for RCP part

scenario.generate.rcp.basic.components = Generate basic RCP components.
scenario.generate.initialize.rcp = Generate plugin activator, MANIFEST.MF, Generation Units...
scenario.generate.rcp.application = Generate Application files: Application.e4xmi, plugin.xml, product file...
scenario.add.ui.generation.unit = Add UI generation units (navigator, editor, detail, table) to Scenario tree.
scenario.generate.navigator = Generate navigator.

scenario.missing.components = Generate missing RCP components (Details, Tables, Editors).
scenario.generate = Generate scenario
scenario.editor.generate.pojo = Generate pojo and Plugin-Entities from database schema

scenario.model.part = Model part
scenario.has.model.part = Does project has model part ?
scenario.has.rcp.part = Does project has RCP part ?
scenario.is.application = Does project is a RCP Application ?
scenario.has.navigator = Do you want project to contain a generated navigator?
scenario.pojo.generation = Generate pojos from DB schema
scenario.save.before.change = Save resources before they are changed or deleted?
scenario.delete.unused = Delete unused resources?
scenario.plugin.entities.group = List of Plugin-entities used in the project

scenario.model.add.entities = Adds new entities to plugin
scenario.add.record.all = Add the generation unit on all entities.
scenario.delete.record = Delete record.
scenario.open.resource = Open resource
scenario.add.generationUnits = Add generation units
scenario.add.generationUnit = Add '{0}' generation unit
scenario.scenario.already.exist = Project name '{0}': Project does not exist but ScenarioResources exists ! replacing ScenarioResources.
scenario.refresh.initial.pojo = Refresh POJO (see {PROJECT_DIR}/resources/build/pojo/ directory).


scenario.features = Features
scenario.parameters = Parameters
scenario.scenarios = Scenarios
scenario.generators = Generators
scenario.controllers = Controllers
scenario.paths = Paths
scenario.action.resources = Actions on resources
action.resource.copy = Copy
action.resource.remove = Remove

scenario.model.page = Model
scenario.model.formText = Define model part for project '{0}'.
scenario.rcp.page = RCP
scenario.rcp.formText = Define RCP part for project '{0}'.
scenario.features.page = Features
scenario.features.formText = Features for project '{0}'.
scenario.features.new = Edit a new record.
scenario.features.delete = Delete the record.
choose.resource.action.type = Choose Resource Action type.
action.resource.copy = Copy resource
action.resource.remove = Remove resource
action.resource.name.example = adi//{pluginName}/{resource}


scenario.custom.formText = Integrated customization for project '{0}'.
scenario.custom.page = Customizations
scenario.custom.deleteCustom = Delete current customization from Scenario.xml file.
scenario.custom.reloadCustom = Reload current customization.

scenario.custom.no.action.title = No post action specified
scenario.custom.no.action.message = Specify post action in Customized Scenario Tree if you want it to be merged to current project.

scenario.custom.title = Merge customizations to scenario for '{0}' project.
scenario.custom.merge = Merge customizations to scenario.
scenario.custom.label = Customization file:
scenario.custom.invalid = '{0}': customization file is invalid!
scenario.custom.invalid.syntax = Syntax for '{0}' customization file is invalid!
scenario.custom.invalid.type = '{0}' customization file must contain a '{1}' type!
scenario.custom.toolTip = Specify the customization XML file for the project.
scenario.custom.specify = Specify the customization XML file
scenario.custom.help = Specify the customization XML file for customizing generation process for the project:\n\t- file must exists.\n\t- file must contain a 'scenarioTree' element.\n\nThese items can be customized:\n\t- type of a entity field.\n\t- controller associated with the field.\n\t- parameters.\n\t- actionresources.\n\t- ...
scenario.custom.choose.file = Choose Scenario Customization file
scenario.custom.tree = Scenario customization tree
scenario.custom.generateScenario.file = Generate components from '{0}' customization file for project '{1}'.
scenario.custom.generateScenario = Generate components from scenario file.
scenario.custom.integration = Integrate customizations inside 'scenario.xml' file. 
scenario.custom.rewrite.pojos = Rewrite pojos.
scenario.custom.generate.unit.regex =  = Regenerate '{0}' for entities having name and property following '{1}' and '{2}'regulars expressions.
scenario.custom.generate.unit.entity.regex = Regenerate '{0}' for entities having name following '{1}' regular expression.
scenario.custom.generate.unit.property.regex = Regenerate '{0}' for entities having property following '{1}' regular expression.
scenario.custom.generate.unit.all = Regenerate '{0}' for all entities.
scenario.custom.generate.action.resources = Additional action on resources: Copy or remove resources

scenario.custom.openFile = Open XML scenario file
scenario.custom.copyFileName = Copy file name into clipboard

scenario.generation.page = Generation
scenario.generation.formText = What's to generate for project '{0}'.

scenario.generation.chooseEntities = Choose entities to add to project
scenario.generation.choose.plugin = Choose a plugin
scenario.generate.selection = Generate selected resources

search.internal.axml.files = Search internal axml files in plugins.

scenario.generation.warning = Generation is no possible due to warning.
scenario.generation.nothing.todo = No item was selected, so there is nothing to generate!

scenario.change = Changes affect generation process
scenario.generate.model.after.change = Do you want to generate Model Part?
scenario.generate.api.model.after.change = Do you want to generate API with Model Project or Model Plugin?
scenario.generate.rcp.after.change = Do you want to generate RCP Part?
scenario.regenerate.PluginEntityTree = Do you want to regenerate PluginEntityTree class with new URI values?

scenario.generate.not.possible = Launching job generation is not possible.
scenario.generate.job.already.exist = A generation job is already launched for project '{0}'!
scenario.generate.complete.title = Job is completed.
scenario.generate.complete.message = Generation job is completed for project '{0}'.

scenario.add.driver.module = Do you want to add driver '{0}' in modules of Jboss installation?
scenario.add.driver.standalone = Do you want to add driver '{0}' in standalone.xml file?
scenario.add.datasource.standalone = Do you want to add datasource '{0}' in standalone.xml file?
scenario.jboss.installation = Jboss installation 
scenario.jboss.incomplete.installation = Incomplete installation of '{0}' for project '{1}'  
scenario.JBossinitialization = {0} initialization 
scenario.jboss.installation.changed = Changes affected JBoss installation. Application Server must be STOPPED.
scenario.jboss.terminate.session = An application server session is launched under Eclipse. Do you want to stop it? 

scenario.specify.driver = Specify a driver name
scenario.driver.message = Driver jar specified above, will be automatically set into JBoss installation.\n Datasources installed on JBoss 7.1.x, can refer to the driver by this name.
scenario.no.model.file.title = No POJO found.
scenario.no.model.file.message = No POJO found!\n\nGeneration process was interrupted.
scenario.no.model.file.warning = No POJO found! Generation process was interrupted.

scenario.roles = Roles

scenario.invalid.action = Invalid action.
scenario.abort.chage.xml.page = Current page was updated. Save change or revert file before trying to change page.
scenario.abort.chage.page = Current page was updated. Save change or refresh data before trying to change page.

studio.runOrDebug.invalidFile = Product file '{0}' doesn't exist!
studio.runOrDebug.cannot.launch.product = Cannot launch product from '{0}' element type!

studio.queryParameter.suffix.error = Error: parameter '{0}' has no suffix!?
studio.queryParameter.property.not.specified = Property must be specified because parameter id ('{0}') does not correspond to a property of the jointure!
studio.jointure.duplicate.suffix.key = Duplicate suffix 
studio.jointure.duplicate.suffix.message = Duplicate suffix: Suffix is already used in current query!

generation.encountered.errors = Errors have been encountered when generating

#######################
#   Log Preferences   #
#######################
studio.logProperties = Log properties
studio.logDebug = Debug
studio.logTrace = Trace
studio.logInfo = Info
studio.logWarning = Warning
studio.logError = Error
studio.consoleDisplay = Sent to console
studio.dialogDisplay =	Display in message dialog window
studio.statusDisplay = Create a new status

###############
#   Broadcast #
###############
broadcast.communication.launch = Launch sockets server?
broadcast.communication.force.active = Force activation of IDE after receiving socket?
broadcast.communication = IDE Communication
broadcast.runtimeServerThread.startupFailed = Broadcast Startup failed (communication between IDE and runtime application)!\n\nGenerally this error occurs when port is buzy.
